import{_ as e,o as n,c as a,e as i}from"./app-CoV9NwP4.js";const s={},t=i(`<h2 id="utilities" tabindex="-1"><a class="header-anchor" href="#utilities"><span>Utilities</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>insmod
modprobe
rmmod
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>User-space utilities that load modules into the running kernels and remove them.</p><h2 id="linux-init-h" tabindex="-1"><a class="header-anchor" href="#linux-init-h"><span>&lt;linux/init.h&gt;</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">module_init</span><span class="token punctuation">(</span>init_function<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">module_exit</span><span class="token punctuation">(</span>cleanup_function<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Macros that designate a moduleâ€™s initialization and cleanup functions.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>__init
__initdata
__exit
__exitdata
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Markers for functions (<code>__init</code> and <code>__exit</code>) and data (<code>__initdata</code> and <code>__exitdata</code>) that are only used at module initialization or cleanup time. Items marked for initialization may be discarded once initialization completes; the exit items may be discarded if module unloading has not been configured into the kernel. These markers work by causing the relevant objects to be placed in a special ELF section in the executable file.</p><h2 id="linux-sched-h" tabindex="-1"><a class="header-anchor" href="#linux-sched-h"><span>&lt;linux/sched.h&gt;</span></a></h2><p>One of the most important header files. This file contains definitions of much of the kernel API used by the driver, including functions for sleeping and numerous variable declarations.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>current<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The current process.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>current<span class="token operator">-&gt;</span>pid
current<span class="token operator">-&gt;</span>comm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The process ID and command name for the current process.</p><h2 id="makefile" tabindex="-1"><a class="header-anchor" href="#makefile"><span>Makefile</span></a></h2><div class="language-makefile line-numbers-mode" data-ext="makefile" data-title="makefile"><pre class="language-makefile"><code>obj-m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A makefile symbol used by the kernel build system to determine which modules should be built in the current directory.</p><h2 id="files" tabindex="-1"><a class="header-anchor" href="#files"><span>Files</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>/sys/module
/proc/modules
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>/sys/module</code> is a sysfs directory hierarchy containing information on currently-loaded modules. <code>/proc/modules</code> is the older, single-file version of that information. Entries contain the module name, the amount of memory each module occupies, and the usage count. Extra strings are appended to each line to specify flags that are currently active for the module.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>vermagic.o
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>An object file from the kernel source directory that describes the environment a module was built for.</p><h2 id="linux-module-h" tabindex="-1"><a class="header-anchor" href="#linux-module-h"><span>&lt;linux/module.h&gt;</span></a></h2><p>Required header. It must be included by a module source.</p><h2 id="linux-version-h" tabindex="-1"><a class="header-anchor" href="#linux-version-h"><span>&lt;linux/version.h&gt;</span></a></h2><p>A header file containing information on the version of the kernel being built.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>LINUX_VERSION_CODE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Integer macro, useful to <code>#ifdef</code> version dependencies.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">EXPORT_SYMBOL_GPL</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Macro used to export a symbol to the kernel. The second form limits use of the exported symbol to GPL-licensed modules.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">MODULE_AUTHOR</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_DESCRIPTION</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_VERSION</span><span class="token punctuation">(</span>version_string<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_DEVICE_TABLE</span><span class="token punctuation">(</span>table_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MODULE_ALIAS</span><span class="token punctuation">(</span>alternate_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Place documentation on the module in the object file.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">MODULE_LICENSE</span><span class="token punctuation">(</span>license<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Declare the license governing this module.</p><h2 id="linux-moduleparam-h" tabindex="-1"><a class="header-anchor" href="#linux-moduleparam-h"><span>&lt;linux/moduleparam.h&gt;</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">module_param</span><span class="token punctuation">(</span>variable<span class="token punctuation">,</span> type<span class="token punctuation">,</span> perm<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Macro that creates a module parameter that can be adjusted by the user when the module is loaded (or at boot time for built-in code). The type can be one of <code>bool</code>, <code>charp</code>, <code>int</code>, <code>invbool</code>, <code>long</code>, <code>short</code>, <code>ushort</code>, <code>uint</code>, <code>ulong</code>, or <code>intarray</code>.</p><h2 id="linux-kernel-h" tabindex="-1"><a class="header-anchor" href="#linux-kernel-h"><span>&lt;linux/kernel.h&gt;</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">printk</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The analogue of <code>printf</code> for kernel code.</p>`,40),l=[t];function o(c,d){return n(),a("div",null,l)}const r=e(s,[["render",o],["__file","2022-05-13-linux-device-drivers-building-and-running-modules.html.vue"]]),p=JSON.parse('{"path":"/2022/research/notes/linux-device-drivers/2022-05-13-linux-device-drivers-building-and-running-modules.html","title":"Linux Device Drivers | Building and Running Modules","lang":"en-US","frontmatter":{"date":"2022-05-13T00:00:00.000Z","isOriginal":false,"category":["Research"],"tag":["C/C++","Linux","Linux Device Drivers","Linux Kernel"],"title":"Linux Device Drivers | Building and Running Modules","description":"Utilities User-space utilities that load modules into the running kernels and remove them. <linux/init.h> Macros that designate a moduleâ€™s initialization and cleanup functions. ...","head":[["meta",{"property":"og:url","content":"https://blog.liblaf.me/2022/research/notes/linux-device-drivers/2022-05-13-linux-device-drivers-building-and-running-modules.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"Linux Device Drivers | Building and Running Modules"}],["meta",{"property":"og:description","content":"Utilities User-space utilities that load modules into the running kernels and remove them. <linux/init.h> Macros that designate a moduleâ€™s initialization and cleanup functions. ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-03T09:57:39.000Z"}],["meta",{"property":"article:author","content":"liblaf"}],["meta",{"property":"article:tag","content":"C/C++"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:tag","content":"Linux Device Drivers"}],["meta",{"property":"article:tag","content":"Linux Kernel"}],["meta",{"property":"article:published_time","content":"2022-05-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-03T09:57:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux Device Drivers | Building and Running Modules\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-03T09:57:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://liblaf.me\\",\\"email\\":\\"i@liblaf.me\\"}]}"]]},"headers":[{"level":2,"title":"Utilities","slug":"utilities","link":"#utilities","children":[]},{"level":2,"title":"<linux/init.h>","slug":"linux-init-h","link":"#linux-init-h","children":[]},{"level":2,"title":"<linux/sched.h>","slug":"linux-sched-h","link":"#linux-sched-h","children":[]},{"level":2,"title":"Makefile","slug":"makefile","link":"#makefile","children":[]},{"level":2,"title":"Files","slug":"files","link":"#files","children":[]},{"level":2,"title":"<linux/module.h>","slug":"linux-module-h","link":"#linux-module-h","children":[]},{"level":2,"title":"<linux/version.h>","slug":"linux-version-h","link":"#linux-version-h","children":[]},{"level":2,"title":"<linux/moduleparam.h>","slug":"linux-moduleparam-h","link":"#linux-moduleparam-h","children":[]},{"level":2,"title":"<linux/kernel.h>","slug":"linux-kernel-h","link":"#linux-kernel-h","children":[]}],"git":{"createdTime":1677217008000,"updatedTime":1709459859000,"contributors":[{"name":"liblaf","email":"30631553+liblaf@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":1.45,"words":434},"filePathRelative":"2022/research/notes/linux-device-drivers/2022-05-13-linux-device-drivers-building-and-running-modules.md","localizedDate":"May 13, 2022","excerpt":"<h2>Utilities</h2>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>insmod\\nmodprobe\\nrmmod\\n</code></pre></div><p>User-space utilities that load modules into the running kernels and remove them.</p>\\n<h2>&lt;linux/init.h&gt;</h2>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token function\\">module_init</span><span class=\\"token punctuation\\">(</span>init_function<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token function\\">module_exit</span><span class=\\"token punctuation\\">(</span>cleanup_function<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{r as comp,p as data};
