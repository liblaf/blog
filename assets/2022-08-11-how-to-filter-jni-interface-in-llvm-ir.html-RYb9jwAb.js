import{_ as n,o as a,c as s,e as t}from"./app-CoV9NwP4.js";const e={},p=t(`<p><code>JNIEnv</code> ( aka <code>const struct JNINativeInterface*</code>, defined in <code>jni.h</code> ) provides a rich interface for accessing Java variables and methods in C/C++. All interfaces are members of <code>struct.JNINativeInterface</code>. You can read <code>jni.h</code> for more details.</p><h2 id="use-jnienv-in-c-c" tabindex="-1"><a class="header-anchor" href="#use-jnienv-in-c-c"><span>Use <code>JNIEnv</code> in C/C++</span></a></h2><div class="hint-container info"><p class="hint-container-title">Info</p><p>The <code>jni.h</code> bundled in the <code>NDK LLVM toolchain</code> is usually located at <code>\${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/jni.h</code>.</p></div><p>Here is a simple example showing how to use <code>JNIEnv</code>. In the example below, you need to pass the Class ID and Method ID to the interface so that <code>JNI</code> will call the appropriate method for you.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>jfloat <span class="token function">J4AC_android_media_AudioTrack__getMaxVolume</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">CallStaticFloatMethod</span><span class="token punctuation">(</span>
      env<span class="token punctuation">,</span> class_J4AC_android_media_AudioTrack<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
      class_J4AC_android_media_AudioTrack<span class="token punctuation">.</span>method_getMaxVolume<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="how-jnienv-is-called-in-llvm-ir" tabindex="-1"><a class="header-anchor" href="#how-jnienv-is-called-in-llvm-ir"><span>How <code>JNIEnv</code> Is Called in <code>LLVM IR</code></span></a></h2><p>After translating the example to <code>LLVM IR</code> with <code>-O0</code> option ( no optimization ), we get</p><div class="language-llvm line-numbers-mode" data-ext="llvm" data-title="llvm"><pre class="language-llvm"><code><span class="token comment">; Function Attrs: noinline nounwind sspstrong uwtable</span>
<span class="token keyword">define</span> <span class="token type class-name">float</span> <span class="token variable">@J4AC_android_media_AudioTrack__getMaxVolume</span><span class="token punctuation">(</span><span class="token variable">%struct.JNINativeInterface</span><span class="token punctuation">*</span><span class="token punctuation">*</span><span class="token punctuation">)</span> <span class="token variable">#0</span> <span class="token variable">!dbg</span> <span class="token variable">!1243</span> <span class="token punctuation">{</span>
  <span class="token variable">%2</span> <span class="token punctuation">=</span> <span class="token keyword">alloca</span> <span class="token variable">%struct.JNINativeInterface</span><span class="token punctuation">*</span><span class="token punctuation">*</span><span class="token punctuation">,</span> <span class="token keyword">align</span> <span class="token number">4</span>
  <span class="token keyword">store</span> <span class="token variable">%struct.JNINativeInterface</span><span class="token punctuation">*</span><span class="token punctuation">*</span> <span class="token variable">%0</span><span class="token punctuation">,</span> <span class="token variable">%struct.JNINativeInterface</span><span class="token punctuation">*</span><span class="token punctuation">*</span><span class="token punctuation">*</span> <span class="token variable">%2</span><span class="token punctuation">,</span> <span class="token keyword">align</span> <span class="token number">4</span>
  <span class="token keyword">call</span> <span class="token type class-name">void</span> <span class="token variable">@llvm.dbg.declare</span><span class="token punctuation">(</span><span class="token type class-name">metadata</span> <span class="token variable">%struct.JNINativeInterface</span><span class="token punctuation">*</span><span class="token punctuation">*</span><span class="token punctuation">*</span> <span class="token variable">%2</span><span class="token punctuation">,</span> <span class="token type class-name">metadata</span> <span class="token variable">!1246</span><span class="token punctuation">,</span> <span class="token type class-name">metadata</span> <span class="token variable">!DIExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">!dbg</span> <span class="token variable">!1247</span>
  <span class="token variable">%3</span> <span class="token punctuation">=</span> <span class="token keyword">load</span> <span class="token variable">%struct.JNINativeInterface</span><span class="token punctuation">*</span><span class="token punctuation">*</span><span class="token punctuation">,</span> <span class="token variable">%struct.JNINativeInterface</span><span class="token punctuation">*</span><span class="token punctuation">*</span><span class="token punctuation">*</span> <span class="token variable">%2</span><span class="token punctuation">,</span> <span class="token keyword">align</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token variable">!dbg</span> <span class="token variable">!1248</span>
  <span class="token variable">%4</span> <span class="token punctuation">=</span> <span class="token keyword">load</span> <span class="token variable">%struct.JNINativeInterface</span><span class="token punctuation">*</span><span class="token punctuation">,</span> <span class="token variable">%struct.JNINativeInterface</span><span class="token punctuation">*</span><span class="token punctuation">*</span> <span class="token variable">%3</span><span class="token punctuation">,</span> <span class="token keyword">align</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token variable">!dbg</span> <span class="token variable">!1249</span>
  <span class="token variable">%5</span> <span class="token punctuation">=</span> <span class="token keyword">getelementptr</span> <span class="token keyword">inbounds</span> <span class="token variable">%struct.JNINativeInterface</span><span class="token punctuation">,</span> <span class="token variable">%struct.JNINativeInterface</span><span class="token punctuation">*</span> <span class="token variable">%4</span><span class="token punctuation">,</span> <span class="token type class-name">i32</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token type class-name">i32</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token variable">!dbg</span> <span class="token variable">!1250</span>
  <span class="token variable">%6</span> <span class="token punctuation">=</span> <span class="token keyword">load</span> <span class="token type class-name">float</span> <span class="token punctuation">(</span><span class="token variable">%struct.JNINativeInterface</span><span class="token punctuation">*</span><span class="token punctuation">*</span><span class="token punctuation">,</span> <span class="token type class-name">i8</span><span class="token punctuation">*</span><span class="token punctuation">,</span> <span class="token variable">%struct._jmethodID</span><span class="token punctuation">*</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">*</span><span class="token punctuation">,</span> <span class="token type class-name">float</span> <span class="token punctuation">(</span><span class="token variable">%struct.JNINativeInterface</span><span class="token punctuation">*</span><span class="token punctuation">*</span><span class="token punctuation">,</span> <span class="token type class-name">i8</span><span class="token punctuation">*</span><span class="token punctuation">,</span> <span class="token variable">%struct._jmethodID</span><span class="token punctuation">*</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">*</span><span class="token punctuation">*</span> <span class="token variable">%5</span><span class="token punctuation">,</span> <span class="token keyword">align</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token variable">!dbg</span> <span class="token variable">!1250</span>
  <span class="token variable">%7</span> <span class="token punctuation">=</span> <span class="token keyword">load</span> <span class="token variable">%struct.JNINativeInterface</span><span class="token punctuation">*</span><span class="token punctuation">*</span><span class="token punctuation">,</span> <span class="token variable">%struct.JNINativeInterface</span><span class="token punctuation">*</span><span class="token punctuation">*</span><span class="token punctuation">*</span> <span class="token variable">%2</span><span class="token punctuation">,</span> <span class="token keyword">align</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token variable">!dbg</span> <span class="token variable">!1251</span>
  <span class="token variable">%8</span> <span class="token punctuation">=</span> <span class="token keyword">load</span> <span class="token type class-name">i8</span><span class="token punctuation">*</span><span class="token punctuation">,</span> <span class="token type class-name">i8</span><span class="token punctuation">*</span><span class="token punctuation">*</span> <span class="token keyword">getelementptr</span> <span class="token keyword">inbounds</span> <span class="token punctuation">(</span><span class="token variable">%struct.J4AC_android_media_AudioTrack</span><span class="token punctuation">,</span> <span class="token variable">%struct.J4AC_android_media_AudioTrack</span><span class="token punctuation">*</span> <span class="token variable">@class_J4AC_android_media_AudioTrack</span><span class="token punctuation">,</span> <span class="token type class-name">i32</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token type class-name">i32</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">align</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token variable">!dbg</span> <span class="token variable">!1252</span>
  <span class="token variable">%9</span> <span class="token punctuation">=</span> <span class="token keyword">load</span> <span class="token variable">%struct._jmethodID</span><span class="token punctuation">*</span><span class="token punctuation">,</span> <span class="token variable">%struct._jmethodID</span><span class="token punctuation">*</span><span class="token punctuation">*</span> <span class="token keyword">getelementptr</span> <span class="token keyword">inbounds</span> <span class="token punctuation">(</span><span class="token variable">%struct.J4AC_android_media_AudioTrack</span><span class="token punctuation">,</span> <span class="token variable">%struct.J4AC_android_media_AudioTrack</span><span class="token punctuation">*</span> <span class="token variable">@class_J4AC_android_media_AudioTrack</span><span class="token punctuation">,</span> <span class="token type class-name">i32</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token type class-name">i32</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">align</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token variable">!dbg</span> <span class="token variable">!1253</span>
  <span class="token variable">%10</span> <span class="token punctuation">=</span> <span class="token keyword">call</span> <span class="token type class-name">float</span> <span class="token punctuation">(</span><span class="token variable">%struct.JNINativeInterface</span><span class="token punctuation">*</span><span class="token punctuation">*</span><span class="token punctuation">,</span> <span class="token type class-name">i8</span><span class="token punctuation">*</span><span class="token punctuation">,</span> <span class="token variable">%struct._jmethodID</span><span class="token punctuation">*</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token variable">%6</span><span class="token punctuation">(</span><span class="token variable">%struct.JNINativeInterface</span><span class="token punctuation">*</span><span class="token punctuation">*</span> <span class="token variable">%7</span><span class="token punctuation">,</span> <span class="token type class-name">i8</span><span class="token punctuation">*</span> <span class="token variable">%8</span><span class="token punctuation">,</span> <span class="token variable">%struct._jmethodID</span><span class="token punctuation">*</span> <span class="token variable">%9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">!dbg</span> <span class="token variable">!1254</span>
  <span class="token keyword">ret</span> <span class="token type class-name">float</span> <span class="token variable">%10</span><span class="token punctuation">,</span> <span class="token variable">!dbg</span> <span class="token variable">!1255</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>%10</code> is a <code>CallInst</code> which calls the <code>CallStaticFloatMethod</code> function. The called operand is a <code>LoadInst</code>, <code>%6</code>, which loads the function from the pointer <code>%5</code>. <code>%5</code> is a pointer to the element in <code>struct.JNINativeInterface</code>. The last operand of the <code>GetElementPtrInst</code> <code>%5</code> is <code>i32 135</code>. With an alignment of 4 ( usually on 32-bit machines ), it means an offset of <code>135 * 4 = 540</code>.</p><p>Therefore, we can obtain the index of <code>struct</code> members like this:</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> call_inst <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dyn_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>CallInst<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>instruction<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>call_inst<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token function">outs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;CallInst: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>call_inst <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> load_inst <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dyn_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>LoadInst<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>call_inst<span class="token operator">-&gt;</span><span class="token function">getCalledOperand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>load_inst<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token function">outs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;LoadInst: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>load_inst <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> get_element_ptr_inst <span class="token operator">=</span>
    <span class="token generic-function"><span class="token function">dyn_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>GetElementPtrInst<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>load_inst<span class="token operator">-&gt;</span><span class="token function">getPointerOperand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>get_element_ptr_inst<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token function">outs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;GemElementPtrInst: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>get_element_ptr_inst <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> jni_native_interface <span class="token operator">=</span>
    <span class="token generic-function"><span class="token function">dyn_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>StructType<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>get_element_ptr_inst<span class="token operator">-&gt;</span><span class="token function">getSourceElementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>jni_native_interface<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token function">outs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;StructName: &quot;</span> <span class="token operator">&lt;&lt;</span> jni_native_interface<span class="token operator">-&gt;</span><span class="token function">getStructName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>jni_native_interface<span class="token operator">-&gt;</span><span class="token function">getStructName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">&quot;struct.JNINativeInterface&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>get_element_ptr_inst<span class="token operator">-&gt;</span><span class="token function">getNumIndices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>get_element_ptr_inst<span class="token operator">-&gt;</span><span class="token function">hasAllConstantIndices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> index <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dyn_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>ConstantInt<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>get_element_ptr_inst<span class="token operator">-&gt;</span><span class="token function">idx_begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">outs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;offset_in_alignment: &quot;</span> <span class="token operator">&lt;&lt;</span> index<span class="token operator">-&gt;</span><span class="token function">getSExtValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2>`,12),o=[p];function c(l,i){return a(),s("div",null,o)}const r=n(e,[["render",c],["__file","2022-08-11-how-to-filter-jni-interface-in-llvm-ir.html.vue"]]),k=JSON.parse('{"path":"/2022/research/idea/2022-08-11-how-to-filter-jni-interface-in-llvm-ir.html","title":"How To Filter JNI Interface in LLVM IR","lang":"en-US","frontmatter":{"date":"2022-08-11T00:00:00.000Z","isOriginal":true,"category":["Research"],"tag":["C/C++","JNI","Java","LLVM"],"title":"How To Filter JNI Interface in LLVM IR","description":"JNIEnv ( aka const struct JNINativeInterface*, defined in jni.h ) provides a rich interface for accessing Java variables and methods in C/C++. All interfaces are members of stru...","head":[["meta",{"property":"og:url","content":"https://blog.liblaf.me/2022/research/idea/2022-08-11-how-to-filter-jni-interface-in-llvm-ir.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"How To Filter JNI Interface in LLVM IR"}],["meta",{"property":"og:description","content":"JNIEnv ( aka const struct JNINativeInterface*, defined in jni.h ) provides a rich interface for accessing Java variables and methods in C/C++. All interfaces are members of stru..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-03T09:57:39.000Z"}],["meta",{"property":"article:author","content":"liblaf"}],["meta",{"property":"article:tag","content":"C/C++"}],["meta",{"property":"article:tag","content":"JNI"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"LLVM"}],["meta",{"property":"article:published_time","content":"2022-08-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-03T09:57:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How To Filter JNI Interface in LLVM IR\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-03T09:57:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://liblaf.me\\",\\"email\\":\\"i@liblaf.me\\"}]}"]]},"headers":[{"level":2,"title":"Use JNIEnv in C/C++","slug":"use-jnienv-in-c-c","link":"#use-jnienv-in-c-c","children":[]},{"level":2,"title":"How JNIEnv Is Called in LLVM IR","slug":"how-jnienv-is-called-in-llvm-ir","link":"#how-jnienv-is-called-in-llvm-ir","children":[]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"createdTime":1677217008000,"updatedTime":1709459859000,"contributors":[{"name":"liblaf","email":"30631553+liblaf@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":1.52,"words":456},"filePathRelative":"2022/research/idea/2022-08-11-how-to-filter-jni-interface-in-llvm-ir.md","localizedDate":"August 11, 2022","excerpt":"<p><code>JNIEnv</code> ( aka <code>const struct JNINativeInterface*</code>, defined in <code>jni.h</code> ) provides a rich interface for accessing Java variables and methods in C/C++. All interfaces are members of <code>struct.JNINativeInterface</code>. You can read <code>jni.h</code> for more details.</p>","autoDesc":true}');export{r as comp,k as data};
