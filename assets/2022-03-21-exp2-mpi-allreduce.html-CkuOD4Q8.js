import{_ as n,o as s,c as a,e as o}from"./app-CoV9NwP4.js";const t={},e=o(`<h2 id="ring-allreduce-算法" tabindex="-1"><a class="header-anchor" href="#ring-allreduce-算法"><span>Ring Allreduce 算法</span></a></h2><p>首先将每个结点的数据分为 <code>comm_sz</code> 个数据块, 每个数据块大小为 <code>count = n / comm_sz</code> 个 <code>float</code>.</p><p>第一阶段共 <code>comm_sz - 1</code> 步. 在第 <code>k</code> 步, 第 <code>my_rank</code> 个进程会将自己的第 <code>(my_rank - k) % comm_sz</code> 对应数据块发送给第 <code>succ = my_rank + 1</code> 个进程并累加. 注意到对于 <code>my_rank</code> 进程, 第 <code>k</code> 步的 <code>Send</code> 与 <code>Recv</code> 使用的数据块不同, 但第 <code>k + 1</code> 步的 <code>Send</code> 依赖于第 <code>k</code> 步的 <code>Recv</code> 得到的数据块. 因此 <code>Send</code> 可以是非阻塞的, 但 <code>Recv</code> 必须是阻塞的, 以确保在第 <code>k + 1</code> 步 <code>Send</code> 前, 第 <code>k</code> 步 <code>Recv</code> 已完成.</p><p>第二阶段共 <code>comm_sz - 1</code> 步. 在第 <code>k</code> 步, 第 <code>my_rank</code> 个进程会将自己的第 <code>(my_rank + 1 - k) % comm_sz</code> 对应数据块发送给第 <code>succ = my_rand + 1</code> 个进程. 与第一阶段同理, <code>Send</code> 可以是非阻塞的, 但 <code>Recv</code> 必须是阻塞的, 以确保在第 <code>k + 1</code> 步 <code>Send</code> 前, 第 <code>k</code> 步 <code>Recv</code> 已完成.</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">Ring_Allreduce</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> sendbuf<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> recvbuf<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> MPI_Comm comm<span class="token punctuation">,</span>
                    <span class="token keyword">int</span> comm_sz<span class="token punctuation">,</span> <span class="token keyword">int</span> my_rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> count <span class="token operator">=</span> n <span class="token operator">/</span> comm_sz<span class="token punctuation">;</span>
  <span class="token keyword">int</span> succ <span class="token operator">=</span> <span class="token punctuation">(</span>my_rank <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> comm_sz<span class="token punctuation">;</span>
  <span class="token keyword">int</span> pred <span class="token operator">=</span> <span class="token punctuation">(</span>my_rank <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> comm_sz<span class="token punctuation">)</span> <span class="token operator">%</span> comm_sz<span class="token punctuation">;</span>
  <span class="token keyword">float</span><span class="token operator">*</span> send_buf_begin <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>sendbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span><span class="token operator">*</span> recv_buf_begin <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>recvbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memcpy</span><span class="token punctuation">(</span>recv_buf_begin<span class="token punctuation">,</span> send_buf_begin<span class="token punctuation">,</span> n <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  MPI_Request req<span class="token punctuation">[</span>comm_sz <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> comm_sz <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">MPI_Isend</span><span class="token punctuation">(</span>recv_buf_begin <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>my_rank <span class="token operator">-</span> k <span class="token operator">+</span> comm_sz<span class="token punctuation">)</span> <span class="token operator">%</span> comm_sz<span class="token punctuation">)</span> <span class="token operator">*</span> count<span class="token punctuation">)</span><span class="token punctuation">,</span>
              count<span class="token punctuation">,</span> MPI_FLOAT<span class="token punctuation">,</span> succ<span class="token punctuation">,</span> k<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> req <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">float</span><span class="token operator">*</span> begin <span class="token operator">=</span> recv_buf_begin <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pred <span class="token operator">-</span> k <span class="token operator">+</span> comm_sz<span class="token punctuation">)</span> <span class="token operator">%</span> comm_sz<span class="token punctuation">)</span> <span class="token operator">*</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">MPI_Recv</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> count<span class="token punctuation">,</span> MPI_FLOAT<span class="token punctuation">,</span> pred<span class="token punctuation">,</span> k<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span> iter <span class="token operator">=</span> begin<span class="token punctuation">;</span> iter <span class="token operator">&lt;</span> begin <span class="token operator">+</span> count<span class="token punctuation">;</span> <span class="token operator">++</span>iter<span class="token punctuation">)</span>
      <span class="token punctuation">(</span><span class="token operator">*</span>iter<span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token operator">*</span><span class="token punctuation">(</span>send_buf_begin <span class="token operator">+</span> <span class="token punctuation">(</span>iter <span class="token operator">-</span> recv_buf_begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">MPI_Waitall</span><span class="token punctuation">(</span>comm_sz <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> comm_sz <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">MPI_Isend</span><span class="token punctuation">(</span>
        recv_buf_begin <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>my_rank <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> k <span class="token operator">+</span> comm_sz<span class="token punctuation">)</span> <span class="token operator">%</span> comm_sz<span class="token punctuation">)</span> <span class="token operator">*</span> count<span class="token punctuation">)</span><span class="token punctuation">,</span>
        count<span class="token punctuation">,</span> MPI_FLOAT<span class="token punctuation">,</span> succ<span class="token punctuation">,</span> k<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> req <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">MPI_Recv</span><span class="token punctuation">(</span>recv_buf_begin <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>my_rank <span class="token operator">-</span> k <span class="token operator">+</span> comm_sz<span class="token punctuation">)</span> <span class="token operator">%</span> comm_sz<span class="token punctuation">)</span> <span class="token operator">*</span> count<span class="token punctuation">)</span><span class="token punctuation">,</span>
             count<span class="token punctuation">,</span> MPI_FLOAT<span class="token punctuation">,</span> pred<span class="token punctuation">,</span> k<span class="token punctuation">,</span> comm<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">MPI_Waitall</span><span class="token punctuation">(</span>comm_sz <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="通信时间" tabindex="-1"><a class="header-anchor" href="#通信时间"><span>通信时间</span></a></h2><table><thead><tr><th>Method</th><th>Comm_size</th><th>n</th><th>Time</th></tr></thead><tbody><tr><td><code>MPI_Allreduce</code></td><td>4</td><td>100000000</td><td>3195.49 ms</td></tr><tr><td><code>Naive_Allreduce</code></td><td>4</td><td>100000000</td><td>4526.87 ms</td></tr><tr><td><code>Ring_Allreduce</code></td><td>4</td><td>100000000</td><td>1873.94 ms</td></tr></tbody></table>`,7),p=[e];function c(l,u){return s(),a("div",null,p)}const i=n(t,[["render",c],["__file","2022-03-21-exp2-mpi-allreduce.html.vue"]]),k=JSON.parse('{"path":"/2022/course-work/hpc/2022-03-21-exp2-mpi-allreduce.html","title":"exp2: MPI Allreduce","lang":"en-US","frontmatter":{"date":"2022-03-21T00:00:00.000Z","isOriginal":true,"category":["Course Work"],"tag":["Introduction to High Performance Computing","MPI"],"title":"exp2: MPI Allreduce","description":"Ring Allreduce 算法 首先将每个结点的数据分为 comm_sz 个数据块, 每个数据块大小为 count = n / comm_sz 个 float. 第一阶段共 comm_sz - 1 步. 在第 k 步, 第 my_rank 个进程会将自己的第 (my_rank - k) % comm_sz 对应数据块发送给第 succ = my_r...","head":[["meta",{"property":"og:url","content":"https://blog.liblaf.me/2022/course-work/hpc/2022-03-21-exp2-mpi-allreduce.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"exp2: MPI Allreduce"}],["meta",{"property":"og:description","content":"Ring Allreduce 算法 首先将每个结点的数据分为 comm_sz 个数据块, 每个数据块大小为 count = n / comm_sz 个 float. 第一阶段共 comm_sz - 1 步. 在第 k 步, 第 my_rank 个进程会将自己的第 (my_rank - k) % comm_sz 对应数据块发送给第 succ = my_r..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-03T09:57:39.000Z"}],["meta",{"property":"article:author","content":"liblaf"}],["meta",{"property":"article:tag","content":"Introduction to High Performance Computing"}],["meta",{"property":"article:tag","content":"MPI"}],["meta",{"property":"article:published_time","content":"2022-03-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-03T09:57:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"exp2: MPI Allreduce\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-03T09:57:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://liblaf.me\\",\\"email\\":\\"i@liblaf.me\\"}]}"]]},"headers":[{"level":2,"title":"Ring Allreduce 算法","slug":"ring-allreduce-算法","link":"#ring-allreduce-算法","children":[]},{"level":2,"title":"通信时间","slug":"通信时间","link":"#通信时间","children":[]}],"git":{"createdTime":1677217008000,"updatedTime":1709459859000,"contributors":[{"name":"liblaf","email":"30631553+liblaf@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":1.44,"words":432},"filePathRelative":"2022/course-work/hpc/2022-03-21-exp2-mpi-allreduce.md","localizedDate":"March 21, 2022","excerpt":"<h2>Ring Allreduce 算法</h2>\\n<p>首先将每个结点的数据分为 <code>comm_sz</code> 个数据块, 每个数据块大小为 <code>count = n / comm_sz</code> 个 <code>float</code>.</p>\\n<p>第一阶段共 <code>comm_sz - 1</code> 步. 在第 <code>k</code> 步, 第 <code>my_rank</code> 个进程会将自己的第 <code>(my_rank - k) % comm_sz</code> 对应数据块发送给第 <code>succ = my_rank + 1</code> 个进程并累加. 注意到对于 <code>my_rank</code> 进程, 第 <code>k</code> 步的 <code>Send</code> 与 <code>Recv</code> 使用的数据块不同, 但第 <code>k + 1</code> 步的 <code>Send</code> 依赖于第 <code>k</code> 步的 <code>Recv</code> 得到的数据块. 因此 <code>Send</code> 可以是非阻塞的, 但 <code>Recv</code> 必须是阻塞的, 以确保在第 <code>k + 1</code> 步 <code>Send</code> 前, 第 <code>k</code> 步 <code>Recv</code> 已完成.</p>","autoDesc":true}');export{i as comp,k as data};
