import{_ as e,r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-CoV9NwP4.js";const i={},u=p(`<h2 id="performance" tabindex="-1"><a class="header-anchor" href="#performance"><span>Performance</span></a></h2><table><thead><tr><th>Number of Nodes</th><th>Number of Tasks</th><th>Number Count</th><th>v0</th><th>v1</th><th>v2</th><th>v3</th><th>v4</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>100000000</td><td>xxxxxxxxxx6 1void a_plus_b_intrinsic(float* a, float* b, float* c, int n) {2 for (int i = 0; i &lt; n; i += 8) {3 _mm256_store_ps(4 c + i, _mm256_add_ps(_mm256_load_ps(a + i), _mm256_load_ps(b + i)));5 }6}c++</td><td>1.</td><td>1.</td><td>1.</td><td>1.</td></tr><tr><td>1</td><td>2</td><td>100000000</td><td>1.82738226</td><td>1.83557525</td><td>1.8772568</td><td>1.86270894</td><td>1.67925379</td></tr><tr><td>1</td><td>4</td><td>100000000</td><td>3.05696721</td><td>3.17540441</td><td>3.37059297</td><td>3.39672385</td><td>2.3387731</td></tr><tr><td>1</td><td>8</td><td>100000000</td><td>5.15212684</td><td>5.59405831</td><td>6.03427353</td><td>6.15270254</td><td>3.29768106</td></tr><tr><td>1</td><td>16</td><td>100000000</td><td>7.65590815</td><td>8.91877194</td><td>9.65970998</td><td>10.31895407</td><td>4.39598177</td></tr><tr><td>2</td><td>32</td><td>100000000</td><td>10.63745468</td><td>12.91174115</td><td>14.70125847</td><td>15.67950831</td><td>5.01147717</td></tr></tbody></table><h2 id="v0" tabindex="-1"><a class="header-anchor" href="#v0"><span>v0</span></a></h2><p><code>AllReduceBitwiseAnd</code> + Blocking Communication + Naive Merge</p><p>每轮归并后 <code>AllReduce</code> 检查是否已为有序.</p><h3 id="allreducebitwiseand" tabindex="-1"><a class="header-anchor" href="#allreducebitwiseand"><span><code>AllReduceBitwiseAnd</code></span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>0 -&gt; 1 -&gt; ... -&gt; (nprocs - 1) -&gt; 0 # Tag 1
0 -&gt; 1 -&gt; ... -&gt; (nprocs - 2) # Tag 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="source-code" tabindex="-1"><a class="header-anchor" href="#source-code"><span>Source Code</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// odd_even_sort.cpp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;worker.h&quot;</span></span>

size_t <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t n<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> nprocs<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rank <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  size_t block_size <span class="token operator">=</span> <span class="token function">ceiling</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> nprocs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t IO_offset <span class="token operator">=</span> block_size <span class="token operator">*</span> rank<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> out_of_range <span class="token operator">=</span> IO_offset <span class="token operator">&gt;=</span> n<span class="token punctuation">;</span>
  <span class="token keyword">return</span> out_of_range <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>block_size<span class="token punctuation">,</span> n <span class="token operator">-</span> IO_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">AllReduceBitwiseAnd</span><span class="token punctuation">(</span><span class="token keyword">int</span> sendbuf<span class="token punctuation">,</span> MPI_Comm comm<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> nprocs<span class="token punctuation">,</span>
                        <span class="token keyword">const</span> <span class="token keyword">int</span> current_rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>nprocs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> sendbuf<span class="token punctuation">;</span>
  <span class="token keyword">int</span> succ_rank <span class="token operator">=</span> <span class="token punctuation">(</span>current_rank <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> nprocs<span class="token punctuation">;</span>
  <span class="token keyword">int</span> pred_rank <span class="token operator">=</span> <span class="token punctuation">(</span>current_rank <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> nprocs<span class="token punctuation">)</span> <span class="token operator">%</span> nprocs<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>current_rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span><span class="token operator">&amp;</span>sendbuf<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*datatype=*/</span>MPI_INT<span class="token punctuation">,</span>
             <span class="token comment">/*dest=*/</span>succ_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>comm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">MPI_Recv</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span><span class="token operator">&amp;</span>sendbuf<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*datatype=*/</span>MPI_INT<span class="token punctuation">,</span>
             <span class="token comment">/*source=*/</span>pred_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>comm<span class="token punctuation">,</span>
             <span class="token comment">/*status=*/</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>succ_rank <span class="token operator">!=</span> nprocs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span><span class="token operator">&amp;</span>sendbuf<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*datatype=*/</span>MPI_INT<span class="token punctuation">,</span>
               <span class="token comment">/*dest=*/</span>succ_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>comm<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">bool</span> recvbuf<span class="token punctuation">;</span>
    <span class="token function">MPI_Recv</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span><span class="token operator">&amp;</span>recvbuf<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*datatype=*/</span>MPI_INT<span class="token punctuation">,</span>
             <span class="token comment">/*source=*/</span>pred_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>comm<span class="token punctuation">,</span>
             <span class="token comment">/*status=*/</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sendbuf <span class="token operator">&amp;=</span> recvbuf<span class="token punctuation">;</span>
    <span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span><span class="token operator">&amp;</span>sendbuf<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*datatype=*/</span>MPI_INT<span class="token punctuation">,</span>
             <span class="token comment">/*dest=*/</span>succ_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>comm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current_rank <span class="token operator">!=</span> nprocs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">MPI_Recv</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span><span class="token operator">&amp;</span>sendbuf<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*datatype=*/</span>MPI_INT<span class="token punctuation">,</span>
               <span class="token comment">/*source=*/</span>pred_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>comm<span class="token punctuation">,</span>
               <span class="token comment">/*status=*/</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>succ_rank <span class="token operator">!=</span> nprocs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">MPI_Send</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span><span class="token operator">&amp;</span>sendbuf<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*datatype=*/</span>MPI_INT<span class="token punctuation">,</span>
                 <span class="token comment">/*dest=*/</span>succ_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>comm<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> sendbuf<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">Worker</span><span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>out_of_range<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data <span class="token operator">+</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> left_rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t left_block_len <span class="token operator">=</span> <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> left_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> right_rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t right_block_len <span class="token operator">=</span> <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> right_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span><span class="token operator">*</span> neighbor_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span>std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>left_block_len<span class="token punctuation">,</span> right_block_len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span><span class="token operator">*</span> merged_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">bool</span> sorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// even stage</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">AllReduceBitwiseAnd</span><span class="token punctuation">(</span>sorted<span class="token punctuation">,</span> MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>rank<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      sorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> neighbor_rank <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    size_t neighbor_block_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      neighbor_rank <span class="token operator">=</span> right_rank<span class="token punctuation">;</span>
      neighbor_block_len <span class="token operator">=</span> right_block_len<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      neighbor_rank <span class="token operator">=</span> left_rank<span class="token punctuation">;</span>
      neighbor_block_len <span class="token operator">=</span> left_block_len<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// no neighbor</span>
      sorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    MPI_Status status<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_rank <span class="token operator">==</span> left_rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>neighbor_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*recvbuf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*source=*/</span>neighbor_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// no need to merge</span>
        sorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">// neighbor_rank == right_rank</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>neighbor_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*recvbuf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*source=*/</span>neighbor_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> neighbor_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// no need to merge</span>
        sorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token comment">/*sendcount=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">,</span>
                 <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>neighbor_rank<span class="token punctuation">,</span> <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span>
                 <span class="token comment">/*recvbuf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*recvcount=*/</span>neighbor_block_len<span class="token punctuation">,</span>
                 <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*source=*/</span>neighbor_rank<span class="token punctuation">,</span>
                 <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    size_t skip_count <span class="token operator">=</span> <span class="token punctuation">(</span>neighbor_rank <span class="token operator">==</span> left_rank<span class="token punctuation">)</span> <span class="token operator">?</span> neighbor_block_len <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> neighbor_block_len <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> skip_count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">++</span>j<span class="token punctuation">;</span>
        <span class="token operator">++</span>l<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token operator">++</span>k<span class="token punctuation">;</span>
        <span class="token operator">++</span>l<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> neighbor_block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> skip_count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">++</span>j<span class="token punctuation">;</span>
      <span class="token operator">++</span>l<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> skip_count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">++</span>k<span class="token punctuation">;</span>
      <span class="token operator">++</span>l<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> neighbor_block_len <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span>
           l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> neighbor_block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
      merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
      merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> merged_data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> neighbor_data<span class="token punctuation">;</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> merged_data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="performance-1" tabindex="-1"><a class="header-anchor" href="#performance-1"><span>Performance</span></a></h3><table><thead><tr><th>Number of Nodes</th><th>Number of Tasks</th><th>Number Count</th><th>Execution Time</th><th>Speedup</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>100000000</td><td>12526.773000 ms</td><td>1.</td></tr><tr><td>1</td><td>2</td><td>100000000</td><td>6855.037000 ms</td><td>1.82738226</td></tr><tr><td>1</td><td>4</td><td>100000000</td><td>4097.778000 ms</td><td>3.05696721</td></tr><tr><td>1</td><td>8</td><td>100000000</td><td>2431.379000 ms</td><td>5.15212684</td></tr><tr><td>1</td><td>16</td><td>100000000</td><td>1636.223000 ms</td><td>7.65590815</td></tr><tr><td>2</td><td>32</td><td>100000000</td><td>1177.610000 ms</td><td>10.63745468</td></tr></tbody></table><h2 id="v1" tabindex="-1"><a class="header-anchor" href="#v1"><span>v1</span></a></h2><p>Loop <code>nprocs</code> times + Blocking Communication + Naive Merge</p><p>节约 <code>AllReduce</code> 的时间, 进行 <code>nprocs</code> 轮排序.</p><h3 id="proof-of-correctness" tabindex="-1"><a class="header-anchor" href="#proof-of-correctness"><span>Proof of Correctness</span></a></h3>`,15),r={href:"https://en.wikipedia.org/wiki/Odd%E2%80%93even_sort#Proof_of_correctness",target:"_blank",rel:"noopener noreferrer"},k=n("h4",{id:"claim",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#claim"},[n("span",null,"Claim")])],-1),d=n("p",null,[s("Let "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"a"),n("mn",null,"1")]),n("mo",{separator:"true"},","),n("mo",null,"⋯"),n("mtext",null," "),n("mo",{separator:"true"},","),n("msub",null,[n("mi",null,"a"),n("mi",null,"n")])]),n("annotation",{encoding:"application/x-tex"},"a_1, \\cdots, a_n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"a"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3011em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"1")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"minner"},"⋯"),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"a"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.1514em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"n")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])])])])]),s(" be a sequence of data ordered by "),n("code",null,"<"),s(". The odd-even sort algorithm correctly sorts this data in "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"n")])])]),s(" passes. (A pass here is defined to be a full sequence of odd-even, or even-odd comparisons. The passes occur in order pass 1: odd–even, pass 2: even–odd, etc.)")],-1),m=p('<h4 id="proof" tabindex="-1"><a class="header-anchor" href="#proof"><span>Proof</span></a></h4><p>This proof is based loosely on one by Thomas Worsch.<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p>',2),v=n("p",null,[s("Since the sorting algorithm only involves comparison-swap operations and is oblivious (the order of comparison-swap operations does not depend on the data), by Knuth’s 0-1 sorting principle,"),n("sup",{class:"footnote-ref"},[n("a",{href:"#footnote2"},"[2]"),n("a",{class:"footnote-anchor",id:"footnote-ref2"})]),n("sup",{class:"footnote-ref"},[n("a",{href:"#footnote3"},"[3]"),n("a",{class:"footnote-anchor",id:"footnote-ref3"})]),s(" it suffices to check correctness when each "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"a"),n("mi",null,"i")])]),n("annotation",{encoding:"application/x-tex"},"a_i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"a"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.3117em"}},[n("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"i")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])])])])]),s(" is either 0 or 1. Assume that there are "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"e")]),n("annotation",{encoding:"application/x-tex"},"e")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"e")])])]),s(" 1s.")],-1),b=n("p",null,[s("Observe that the rightmost 1 can be either in an even or odd position, so it might not be moved by the first odd-even pass. But after the first odd-even pass, the rightmost 1 will be in an even position. It follows that it will be moved to the right by all remaining passes. Since the rightmost one starts in position greater than or equal to "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"e")]),n("annotation",{encoding:"application/x-tex"},"e")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"e")])])]),s(", it must be moved at most "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n"),n("mo",null,"−"),n("mi",null,"e")]),n("annotation",{encoding:"application/x-tex"},"n - e")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"e")])])]),s(" steps. It follows that it takes at most "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n"),n("mo",null,"−"),n("mi",null,"e"),n("mo",null,"+"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"n - e + 1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),s(" passes to move the rightmost 1 to its correct position.")],-1),h=n("p",null,[s("Now, consider the second rightmost 1. After two passes, the 1 to its right will have moved right by at least one step. It follows that, for all remaining passes, we can view the second rightmost 1 as the rightmost 1. The second rightmost 1 starts in position at least "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"e"),n("mo",null,"−"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"e - 1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),s(" and must be moved to position at most "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n"),n("mo",null,"−"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"n - 1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),s(", so it must be moved at most "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",null,"−"),n("mn",null,"1"),n("mo",{stretchy:"false"},")"),n("mo",null,"−"),n("mo",{stretchy:"false"},"("),n("mi",null,"e"),n("mo",null,"−"),n("mn",null,"1"),n("mo",{stretchy:"false"},")"),n("mo",null,"="),n("mi",null,"n"),n("mo",null,"−"),n("mi",null,"e")]),n("annotation",{encoding:"application/x-tex"},"(n - 1) - (e - 1) = n - e")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"e")])])]),s(" steps. After at most 2 passes, the rightmost 1 will have already moved, so the entry to the right of the second rightmost 1 will be 0. Hence, for all passes after the first two, the second rightmost 1 will move to the right. It thus takes at most "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n"),n("mo",null,"−"),n("mi",null,"e"),n("mo",null,"+"),n("mn",null,"2")]),n("annotation",{encoding:"application/x-tex"},"n - e + 2")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"2")])])]),s(" passes to move the second rightmost 1 to its correct position.")],-1),g=n("p",null,[s("Continuing in this manner, by induction it can be shown that the "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"i")]),n("annotation",{encoding:"application/x-tex"},"i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6595em"}}),n("span",{class:"mord mathnormal"},"i")])])]),s("-th rightmost 1 is moved to its correct position in at most "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n"),n("mo",null,"−"),n("mi",null,"e"),n("mo",null,"+"),n("mi",null,"i")]),n("annotation",{encoding:"application/x-tex"},"n - e + i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6595em"}}),n("span",{class:"mord mathnormal"},"i")])])]),s(" passes. Since "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"i"),n("mo",null,"⩽"),n("mi",null,"e")]),n("annotation",{encoding:"application/x-tex"},"i \\leqslant e")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7962em","vertical-align":"-0.1367em"}}),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel amsrm"},"⩽"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"e")])])]),s(", it follows that the "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"i")]),n("annotation",{encoding:"application/x-tex"},"i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6595em"}}),n("span",{class:"mord mathnormal"},"i")])])]),s("-th rightmost 1 is moved to its correct position in at most "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n"),n("mo",null,"−"),n("mi",null,"e"),n("mo",null,"+"),n("mi",null,"e"),n("mo",null,"="),n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"n - e + e = n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"n")])])]),s(" passes. The list is thus correctly sorted in "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"n")])])]),s(" passes. QED.")],-1),y=n("p",null,[s("We remark that each pass takes "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s(" steps, so this algorithm has "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])]),n("span",{class:"mclose"},")")])])]),s(" complexity.")],-1),_=p(`<h3 id="source-code-1" tabindex="-1"><a class="header-anchor" href="#source-code-1"><span>Source Code</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// odd_even_sort.cpp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;worker.h&quot;</span></span>

size_t <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t n<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> nprocs<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rank <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  size_t block_size <span class="token operator">=</span> <span class="token function">ceiling</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> nprocs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t IO_offset <span class="token operator">=</span> block_size <span class="token operator">*</span> rank<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> out_of_range <span class="token operator">=</span> IO_offset <span class="token operator">&gt;=</span> n<span class="token punctuation">;</span>
  <span class="token keyword">return</span> out_of_range <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>block_size<span class="token punctuation">,</span> n <span class="token operator">-</span> IO_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">Worker</span><span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>out_of_range<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data <span class="token operator">+</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> left_rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t left_block_len <span class="token operator">=</span> <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> left_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> right_rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t right_block_len <span class="token operator">=</span> <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> right_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span><span class="token operator">*</span> neighbor_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span>std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>left_block_len<span class="token punctuation">,</span> right_block_len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span><span class="token operator">*</span> merged_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nprocs<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> neighbor_rank <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    size_t neighbor_block_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      neighbor_rank <span class="token operator">=</span> right_rank<span class="token punctuation">;</span>
      neighbor_block_len <span class="token operator">=</span> right_block_len<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      neighbor_rank <span class="token operator">=</span> left_rank<span class="token punctuation">;</span>
      neighbor_block_len <span class="token operator">=</span> left_block_len<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token comment">// no neighbor</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    MPI_Status status<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_rank <span class="token operator">==</span> left_rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>neighbor_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*recvbuf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*source=*/</span>neighbor_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment">// no need to merge</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">// neighbor_rank == right_rank</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>neighbor_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*recvbuf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*source=*/</span>neighbor_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> neighbor_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment">// no need to merge</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token comment">/*sendcount=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">,</span>
                 <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>neighbor_rank<span class="token punctuation">,</span> <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span>
                 <span class="token comment">/*recvbuf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*recvcount=*/</span>neighbor_block_len<span class="token punctuation">,</span>
                 <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*source=*/</span>neighbor_rank<span class="token punctuation">,</span>
                 <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    size_t skip_count <span class="token operator">=</span> <span class="token punctuation">(</span>neighbor_rank <span class="token operator">==</span> left_rank<span class="token punctuation">)</span> <span class="token operator">?</span> neighbor_block_len <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> neighbor_block_len <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> skip_count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">++</span>j<span class="token punctuation">;</span>
        <span class="token operator">++</span>l<span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token operator">++</span>k<span class="token punctuation">;</span>
        <span class="token operator">++</span>l<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> neighbor_block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> skip_count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">++</span>j<span class="token punctuation">;</span>
      <span class="token operator">++</span>l<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> skip_count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">++</span>k<span class="token punctuation">;</span>
      <span class="token operator">++</span>l<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> neighbor_block_len <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span>
           l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> neighbor_block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
      merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
      merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> merged_data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> neighbor_data<span class="token punctuation">;</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> merged_data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="performance-2" tabindex="-1"><a class="header-anchor" href="#performance-2"><span>Performance</span></a></h3><table><thead><tr><th>Number of Nodes</th><th>Number of Tasks</th><th>Number Count</th><th>Execution Time</th><th>Speedup</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>100000000</td><td>12511.503000 ms</td><td>1.</td></tr><tr><td>1</td><td>2</td><td>100000000</td><td>6816.121000 ms</td><td>1.83557525</td></tr><tr><td>1</td><td>4</td><td>100000000</td><td>3940.129000 ms</td><td>3.17540441</td></tr><tr><td>1</td><td>8</td><td>100000000</td><td>2236.570000 ms</td><td>5.59405831</td></tr><tr><td>1</td><td>16</td><td>100000000</td><td>1402.828000 ms</td><td>8.91877194</td></tr><tr><td>2</td><td>16</td><td>100000000</td><td>969.002000 ms</td><td>12.91174115</td></tr></tbody></table><h2 id="v2" tabindex="-1"><a class="header-anchor" href="#v2"><span>v2</span></a></h2><p>Loop <code>nprocs</code> times + Blocking Communication + Optimized Merge</p><h3 id="optimized-merge" tabindex="-1"><a class="header-anchor" href="#optimized-merge"><span>Optimized Merge</span></a></h3><p>左侧 Worker 从左向右 Merge, 右侧 Worker 从右向左 Merge.</p><h3 id="source-code-2" tabindex="-1"><a class="header-anchor" href="#source-code-2"><span>Source Code</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// odd_even_sort.cpp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;worker.h&quot;</span></span>

size_t <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t n<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> nprocs<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rank <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  size_t block_size <span class="token operator">=</span> <span class="token function">ceiling</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> nprocs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t IO_offset <span class="token operator">=</span> block_size <span class="token operator">*</span> rank<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> out_of_range <span class="token operator">=</span> IO_offset <span class="token operator">&gt;=</span> n<span class="token punctuation">;</span>
  <span class="token keyword">return</span> out_of_range <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>block_size<span class="token punctuation">,</span> n <span class="token operator">-</span> IO_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">Worker</span><span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data <span class="token operator">+</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> left_rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t left_block_len <span class="token operator">=</span> <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> left_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> right_rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t right_block_len <span class="token operator">=</span> <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> right_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span><span class="token operator">*</span> neighbor_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span>std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>left_block_len<span class="token punctuation">,</span> right_block_len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span><span class="token operator">*</span> merged_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">]</span><span class="token punctuation">;</span>
  MPI_Status status<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nprocs<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>right_block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token comment">// no neighbor</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>right_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*recvbuf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*source=*/</span>right_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> neighbor_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment">// no need to merge</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token comment">/*sendcount=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>right_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span>
                   <span class="token comment">/*recvbuf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*recvcount=*/</span>right_block_len<span class="token punctuation">,</span>
                   <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*source=*/</span>right_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
      size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> right_block_len <span class="token operator">&amp;&amp;</span>
             l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> neighbor_data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
        merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> right_block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
        merged_data<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>left_block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token comment">// no neighbor</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span>
                   <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>left_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*recvbuf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*source=*/</span>left_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment">// no need to merge</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token comment">/*sendcount=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>left_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span>
                   <span class="token comment">/*recvbuf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*recvcount=*/</span>left_block_len<span class="token punctuation">,</span>
                   <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*source=*/</span>left_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span><span class="token operator">&amp;</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> j <span class="token operator">=</span> left_block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
          l <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          merged_data<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          merged_data<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> merged_data<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> merged_data<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> merged_data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> neighbor_data<span class="token punctuation">;</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> merged_data<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="performace" tabindex="-1"><a class="header-anchor" href="#performace"><span>Performace</span></a></h3><table><thead><tr><th>Number of Nodes</th><th>Number of Tasks</th><th>Number Count</th><th>Execution Time</th><th>Speedup</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>100000000</td><td>12513.623000 ms</td><td>1.</td></tr><tr><td>1</td><td>2</td><td>100000000</td><td>6665.909000 ms</td><td>1.8772568</td></tr><tr><td>1</td><td>4</td><td>100000000</td><td>3712.588000 ms</td><td>3.37059297</td></tr><tr><td>1</td><td>8</td><td>100000000</td><td>2073.758000 ms</td><td>6.03427353</td></tr><tr><td>1</td><td>16</td><td>100000000</td><td>1295.445000 ms</td><td>9.65970998</td></tr><tr><td>2</td><td>32</td><td>100000000</td><td>851.194000 ms</td><td>14.70125847</td></tr></tbody></table><h2 id="v3" tabindex="-1"><a class="header-anchor" href="#v3"><span>v3</span></a></h2><p>Loop <code>nprocs</code> times + Non-Blocking Communication + Optimized Merge + Lazy Copy</p><h3 id="lazy-copy" tabindex="-1"><a class="header-anchor" href="#lazy-copy"><span>Lazy Copy</span></a></h3><p>不必每次 Merge 后都将 Merge 的结果拷贝到原 <code>data</code> 中, 而是可以使用两个数组交替作为 “旧数据” 和 “新数据”, 只需交换指针即可.</p><h3 id="source-code-3" tabindex="-1"><a class="header-anchor" href="#source-code-3"><span>Source Code</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// odd_even_sort.cpp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;worker.h&quot;</span></span>

size_t <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t n<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> nprocs<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rank <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  size_t block_size <span class="token operator">=</span> <span class="token function">ceiling</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> nprocs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t IO_offset <span class="token operator">=</span> block_size <span class="token operator">*</span> rank<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> out_of_range <span class="token operator">=</span> IO_offset <span class="token operator">&gt;=</span> n<span class="token punctuation">;</span>
  <span class="token keyword">return</span> out_of_range <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>block_size<span class="token punctuation">,</span> n <span class="token operator">-</span> IO_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">Worker</span><span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data <span class="token operator">+</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> left_rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t left_block_len <span class="token operator">=</span> <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> left_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> right_rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t right_block_len <span class="token operator">=</span> <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> right_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span><span class="token operator">*</span> neighbor_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span>std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>left_block_len<span class="token punctuation">,</span> right_block_len<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">float</span><span class="token operator">*</span> data_copy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">]</span><span class="token punctuation">;</span>
  MPI_Request requests<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nprocs<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>right_block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token comment">// no neighbor</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>right_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*recvbuf=*/</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span>
                   <span class="token comment">/*source=*/</span>right_rank<span class="token punctuation">,</span> <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span>
                   <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span>MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> neighbor_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// no need to merge</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token function">MPI_Isend</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">,</span>
                <span class="token comment">/*datatype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>right_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span>i<span class="token punctuation">,</span>
                <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*request=*/</span><span class="token operator">&amp;</span>requests<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Irecv</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span>right_block_len<span class="token punctuation">,</span>
                <span class="token comment">/*datatype=*/</span>MPI_FLOAT<span class="token punctuation">,</span>
                <span class="token comment">/*source=*/</span>right_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span>
                <span class="token comment">/*request=*/</span><span class="token operator">&amp;</span>requests<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Wait</span><span class="token punctuation">(</span><span class="token comment">/*request=*/</span><span class="token operator">&amp;</span>requests<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">/*status=*/</span>MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> right_block_len <span class="token operator">&amp;&amp;</span>
             l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> neighbor_data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          data_copy<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          data_copy<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
        data_copy<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> right_block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
        data_copy<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>left_block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token comment">// no neighbor</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*sendtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>left_rank<span class="token punctuation">,</span>
                   <span class="token comment">/*sendtag=*/</span>i<span class="token punctuation">,</span>
                   <span class="token comment">/*recvbuf=*/</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span>left_block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*recvtype=*/</span>MPI_FLOAT<span class="token punctuation">,</span>
                   <span class="token comment">/*source=*/</span>left_rank<span class="token punctuation">,</span> <span class="token comment">/*recvtag=*/</span>i<span class="token punctuation">,</span>
                   <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span>MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span>left_block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment">// no need to merge</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Isend</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">,</span>
                <span class="token comment">/*datatype=*/</span>MPI_FLOAT<span class="token punctuation">,</span> <span class="token comment">/*dest=*/</span>left_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span>i<span class="token punctuation">,</span>
                <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*request=*/</span><span class="token operator">&amp;</span>requests<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Irecv</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span>neighbor_data<span class="token punctuation">,</span> <span class="token comment">/*count=*/</span>left_block_len<span class="token punctuation">,</span>
                <span class="token comment">/*datatype=*/</span>MPI_FLOAT<span class="token punctuation">,</span>
                <span class="token comment">/*source=*/</span>left_rank<span class="token punctuation">,</span> <span class="token comment">/*tag=*/</span>i<span class="token punctuation">,</span> <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span>
                <span class="token comment">/*request=*/</span><span class="token operator">&amp;</span>requests<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> j <span class="token operator">=</span> left_block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
          l <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token function">MPI_Wait</span><span class="token punctuation">(</span><span class="token comment">/*request=*/</span><span class="token operator">&amp;</span>requests<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">/*status=*/</span>MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>neighbor_data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          data_copy<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          data_copy<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> data_copy<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> neighbor_data<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> data_copy<span class="token punctuation">[</span>l<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">MPI_Wait</span><span class="token punctuation">(</span><span class="token comment">/*request=*/</span><span class="token operator">&amp;</span>requests<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">/*status=*/</span>MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> data_copy<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> neighbor_data<span class="token punctuation">;</span>
  <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data_copy<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="performance-3" tabindex="-1"><a class="header-anchor" href="#performance-3"><span>Performance</span></a></h3><table><thead><tr><th>Number of Nodes</th><th>Number of Tasks</th><th>Number Count</th><th>Execution Time</th><th>Speedup</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>100000000</td><td>12509.441000 ms</td><td>1.</td></tr><tr><td>1</td><td>2</td><td>100000000</td><td>6715.725000 ms</td><td>1.86270894</td></tr><tr><td>1</td><td>4</td><td>100000000</td><td>3682.796000 ms</td><td>3.39672385</td></tr><tr><td>1</td><td>8</td><td>100000000</td><td>2033.162000 ms</td><td>6.15270254</td></tr><tr><td>1</td><td>16</td><td>100000000</td><td>1212.278000 ms</td><td>10.31895407</td></tr><tr><td>2</td><td>32</td><td>100000000</td><td>797.821000 ms</td><td>15.67950831</td></tr></tbody></table><h2 id="v4" tabindex="-1"><a class="header-anchor" href="#v4"><span>v4</span></a></h2><p>采用类似 Buffered Stream 方式边计算边发送, 即每计算 <code>chunk_size</code> 个 <code>float</code> 后就进行一次 <code>Isend</code>, 使得通信能够尽可能与计算重叠. 其中, <code>send_right_buffer</code> 和 <code>recv_left_buffer</code> 采取逆向存储, 以符合逆向归并的读写顺序. 为了尽可能缩短阻塞通信的时长, 仅在将要使用某一个 buffer 时才对该 buffer 进行 <code>Waitall</code> 确保上一轮通信已完成.</p><h3 id="bandwidth" tabindex="-1"><a class="header-anchor" href="#bandwidth"><span>Bandwidth</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ srun <span class="token parameter variable">-N</span> <span class="token number">1</span> <span class="token parameter variable">-n</span> <span class="token number">2</span> osu_bw
<span class="token comment"># OSU MPI Bandwidth Test v5.6.3</span>
<span class="token comment"># Size      Bandwidth (MB/s)</span>
<span class="token number">1</span>                       <span class="token number">9.47</span>
<span class="token number">2</span>                      <span class="token number">18.54</span>
<span class="token number">4</span>                      <span class="token number">38.20</span>
<span class="token number">8</span>                      <span class="token number">76.28</span>
<span class="token number">16</span>                    <span class="token number">152.38</span>
<span class="token number">32</span>                    <span class="token number">286.08</span>
<span class="token number">64</span>                    <span class="token number">598.25</span>
<span class="token number">128</span>                   <span class="token number">382.26</span>
<span class="token number">256</span>                   <span class="token number">764.46</span>
<span class="token number">512</span>                  <span class="token number">1518.65</span>
<span class="token number">1024</span>                 <span class="token number">2471.40</span>
<span class="token number">2048</span>                 <span class="token number">3541.91</span>
<span class="token number">4096</span>                 <span class="token number">4986.57</span>
<span class="token number">8192</span>                 <span class="token number">6506.46</span>
<span class="token number">16384</span>                <span class="token number">5481.32</span>
<span class="token number">32768</span>                <span class="token number">7418.92</span>
<span class="token number">65536</span>               <span class="token number">10191.21</span>
<span class="token number">131072</span>              <span class="token number">12052.71</span>
<span class="token number">262144</span>              <span class="token number">12183.31</span>
<span class="token number">524288</span>              <span class="token number">11554.38</span>
<span class="token number">1048576</span>             <span class="token number">11871.98</span>
<span class="token number">2097152</span>             <span class="token number">12109.49</span>
<span class="token number">4194304</span>             <span class="token number">12458.68</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>选取 <code>131072</code> 作为 <code>chunk_size</code>.</p><h3 id="source-code-4" tabindex="-1"><a class="header-anchor" href="#source-code-4"><span>Source Code</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// odd_even_sort.cpp</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;worker.h&quot;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
<span class="token comment">// void PrintData(const float* data, const int count) {</span>
<span class="token comment">//   for (int i = 0; i &lt; count; ++i) printf(&quot;%f, &quot;, data[i]);</span>
<span class="token comment">// }</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">=</span> <span class="token keyword">float</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">MPIStream</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">MPIStream</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_Datatype datatype <span class="token operator">=</span> MPI_FLOAT<span class="token punctuation">,</span>
            MPI_Comm comm <span class="token operator">=</span> MPI_COMM_WORLD<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token function">datatype_</span><span class="token punctuation">(</span>datatype<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">comm_</span><span class="token punctuation">(</span>comm<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">target_</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>chunk_count_ <span class="token operator">=</span> <span class="token function">CalcChunkCount</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>data_ <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>chunk_count_ <span class="token operator">&lt;&lt;</span> kLogChunkSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>requests_ <span class="token operator">=</span> <span class="token keyword">new</span> MPI_Request<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>chunk_count_<span class="token punctuation">]</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>requests_<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>requests_ <span class="token operator">+</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>chunk_count_<span class="token punctuation">,</span>
              MPI_REQUEST_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token operator">~</span><span class="token function">MPIStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data_<span class="token punctuation">;</span>
    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>requests_<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">virtual</span> T <span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data_<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token keyword">virtual</span> T <span class="token function">ReverseGet</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>size_ <span class="token operator">-</span> pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Put</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> value<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>data_<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">ReversePut</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> value<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">Put</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>size_ <span class="token operator">-</span> pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  T<span class="token operator">*</span> <span class="token function">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data_<span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">Connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>target_ <span class="token operator">=</span> target<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>size_ <span class="token operator">=</span> size<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>chunk_count_ <span class="token operator">=</span> <span class="token function">CalcChunkCount</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">CancelAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>chunk_count_<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
      <span class="token function">MPI_Cancel</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>requests_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">int</span> <span class="token function">Waitall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">MPI_Waitall</span><span class="token punctuation">(</span>
        <span class="token comment">/*count=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>chunk_count_<span class="token punctuation">,</span>
        <span class="token comment">/*array_of_requests=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>requests_<span class="token punctuation">,</span>
        <span class="token comment">/*array_of_statuses=*/</span>MPI_STATUSES_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
 <span class="token keyword">public</span><span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
 <span class="token keyword">protected</span><span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">CalcChunkCount</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">+</span> kChunkSizeMask<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> kLogChunkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> kLogChunkSize <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> kChunkSize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> kLogChunkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> kChunkSizeMask <span class="token operator">=</span> <span class="token punctuation">(</span>kChunkSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
 <span class="token keyword">public</span><span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
 <span class="token keyword">protected</span><span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  T<span class="token operator">*</span> data_<span class="token punctuation">;</span>
  MPI_Datatype datatype_<span class="token punctuation">;</span>
  MPI_Comm comm_<span class="token punctuation">;</span>
  MPI_Request<span class="token operator">*</span> requests_<span class="token punctuation">;</span>
  <span class="token keyword">int</span> size_<span class="token punctuation">,</span> chunk_count_<span class="token punctuation">;</span>
  <span class="token keyword">int</span> target_<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">=</span> <span class="token keyword">float</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">MPIInStream</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">MPIStream</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">MPIInStream</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_Datatype datatype <span class="token operator">=</span> MPI_FLOAT<span class="token punctuation">,</span>
              MPI_Comm comm <span class="token operator">=</span> MPI_COMM_WORLD<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token generic-function"><span class="token function">MPIStream</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> datatype<span class="token punctuation">,</span> comm<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">virtual</span> T <span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>target_ <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data_<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> chunk_id <span class="token operator">=</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;&gt;</span> kLogChunkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">MPI_Wait</span><span class="token punctuation">(</span><span class="token comment">/*request=*/</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>requests_<span class="token punctuation">[</span>chunk_id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
             <span class="token comment">/*status=*/</span>MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data_<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">Irecv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>target_ <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>chunk_count_<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
      <span class="token comment">// int rank;</span>
      <span class="token comment">// MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank);</span>
      <span class="token comment">// printf(</span>
      <span class="token comment">//     &quot;Irecv rank = %d, buf_pos = %d, count = %d, source = %d, tag =</span>
      <span class="token comment">//     %d\\n&quot;, rank, i &lt;&lt; kLogChunkSize, kChunkSize, this-&gt;target_, i);</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
      <span class="token function">MPI_Irecv</span><span class="token punctuation">(</span><span class="token comment">/*buf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data_ <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> kLogChunkSize<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token comment">/*count=*/</span>kChunkSize<span class="token punctuation">,</span>
                <span class="token comment">/*datatype=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>datatype_<span class="token punctuation">,</span>
                <span class="token comment">/*source=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>target_<span class="token punctuation">,</span>
                <span class="token comment">/*tag=*/</span>i<span class="token punctuation">,</span>
                <span class="token comment">/*comm=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>comm_<span class="token punctuation">,</span>
                <span class="token comment">/*request=*/</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>requests_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">ConnectSource</span><span class="token punctuation">(</span><span class="token keyword">int</span> source<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token comment">/*target=*/</span>source<span class="token punctuation">,</span> <span class="token comment">/*size=*/</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
 <span class="token keyword">public</span><span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
 <span class="token keyword">protected</span><span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  <span class="token keyword">using</span> MPIStream<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>kLogChunkSize<span class="token punctuation">;</span>
  <span class="token keyword">using</span> MPIStream<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>kChunkSize<span class="token punctuation">;</span>
  <span class="token keyword">using</span> MPIStream<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>kChunkSizeMask<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token operator">=</span> <span class="token keyword">float</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">MPIOutStream</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">MPIStream</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">MPIOutStream</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> MPI_Datatype datatype <span class="token operator">=</span> MPI_FLOAT<span class="token punctuation">,</span>
               MPI_Comm comm <span class="token operator">=</span> MPI_COMM_WORLD<span class="token punctuation">)</span>
      <span class="token operator">:</span> <span class="token generic-function"><span class="token function">MPIStream</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> datatype<span class="token punctuation">,</span> comm<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">Load</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">*</span> buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data_<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> count <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data_<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data_ <span class="token operator">+</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>size_<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">Isend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>target_ <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>chunk_count_<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
      <span class="token comment">// int rank;</span>
      <span class="token comment">// MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank);</span>
      <span class="token comment">// printf(&quot;Isend rank = %d, buf_pos = %d, count = %d, dest = %d, tag =</span>
      <span class="token comment">// %d\\n&quot;,</span>
      <span class="token comment">//        rank, i &lt;&lt; kLogChunkSize, kChunkSize, this-&gt;target_, i);</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
      <span class="token function">MPI_Isend</span><span class="token punctuation">(</span>
          <span class="token comment">/*buf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data_ <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> kLogChunkSize<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token comment">/*count=*/</span>kChunkSize<span class="token punctuation">,</span>
          <span class="token comment">/*datatype=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>datatype_<span class="token punctuation">,</span>
          <span class="token comment">/*dest=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>target_<span class="token punctuation">,</span>
          <span class="token comment">/*tag=*/</span>i<span class="token punctuation">,</span>
          <span class="token comment">/*comm=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>comm_<span class="token punctuation">,</span>
          <span class="token comment">/*request=*/</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>requests_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Put</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> value<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>target_ <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token class-name">MPIStream</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Put</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span>data_<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> kChunkSizeMask<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>size_ <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> chunk_id <span class="token operator">=</span> <span class="token punctuation">(</span>pos <span class="token operator">&gt;&gt;</span> kLogChunkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
      <span class="token comment">// int rank;</span>
      <span class="token comment">// MPI_Comm_rank(MPI_COMM_WORLD, &amp;rank);</span>
      <span class="token comment">// printf(&quot;Isend rank = %d, buf_pos = %d, count = %d, dest = %d, tag =</span>
      <span class="token comment">// %d\\n&quot;,</span>
      <span class="token comment">//        rank, chunk_id &lt;&lt; kLogChunkSize, kChunkSize, this-&gt;target_,</span>
      <span class="token comment">//        chunk_id);</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
      <span class="token function">MPI_Isend</span><span class="token punctuation">(</span>
          <span class="token comment">/*buf=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data_ <span class="token operator">+</span> <span class="token punctuation">(</span>chunk_id <span class="token operator">&lt;&lt;</span> kLogChunkSize<span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token comment">/*count=*/</span>kChunkSize<span class="token punctuation">,</span>
          <span class="token comment">/*datatype=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>datatype_<span class="token punctuation">,</span>
          <span class="token comment">/*dest=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>target_<span class="token punctuation">,</span>
          <span class="token comment">/*tag=*/</span>chunk_id<span class="token punctuation">,</span>
          <span class="token comment">/*comm=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>comm_<span class="token punctuation">,</span>
          <span class="token comment">/*request=*/</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>requests_<span class="token punctuation">[</span>chunk_id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">ConnectDest</span><span class="token punctuation">(</span><span class="token keyword">int</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token comment">/*target=*/</span>dest<span class="token punctuation">,</span> <span class="token comment">/*size=*/</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
 <span class="token keyword">public</span><span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
 <span class="token keyword">protected</span><span class="token operator">:</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  <span class="token keyword">using</span> MPIStream<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>kLogChunkSize<span class="token punctuation">;</span>
  <span class="token keyword">using</span> MPIStream<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>kChunkSize<span class="token punctuation">;</span>
  <span class="token keyword">using</span> MPIStream<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>kChunkSizeMask<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

size_t <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">const</span> size_t n<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> nprocs<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rank <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  size_t block_size <span class="token operator">=</span> <span class="token function">ceiling</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> nprocs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t IO_offset <span class="token operator">=</span> block_size <span class="token operator">*</span> rank<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> out_of_range <span class="token operator">=</span> IO_offset <span class="token operator">&gt;=</span> n<span class="token punctuation">;</span>
  <span class="token keyword">return</span> out_of_range <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>block_size<span class="token punctuation">,</span> n <span class="token operator">-</span> IO_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token class-name">Worker</span><span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data <span class="token operator">+</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
    <span class="token comment">// printf(&quot;[%d] begin: &quot;, this-&gt;rank);</span>
    <span class="token comment">// for (size_t i = 0; i &lt; this-&gt;block_len; ++i) printf(&quot;%f, &quot;,</span>
    <span class="token comment">// this-&gt;data[i]); printf(&quot;\\n&quot;);</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  <span class="token keyword">int</span> left_rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> right_rank <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  size_t left_block_len <span class="token operator">=</span> <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> left_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>left_block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> left_rank <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  size_t right_block_len <span class="token operator">=</span> <span class="token function">CalcBlockLen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">,</span> right_rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>right_block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> right_rank <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> send_left_buffer <span class="token operator">=</span> <span class="token generic-function"><span class="token function">MPIOutStream</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token comment">/*capacity=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  send_left_buffer<span class="token punctuation">.</span><span class="token function">ConnectDest</span><span class="token punctuation">(</span><span class="token comment">/*dest=*/</span>left_rank<span class="token punctuation">,</span> <span class="token comment">/*size=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  send_left_buffer<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> send_right_buffer <span class="token operator">=</span> <span class="token generic-function"><span class="token function">MPIOutStream</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token comment">/*capacity=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  send_right_buffer<span class="token punctuation">.</span><span class="token function">ConnectDest</span><span class="token punctuation">(</span><span class="token comment">/*dest=*/</span>right_rank<span class="token punctuation">,</span> <span class="token comment">/*size=*/</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  send_right_buffer<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  send_right_buffer<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> recv_left_buffer <span class="token operator">=</span> <span class="token generic-function"><span class="token function">MPIInStream</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token comment">/*capacity=*/</span>left_block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  recv_left_buffer<span class="token punctuation">.</span><span class="token function">ConnectSource</span><span class="token punctuation">(</span><span class="token comment">/*source=*/</span>left_rank<span class="token punctuation">,</span> <span class="token comment">/*size=*/</span>left_block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">auto</span> recv_right_buffer <span class="token operator">=</span> <span class="token generic-function"><span class="token function">MPIInStream</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token comment">/*capacity=*/</span>right_block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  recv_right_buffer<span class="token punctuation">.</span><span class="token function">ConnectSource</span><span class="token punctuation">(</span><span class="token comment">/*source=*/</span>right_rank<span class="token punctuation">,</span>
                                  <span class="token comment">/*size=*/</span>right_block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    send_right_buffer<span class="token punctuation">.</span><span class="token function">Isend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    send_left_buffer<span class="token punctuation">.</span><span class="token function">Isend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// printf(&quot;!!! Rank = %d, i = %d\\n&quot;, this-&gt;rank, i);</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">^</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>rank<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// recv from right, send to left</span>
      send_left_buffer<span class="token punctuation">.</span><span class="token function">Waitall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> send_left_buffer<span class="token punctuation">.</span><span class="token function">ConnectDest</span><span class="token punctuation">(</span><span class="token comment">/*dest=*/</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>right_block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        send_left_buffer<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>send_right_buffer<span class="token punctuation">.</span><span class="token function">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        send_left_buffer<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        send_left_buffer<span class="token punctuation">.</span><span class="token function">Isend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        recv_right_buffer<span class="token punctuation">.</span><span class="token function">Waitall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        recv_right_buffer<span class="token punctuation">.</span><span class="token function">Irecv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> right_block_len <span class="token operator">&amp;&amp;</span>
               l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>send_right_buffer<span class="token punctuation">.</span><span class="token function">ReverseGet</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">&lt;</span> recv_right_buffer<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            send_left_buffer<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>send_right_buffer<span class="token punctuation">.</span><span class="token function">ReverseGet</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            send_left_buffer<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>recv_right_buffer<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
          send_left_buffer<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>send_right_buffer<span class="token punctuation">.</span><span class="token function">ReverseGet</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> right_block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
          send_left_buffer<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>recv_right_buffer<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// recv from left, send to right</span>
      send_right_buffer<span class="token punctuation">.</span><span class="token function">Waitall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> send_right_buffer<span class="token punctuation">.</span><span class="token function">ConnectDest</span><span class="token punctuation">(</span><span class="token comment">/*dest=*/</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>left_block_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        send_right_buffer<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>send_left_buffer<span class="token punctuation">.</span><span class="token function">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        send_right_buffer<span class="token punctuation">.</span><span class="token function">Reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        send_right_buffer<span class="token punctuation">.</span><span class="token function">Isend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        recv_left_buffer<span class="token punctuation">.</span><span class="token function">Waitall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        recv_left_buffer<span class="token punctuation">.</span><span class="token function">Irecv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> left_block_len <span class="token operator">&amp;&amp;</span>
               l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>send_left_buffer<span class="token punctuation">.</span><span class="token function">ReverseGet</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">&gt;</span> recv_left_buffer<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            send_right_buffer<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>send_left_buffer<span class="token punctuation">.</span><span class="token function">ReverseGet</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            send_right_buffer<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>recv_left_buffer<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
          send_right_buffer<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>send_left_buffer<span class="token punctuation">.</span><span class="token function">ReverseGet</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> left_block_len <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span>
          send_right_buffer<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>recv_left_buffer<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rank <span class="token operator">^</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nprocs<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> send_right_buffer<span class="token punctuation">.</span><span class="token function">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>data <span class="token operator">+</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>data<span class="token punctuation">,</span> send_left_buffer<span class="token punctuation">.</span><span class="token function">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">this</span><span class="token operator">-&gt;</span>block_len <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  send_left_buffer<span class="token punctuation">.</span><span class="token function">Waitall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  send_right_buffer<span class="token punctuation">.</span><span class="token function">Waitall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  recv_left_buffer<span class="token punctuation">.</span><span class="token function">Waitall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  recv_right_buffer<span class="token punctuation">.</span><span class="token function">Waitall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span>
  <span class="token comment">// printf(&quot;[%d] end send_left: &quot;, this-&gt;rank);</span>
  <span class="token comment">// PrintData(send_left_buffer.Data(), this-&gt;block_len);</span>
  <span class="token comment">// printf(&quot;\\n&quot;);</span>
  <span class="token comment">// printf(&quot;[%d] end send_right: &quot;, this-&gt;rank);</span>
  <span class="token comment">// PrintData(send_right_buffer.Data(), this-&gt;block_len);</span>
  <span class="token comment">// printf(&quot;\\n&quot;);</span>
  <span class="token comment">// printf(&quot;[%d] end recv_left: &quot;, this-&gt;rank);</span>
  <span class="token comment">// PrintData(recv_left_buffer.Data(), left_block_len);</span>
  <span class="token comment">// printf(&quot;\\n&quot;);</span>
  <span class="token comment">// printf(&quot;[%d] end recv_right: &quot;, this-&gt;rank);</span>
  <span class="token comment">// PrintData(recv_right_buffer.Data(), right_block_len);</span>
  <span class="token comment">// printf(&quot;\\n&quot;);</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="performance-4" tabindex="-1"><a class="header-anchor" href="#performance-4"><span>Performance</span></a></h3><p>由于逻辑变得复杂, 效果非常不理想.</p><table><thead><tr><th>Number of Nodes</th><th>Number of Tasks</th><th>Number Count</th><th>Execution Time</th><th>Speedup</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>100000000</td><td>12483.309000 ms</td><td>1.</td></tr><tr><td>1</td><td>2</td><td>100000000</td><td>7433.843000 ms</td><td>1.67925379</td></tr><tr><td>1</td><td>4</td><td>100000000</td><td>5337.546000 ms</td><td>2.3387731</td></tr><tr><td>1</td><td>8</td><td>100000000</td><td>3785.481000 ms</td><td>3.29768106</td></tr><tr><td>1</td><td>16</td><td>100000000</td><td>2839.709000 ms</td><td>4.39598177</td></tr><tr><td>2</td><td>32</td><td>100000000</td><td>2490.944000 ms</td><td>5.01147717</td></tr></tbody></table><hr class="footnotes-sep">`,31),w={class:"footnotes"},f={class:"footnotes-list"},M={id:"footnote1",class:"footnote-item"},I={href:"http://liinwww.ira.uka.de/~thw/vl-hiroshima/slides-4.pdf",target:"_blank",rel:"noopener noreferrer"},x={href:"http://Liinwww.ira.uka.de",target:"_blank",rel:"noopener noreferrer"},P=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),z={id:"footnote2",class:"footnote-item"},C={href:"http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/networks/nulleinsen.htm",target:"_blank",rel:"noopener noreferrer"},L={href:"http://Iti.fh-flensburg.de",target:"_blank",rel:"noopener noreferrer"},O=n("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎",-1),S={id:"footnote3",class:"footnote-item"},T={href:"http://www.net.t-labs.tu-berlin.de/~stefan/netalg13-9-sort.pdf",target:"_blank",rel:"noopener noreferrer"},q={href:"http://Net.t-labs.tu-berlin.de",target:"_blank",rel:"noopener noreferrer"},A=n("a",{href:"#footnote-ref3",class:"footnote-backref"},"↩︎",-1);function R(D,j){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("blockquote",null,[n("p",null,[s("Reference: "),n("a",r,[s("Odd–even sort - Wikipedia"),t(a)])])]),k,d,m,v,b,h,g,y,_,n("section",w,[n("ol",f,[n("li",M,[n("p",null,[n("a",I,[s("“Five Lectures on CA”"),t(a)]),s(" (PDF). "),n("em",null,[n("a",x,[s("Liinwww.ira.uka.de"),t(a)])]),s(". Retrieved 2017-07-30. "),P])]),n("li",z,[n("p",null,[s("Lang, Hans Werner. "),n("a",C,[s("“The 0-1-principle”"),t(a)]),s(". "),n("em",null,[n("a",L,[s("Iti.fh-flensburg.de"),t(a)])]),s(". Retrieved 30 July 2017. "),O])]),n("li",S,[n("p",null,[n("a",T,[s("“Distributed Sorting”"),t(a)]),s(" (PDF). "),n("em",null,[n("a",q,[s("Net.t-labs.tu-berlin.de"),t(a)])]),s(". Retrieved 2017-07-30. "),A])])])])])}const B=e(i,[["render",R],["__file","2022-04-10-pa1-odd_even_sort.html.vue"]]),W=JSON.parse('{"path":"/2022/course-work/hpc/2022-04-10-pa1-odd_even_sort.html","title":"PA1: 奇偶排序（odd_even_sort）","lang":"en-US","frontmatter":{"date":"2022-04-10T00:00:00.000Z","isOriginal":true,"category":["Course Work"],"tag":["Introduction to High Performance Computing","MPI"],"title":"PA1: 奇偶排序（odd_even_sort）","description":"Performance v0 AllReduceBitwiseAnd + Blocking Communication + Naive Merge 每轮归并后 AllReduce 检查是否已为有序. AllReduceBitwiseAnd Source Code Performance v1 Loop nprocs times + Blocking C...","head":[["meta",{"property":"og:url","content":"https://blog.liblaf.me/2022/course-work/hpc/2022-04-10-pa1-odd_even_sort.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"PA1: 奇偶排序（odd_even_sort）"}],["meta",{"property":"og:description","content":"Performance v0 AllReduceBitwiseAnd + Blocking Communication + Naive Merge 每轮归并后 AllReduce 检查是否已为有序. AllReduceBitwiseAnd Source Code Performance v1 Loop nprocs times + Blocking C..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-03T09:57:39.000Z"}],["meta",{"property":"article:author","content":"liblaf"}],["meta",{"property":"article:tag","content":"Introduction to High Performance Computing"}],["meta",{"property":"article:tag","content":"MPI"}],["meta",{"property":"article:published_time","content":"2022-04-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-03T09:57:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PA1: 奇偶排序（odd_even_sort）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-03T09:57:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://liblaf.me\\",\\"email\\":\\"i@liblaf.me\\"}]}"]]},"headers":[{"level":2,"title":"Performance","slug":"performance","link":"#performance","children":[]},{"level":2,"title":"v0","slug":"v0","link":"#v0","children":[{"level":3,"title":"AllReduceBitwiseAnd","slug":"allreducebitwiseand","link":"#allreducebitwiseand","children":[]},{"level":3,"title":"Source Code","slug":"source-code","link":"#source-code","children":[]},{"level":3,"title":"Performance","slug":"performance-1","link":"#performance-1","children":[]}]},{"level":2,"title":"v1","slug":"v1","link":"#v1","children":[{"level":3,"title":"Proof of Correctness","slug":"proof-of-correctness","link":"#proof-of-correctness","children":[]},{"level":3,"title":"Source Code","slug":"source-code-1","link":"#source-code-1","children":[]},{"level":3,"title":"Performance","slug":"performance-2","link":"#performance-2","children":[]}]},{"level":2,"title":"v2","slug":"v2","link":"#v2","children":[{"level":3,"title":"Optimized Merge","slug":"optimized-merge","link":"#optimized-merge","children":[]},{"level":3,"title":"Source Code","slug":"source-code-2","link":"#source-code-2","children":[]},{"level":3,"title":"Performace","slug":"performace","link":"#performace","children":[]}]},{"level":2,"title":"v3","slug":"v3","link":"#v3","children":[{"level":3,"title":"Lazy Copy","slug":"lazy-copy","link":"#lazy-copy","children":[]},{"level":3,"title":"Source Code","slug":"source-code-3","link":"#source-code-3","children":[]},{"level":3,"title":"Performance","slug":"performance-3","link":"#performance-3","children":[]}]},{"level":2,"title":"v4","slug":"v4","link":"#v4","children":[{"level":3,"title":"Bandwidth","slug":"bandwidth","link":"#bandwidth","children":[]},{"level":3,"title":"Source Code","slug":"source-code-4","link":"#source-code-4","children":[]},{"level":3,"title":"Performance","slug":"performance-4","link":"#performance-4","children":[]}]}],"git":{"createdTime":1677217008000,"updatedTime":1709459859000,"contributors":[{"name":"liblaf","email":"30631553+liblaf@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":14.87,"words":4460},"filePathRelative":"2022/course-work/hpc/2022-04-10-pa1-odd_even_sort.md","localizedDate":"April 10, 2022","excerpt":"<h2>Performance</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>Number of Nodes</th>\\n<th>Number of Tasks</th>\\n<th>Number Count</th>\\n<th>v0</th>\\n<th>v1</th>\\n<th>v2</th>\\n<th>v3</th>\\n<th>v4</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>1</td>\\n<td>1</td>\\n<td>100000000</td>\\n<td>xxxxxxxxxx6 1void a_plus_b_intrinsic(float* a, float* b, float* c, int n) {2 for (int i = 0; i &lt; n; i += 8) {3 _mm256_store_ps(4 c + i, _mm256_add_ps(_mm256_load_ps(a + i), _mm256_load_ps(b + i)));5 }6}c++</td>\\n<td>1.</td>\\n<td>1.</td>\\n<td>1.</td>\\n<td>1.</td>\\n</tr>\\n<tr>\\n<td>1</td>\\n<td>2</td>\\n<td>100000000</td>\\n<td>1.82738226</td>\\n<td>1.83557525</td>\\n<td>1.8772568</td>\\n<td>1.86270894</td>\\n<td>1.67925379</td>\\n</tr>\\n<tr>\\n<td>1</td>\\n<td>4</td>\\n<td>100000000</td>\\n<td>3.05696721</td>\\n<td>3.17540441</td>\\n<td>3.37059297</td>\\n<td>3.39672385</td>\\n<td>2.3387731</td>\\n</tr>\\n<tr>\\n<td>1</td>\\n<td>8</td>\\n<td>100000000</td>\\n<td>5.15212684</td>\\n<td>5.59405831</td>\\n<td>6.03427353</td>\\n<td>6.15270254</td>\\n<td>3.29768106</td>\\n</tr>\\n<tr>\\n<td>1</td>\\n<td>16</td>\\n<td>100000000</td>\\n<td>7.65590815</td>\\n<td>8.91877194</td>\\n<td>9.65970998</td>\\n<td>10.31895407</td>\\n<td>4.39598177</td>\\n</tr>\\n<tr>\\n<td>2</td>\\n<td>32</td>\\n<td>100000000</td>\\n<td>10.63745468</td>\\n<td>12.91174115</td>\\n<td>14.70125847</td>\\n<td>15.67950831</td>\\n<td>5.01147717</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{B as comp,W as data};
