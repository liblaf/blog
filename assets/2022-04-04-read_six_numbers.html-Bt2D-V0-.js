import{_ as n,o as s,c as a,e}from"./app-CoV9NwP4.js";const t={},p=e(`<h2 id="assembly" tabindex="-1"><a class="header-anchor" href="#assembly"><span>Assembly</span></a></h2><div class="language-assembly line-numbers-mode" data-ext="assembly" data-title="assembly"><pre class="language-assembly"><code>0000000000401b98 &lt;read_six_numbers&gt;:
b0:
  401b98:	48 83 ec 18          	sub    $0x18,%rsp
  401b9c:	48 89 f2             	mov    %rsi,%rdx
  401b9f:	48 8d 4e 04          	lea    0x4(%rsi),%rcx
  401ba3:	48 8d 46 14          	lea    0x14(%rsi),%rax
  401ba7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  401bac:	48 8d 46 10          	lea    0x10(%rsi),%rax
  401bb0:	48 89 04 24          	mov    %rax,(%rsp)
  401bb4:	4c 8d 4e 0c          	lea    0xc(%rsi),%r9
  401bb8:	4c 8d 46 08          	lea    0x8(%rsi),%r8
  401bbc:	48 8d 35 66 18 00 00 	lea    0x1866(%rip),%rsi        # 403429 &lt;array.3354+0x249&gt;
  401bc3:	b8 00 00 00 00       	mov    $0x0,%eax
  401bc8:	e8 63 f5 ff ff       	callq  401130 &lt;__isoc99_sscanf@plt&gt;
  401bcd:	83 f8 05             	cmp    $0x5,%eax
  401bd0:	7f 05                	jg     401bd7 &lt;read_six_numbers+0x3f&gt;
  401bd2:	e8 85 ff ff ff       	callq  401b5c &lt;explode_bomb&gt;
b1:
  401bd7:	48 83 c4 18          	add    $0x18,%rsp
  401bdb:	c3                   	retq
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="翻译为-c" tabindex="-1"><a class="header-anchor" href="#翻译为-c"><span>翻译为 C</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">read_six_numbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
b0<span class="token operator">:</span>
  rsp <span class="token operator">-=</span> <span class="token number">0x18</span><span class="token punctuation">;</span>
  rdx <span class="token operator">=</span> rsi<span class="token punctuation">;</span>
  rcx <span class="token operator">=</span> rsi <span class="token operator">+</span> <span class="token number">0x4</span><span class="token punctuation">;</span>
  rax <span class="token operator">=</span> rsi <span class="token operator">+</span> <span class="token number">0x14</span><span class="token punctuation">;</span>
  <span class="token operator">*</span><span class="token punctuation">(</span>rsp <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">=</span> rax<span class="token punctuation">;</span>
  rax <span class="token operator">=</span> rsi <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">;</span>
  <span class="token operator">*</span>rsp <span class="token operator">=</span> rax<span class="token punctuation">;</span>
  r9 <span class="token operator">=</span> rsi <span class="token operator">+</span> <span class="token number">0xc</span><span class="token punctuation">;</span>
  r8 <span class="token operator">=</span> rsi <span class="token operator">+</span> <span class="token number">0x8</span><span class="token punctuation">;</span>
  rsi <span class="token operator">=</span> <span class="token number">0x403429</span><span class="token punctuation">;</span> <span class="token comment">// 403429 &lt;array.3354+0x249&gt;</span>
  rax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 32-bit</span>
  rax <span class="token operator">=</span> __isoc99_sscanf @<span class="token function">plt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rax <span class="token operator">&gt;</span> <span class="token number">0x5</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> b1<span class="token punctuation">;</span>
  <span class="token function">explode_bomb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
b1<span class="token operator">:</span>
  rsp <span class="token operator">+=</span> <span class="token number">0x18</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="optimize" tabindex="-1"><a class="header-anchor" href="#optimize"><span>Optimize</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">read_six_numbers</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> rdi<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> rsi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> rax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 32-bit</span>
  rax <span class="token operator">=</span> <span class="token function">__isoc99_sscanf</span><span class="token punctuation">(</span>rdi<span class="token punctuation">,</span> <span class="token string">&quot;%d %d %d %d %d %d&quot;</span><span class="token punctuation">,</span> rsi<span class="token punctuation">,</span> rsi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rsi <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span>
                        rsi <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> rsi <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> rsi <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>rax <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">explode_bomb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hack" tabindex="-1"><a class="header-anchor" href="#hack"><span>Hack</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>(gdb) x/s 0x403429
0x403429:       &quot;%d %d %d %d %d %d&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,8),o=[p];function i(c,l){return s(),a("div",null,o)}const d=n(t,[["render",i],["__file","2022-04-04-read_six_numbers.html.vue"]]),u=JSON.parse('{"path":"/2022/course-work/csapp/bomb-lab/2022-04-04-read_six_numbers.html","title":"Bomb Lab: read six numbers","lang":"en-US","frontmatter":{"date":"2022-04-04T00:00:00.000Z","isOriginal":true,"category":["Course Work"],"tag":["Bomb Lab","Computer Organization and Architecture"],"title":"Bomb Lab: read six numbers","description":"Assembly 翻译为 C Optimize Hack","head":[["meta",{"property":"og:url","content":"https://blog.liblaf.me/2022/course-work/csapp/bomb-lab/2022-04-04-read_six_numbers.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"Bomb Lab: read six numbers"}],["meta",{"property":"og:description","content":"Assembly 翻译为 C Optimize Hack"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-03T09:57:39.000Z"}],["meta",{"property":"article:author","content":"liblaf"}],["meta",{"property":"article:tag","content":"Bomb Lab"}],["meta",{"property":"article:tag","content":"Computer Organization and Architecture"}],["meta",{"property":"article:published_time","content":"2022-04-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-03T09:57:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bomb Lab: read six numbers\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-03T09:57:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://liblaf.me\\",\\"email\\":\\"i@liblaf.me\\"}]}"]]},"headers":[{"level":2,"title":"Assembly","slug":"assembly","link":"#assembly","children":[]},{"level":2,"title":"翻译为 C","slug":"翻译为-c","link":"#翻译为-c","children":[]},{"level":2,"title":"Optimize","slug":"optimize","link":"#optimize","children":[]},{"level":2,"title":"Hack","slug":"hack","link":"#hack","children":[]}],"git":{"createdTime":1677217008000,"updatedTime":1709459859000,"contributors":[{"name":"liblaf","email":"30631553+liblaf@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":0.91,"words":272},"filePathRelative":"2022/course-work/csapp/bomb-lab/2022-04-04-read_six_numbers.md","localizedDate":"April 4, 2022","excerpt":"<h2>Assembly</h2>\\n<div class=\\"language-assembly\\" data-ext=\\"assembly\\" data-title=\\"assembly\\"><pre class=\\"language-assembly\\"><code>0000000000401b98 &lt;read_six_numbers&gt;:\\nb0:\\n  401b98:\\t48 83 ec 18          \\tsub    $0x18,%rsp\\n  401b9c:\\t48 89 f2             \\tmov    %rsi,%rdx\\n  401b9f:\\t48 8d 4e 04          \\tlea    0x4(%rsi),%rcx\\n  401ba3:\\t48 8d 46 14          \\tlea    0x14(%rsi),%rax\\n  401ba7:\\t48 89 44 24 08       \\tmov    %rax,0x8(%rsp)\\n  401bac:\\t48 8d 46 10          \\tlea    0x10(%rsi),%rax\\n  401bb0:\\t48 89 04 24          \\tmov    %rax,(%rsp)\\n  401bb4:\\t4c 8d 4e 0c          \\tlea    0xc(%rsi),%r9\\n  401bb8:\\t4c 8d 46 08          \\tlea    0x8(%rsi),%r8\\n  401bbc:\\t48 8d 35 66 18 00 00 \\tlea    0x1866(%rip),%rsi        # 403429 &lt;array.3354+0x249&gt;\\n  401bc3:\\tb8 00 00 00 00       \\tmov    $0x0,%eax\\n  401bc8:\\te8 63 f5 ff ff       \\tcallq  401130 &lt;__isoc99_sscanf@plt&gt;\\n  401bcd:\\t83 f8 05             \\tcmp    $0x5,%eax\\n  401bd0:\\t7f 05                \\tjg     401bd7 &lt;read_six_numbers+0x3f&gt;\\n  401bd2:\\te8 85 ff ff ff       \\tcallq  401b5c &lt;explode_bomb&gt;\\nb1:\\n  401bd7:\\t48 83 c4 18          \\tadd    $0x18,%rsp\\n  401bdb:\\tc3                   \\tretq\\n</code></pre></div>","autoDesc":true}');export{d as comp,u as data};
