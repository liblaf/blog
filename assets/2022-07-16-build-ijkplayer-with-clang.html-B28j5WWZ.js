import{_ as t,r as o,o as l,c as d,a as n,b as e,d as a,e as i}from"./app-CoV9NwP4.js";const c={},r=n("h2",{id:"how-to-build-ijkplayer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#how-to-build-ijkplayer"},[n("span",null,"How to Build ijkplayer")])],-1),p=n("h3",{id:"before-build",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#before-build"},[n("span",null,"Before Build")])],-1),u={href:"https://github.com/android/ndk/wiki/Unsupported-Downloads",target:"_blank",rel:"noopener noreferrer"},h={href:"https://developer.android.com/studio/archive",target:"_blank",rel:"noopener noreferrer"},g=i(`<h3 id="configure-environment" tabindex="-1"><a class="header-anchor" href="#configure-environment"><span>Configure Environment</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">ANDROID_SDK</span><span class="token operator">=~</span>/Android/Sdk
<span class="token builtin class-name">export</span> <span class="token assign-left variable">ANDROID_NDK</span><span class="token operator">=~</span>/programs/ndk/r14b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="build" tabindex="-1"><a class="header-anchor" href="#build"><span>Build</span></a></h3><p>If no argument is pass to <code>compile-ffmpeg.sh</code> and <code>compile-ijk.sh</code>, only <code>armv7a</code> target will be build instead of all targets including <code>armv5</code>, <code>armv7a</code>, <code>arm64</code>, <code>x86</code>, <code>x86_64</code>.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>./init-android.sh

<span class="token comment"># build ffmpeg</span>
<span class="token builtin class-name">cd</span> android/contrib
./compile-ffmpeg.sh clean
./compile-ffmpeg.sh <span class="token comment"># compile armv7a only</span>

<span class="token comment"># build ijkplayer</span>
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>
./compile-ijk.sh clean
./compile-ijk.sh <span class="token comment"># compile armv7a only</span>

<span class="token comment"># Android Studio:</span>
<span class="token comment"># Select android/ijkplayer/ and import</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="build-ffmpeg-with-clang" tabindex="-1"><a class="header-anchor" href="#build-ffmpeg-with-clang"><span>Build ffmpeg with Clang</span></a></h2><p><code>compile-ffmpeg.sh</code> calls <code>tools/do-compile-ffmpeg.sh</code> to do the real compilation job, thus the main build process is present in <code>tools/do-compile-ffmpeg.sh</code>.</p><h3 id="make-ndk-standalone-toolchain" tabindex="-1"><a class="header-anchor" href="#make-ndk-standalone-toolchain"><span>Make NDK Standalone Toolchain</span></a></h3>`,8),m=n("code",null,"do-compile-ffmpeg.sh",-1),b=n("code",null,"$ANDROID_NDK/build/tools/make-standalone-toolchain.sh",-1),f={href:"https://github.com/bilibili/ijkplayer/blob/30eb9441945da795079492041a791c121d2b8206/android/contrib/tools/do-compile-ffmpeg.sh#L202",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"make-standalone-toolchain.sh",-1),v=n("code",null,"$ANDROID_NDK/build/tools/make-standalone-toolchain.py",-1),_=n("code",null,"android/contrib/build/ffmpeg-armv7a/toolchain/",-1),w=i(`<p>Under <code>android/contrib/build/ffmpeg-armv7a/toolchain/bin/</code>, you will find <code>clang</code>, <code>clang38</code>, <code>arm-linux-androideabi-clang</code>. <code>clang</code> and <code>arm-linux-androideabi-clang</code> are identical, both of which are shell script wrapper ( see below ) for <code>clang38</code>, a binary program.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$1</span>&quot;</span> <span class="token operator">!=</span> <span class="token string">&quot;-cc1&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token variable"><span class="token variable">\`</span><span class="token function">dirname</span> $0<span class="token variable">\`</span></span>/clang38 <span class="token parameter variable">-target</span> armv7a-none-linux-androideabi <span class="token parameter variable">--sysroot</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">dirname</span> $0<span class="token variable">\`</span></span>/<span class="token punctuation">..</span>/sysroot <span class="token string">&quot;<span class="token variable">$@</span>&quot;</span>
<span class="token keyword">else</span>
    <span class="token comment"># target/triple already spelled out.</span>
    <span class="token variable"><span class="token variable">\`</span><span class="token function">dirname</span> $0<span class="token variable">\`</span></span>/clang38 <span class="token string">&quot;<span class="token variable">$@</span>&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>clang38</code> is directly copied from <code>$ANDROID_NDK</code>. In the python script <code>make-standalone-toolchain.py</code>, we can find the following function on line 133:</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_clang_path_or_die</span><span class="token punctuation">(</span>host_tag<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Return the Clang path for our host or die.&quot;&quot;&quot;</span>
    clang_toolchain_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>
        NDK_DIR<span class="token punctuation">,</span> <span class="token string">&#39;toolchains/llvm/prebuilt&#39;</span><span class="token punctuation">,</span> host_tag<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>clang_toolchain_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token string">&#39;Could not find Clang: {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>clang_toolchain_path<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> clang_toolchain_path
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That is to say, <code>clang38</code> probably comes from <code>$ANDROID_NDK/toolchains/llvm/prebuilt/linux-x86_64/</code>. And in fact, that’s <strong>true</strong>! If we compare <code>clang38</code> and <code>$ANDROID_NDK/toolchains/llvm/prebuilt/clang</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cmp</span> <span class="token variable">$ANDROID_NDK</span>/toolchains/llvm/prebuilt/linux-x86_64/bin/clang android/contrib/build/ffmpeg-armv7a/toolchain/bin/clang38
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>The two compilers are <strong>identical</strong>!</p></blockquote><h3 id="configurate-ffmpeg" tabindex="-1"><a class="header-anchor" href="#configurate-ffmpeg"><span>configurate ffmpeg</span></a></h3>`,8),x=n("code",null,"do-compile-ffmpeg.sh",-1),y={href:"https://github.com/bilibili/ijkplayer/blob/30eb9441945da795079492041a791c121d2b8206/android/contrib/tools/do-compile-ffmpeg.sh#L300",target:"_blank",rel:"noopener noreferrer"},F=i(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token variable">$FF_SOURCE</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">&quot;./config.h&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&#39;reuse configure&#39;</span>
<span class="token keyword">else</span>
    <span class="token function">which</span> <span class="token variable">$CC</span>
    ./configure <span class="token variable">$FF_CFG_FLAGS</span> <span class="token punctuation">\\</span>
        --extra-cflags<span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$FF_CFLAGS</span> <span class="token variable">$FF_EXTRA_CFLAGS</span>&quot;</span> <span class="token punctuation">\\</span>
        --extra-ldflags<span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$FF_DEP_LIBS</span> <span class="token variable">$FF_EXTRA_LDFLAGS</span>&quot;</span>
    <span class="token function">make</span> clean
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>configure</code> is a bash script under <code>android/contrib/ffmpeg-armv7a/</code>. Help messages can be found in function <code>show_help()</code> on line 59. Toolchain options starts from line 331. By default, <code>arm-linux-androideabi-gcc</code> is used as C compiler ( <code>$cc</code> ). To use clang, we need to pass <code>--cc=clang</code> or <code>--cc=arm-linux-androideabi-clang</code> to <code>./configure</code>. The two clang wrapper are identical.</p><div class="language-diff line-numbers-mode" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token coord">--- a/android/contrib/tools/do-compile-ffmpeg.sh</span>
<span class="token coord">+++ b/android/contrib/tools/do-compile-ffmpeg.sh</span>
@@ -214,7 +214,7 @@ echo &quot;[*] check ffmpeg env&quot;
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">echo &quot;--------------------&quot;
</span><span class="token prefix unchanged"> </span><span class="token line">export PATH=$FF_TOOLCHAIN_PATH/bin/:$PATH
</span><span class="token prefix unchanged"> </span><span class="token line">#export CC=&quot;ccache \${FF_CROSS_PREFIX}-gcc&quot;
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">export CC=&quot;\${FF_CROSS_PREFIX}-gcc&quot;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">export CC=&quot;\${FF_CROSS_PREFIX}-clang&quot;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">export LD=\${FF_CROSS_PREFIX}-ld
</span><span class="token prefix unchanged"> </span><span class="token line">export AR=\${FF_CROSS_PREFIX}-ar
</span><span class="token prefix unchanged"> </span><span class="token line">export STRIP=\${FF_CROSS_PREFIX}-strip
</span></span>@@ -303,6 +303,8 @@ if [ -f &quot;./config.h&quot; ]; then
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">else
</span><span class="token prefix unchanged"> </span><span class="token line">    which $CC
</span><span class="token prefix unchanged"> </span><span class="token line">    ./configure $FF_CFG_FLAGS \\
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">        --cc=&#39;clang&#39; \\
</span><span class="token prefix inserted">+</span><span class="token line">        --host-cc=&#39;clang38&#39; \\
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">        --extra-cflags=&quot;$FF_CFLAGS $FF_EXTRA_CFLAGS&quot; \\
</span><span class="token prefix unchanged"> </span><span class="token line">        --extra-ldflags=&quot;$FF_DEP_LIBS $FF_EXTRA_LDFLAGS&quot;
</span><span class="token prefix unchanged"> </span><span class="token line">    make clean
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, you would probably get an error message like this:</p><div class="language-shell-session line-numbers-mode" data-ext="shell-session" data-title="shell-session"><pre class="language-shell-session"><code><span class="token output">GNU assembler not found, install/update gas-preprocessor
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Here is the reason. By default, <code>./configure</code> uses <code>$cc</code> as the assembler ( <code>$as</code> ). However, Clang 3.8 is somewhat incompatible with GNU when it comes to assembly code.</p><blockquote><p>Even if I skip the assembler test ( <code>function check_as()</code> ) in <code>configure</code>, it will fail when compiling.</p></blockquote><p>One possible solution is to add <code>-fno-integrated-as</code> to Clang flags.<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><div class="language-diff line-numbers-mode" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">        --cc=&#39;clang -fno-integrated-as&#39; \\
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Or, explicitly tell <code>configure</code> to use <code>gcc</code> as assembler:</p><div class="language-diff line-numbers-mode" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">        --as=&#39;arm-linux-androideabi-gcc&#39; \\
</span><span class="token prefix inserted">+</span><span class="token line">        --cc=&#39;clang&#39; \\
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>It <strong>works</strong>!</p></blockquote><h3 id="suppress-warnings" tabindex="-1"><a class="header-anchor" href="#suppress-warnings"><span>Suppress Warnings</span></a></h3><p>Clang generates lots of warnings. To suppress them, add the following flags to Clang flags.</p><h4 id="suppress-deprecated-declarations" tabindex="-1"><a class="header-anchor" href="#suppress-deprecated-declarations"><span>Suppress “deprecated declarations”</span></a></h4><p>Add <code>-Wno-deprecated-declarations</code> to Clang flags.</p><h4 id="suppress-unknown-warning-option" tabindex="-1"><a class="header-anchor" href="#suppress-unknown-warning-option"><span>Suppress “unknown warning option”</span></a></h4><p>Add <code>-Wno-unknown-warning-option</code> to Clang flags.</p><h4 id="suppress-unused-function" tabindex="-1"><a class="header-anchor" href="#suppress-unused-function"><span>Suppress “unused function”</span></a></h4><p>Add <code>-Wno-unused-function</code> to Clang flags. I tried to add the flag directly in <code>do-compile-ffmpeg.sh</code> as following, but didn’t work. Perhaps <code>-Wunused-function</code> is added back somewhere else in <code>configure</code>.</p><div class="language-diff line-numbers-mode" data-ext="diff" data-title="diff"><pre class="language-diff"><code><span class="token coord">--- a/android/contrib/tools/do-compile-ffmpeg.sh</span>
<span class="token coord">+++ b/android/contrib/tools/do-compile-ffmpeg.sh</span>
@@ -214,7 +214,7 @@ echo &quot;[*] check ffmpeg env&quot;
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">echo &quot;--------------------&quot;
</span><span class="token prefix unchanged"> </span><span class="token line">export PATH=$FF_TOOLCHAIN_PATH/bin/:$PATH
</span><span class="token prefix unchanged"> </span><span class="token line">#export CC=&quot;ccache \${FF_CROSS_PREFIX}-gcc&quot;
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">export CC=&quot;\${FF_CROSS_PREFIX}-gcc&quot;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">export CC=&quot;\${FF_CROSS_PREFIX}-clang&quot;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">export LD=\${FF_CROSS_PREFIX}-ld
</span><span class="token prefix unchanged"> </span><span class="token line">export AR=\${FF_CROSS_PREFIX}-ar
</span><span class="token prefix unchanged"> </span><span class="token line">export STRIP=\${FF_CROSS_PREFIX}-strip
</span></span>@@ -303,6 +303,8 @@ if [ -f &quot;./config.h&quot; ]; then
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">else
</span><span class="token prefix unchanged"> </span><span class="token line">    which $CC
</span><span class="token prefix unchanged"> </span><span class="token line">    ./configure $FF_CFG_FLAGS \\
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">        --cc=&#39;clang -fno-integrated-as -Wno-deprecated-declarations -Wno-unknown-warning-option -Wno-unused-function&#39; \\
</span><span class="token prefix inserted">+</span><span class="token line">        --host-cc=&#39;clang38&#39; \\
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">        --extra-cflags=&quot;$FF_CFLAGS $FF_EXTRA_CFLAGS&quot; \\
</span><span class="token prefix unchanged"> </span><span class="token line">        --extra-ldflags=&quot;$FF_DEP_LIBS $FF_EXTRA_LDFLAGS&quot;
</span><span class="token prefix unchanged"> </span><span class="token line">    make clean
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="upgrade-clang-to-higher-version" tabindex="-1"><a class="header-anchor" href="#upgrade-clang-to-higher-version"><span>Upgrade Clang to Higher Version</span></a></h2><p>The version of Clang which NDK r14b uses is <code>3.8</code>. It’s a little bit <strong>old</strong>. I failed to compile ffmpeg with NDK r15 or higher. Instead, I find a tricky method to use later version of Clang.</p><p>As mentioned in the previous, the Clang used to compile ffmpeg comes from NDK toolchain. If we replace the Clang in NDK, we may be able to use a different version of Clang. NDK r25 comes with Clang 14, so I can:</p><div class="language-shell-session line-numbers-mode" data-ext="shell-session" data-title="shell-session"><pre class="language-shell-session"><code><span class="token output">(base) liblaf@xps:~/programs/ndk/r14b/toolchains/llvm/prebuilt/linux-x86_64/bin$ mv clang clang.old # backup clang
(base) liblaf@xps:~/programs/ndk/r14b/toolchains/llvm/prebuilt/linux-x86_64/bin$ ln --symbolic ~/programs/ndk/r25/toolchains/llvm/prebuilt/linux-x86_64/bin/clang clang # link clang in NDK r14 to clang in NDK r25
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Do Not Copy! That won’t work! <strong>Link</strong> Instead!</p></blockquote><p>Even better, Clang 14 is compatible with GNU assembler, so <code>-fno-integrated-as</code> is unnecessary any more.</p><h2 id="compatibility-test" tabindex="-1"><a class="header-anchor" href="#compatibility-test"><span>Compatibility Test</span></a></h2><table><thead><tr><th>SDK</th><th>NDK</th><th>Gradle</th><th>Android Studio</th><th>compile ffmpeg</th><th>compile ijk</th><th>Emulator</th></tr></thead><tbody><tr><td>25.0.3</td><td>r10e</td><td>2.14.1</td><td>2.3.2</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>25.0.3</td><td>r11c</td><td>2.14.1</td><td>2.3.2</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>25.0.3</td><td>r12b</td><td>2.14.1</td><td>2.3.2</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>25.0.3</td><td>r13b</td><td>2.14.1</td><td>2.3.2</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>25.0.3</td><td>r14b</td><td>2.14.1</td><td>2.3.2</td><td>⭕</td><td>✅</td><td>✅</td></tr><tr><td>25.0.3</td><td>r15c</td><td>2.14.1</td><td>2.3.2</td><td>❌</td><td></td><td></td></tr><tr><td>28.0.3</td><td>r14b</td><td>2.14.1</td><td>3.6.3</td><td>✅</td><td>❌</td><td></td></tr><tr><td>25.0.3</td><td>r21e</td><td>2.14.1</td><td>2.3.3</td><td>⭕</td><td>✅</td><td>poor performance</td></tr></tbody></table><p>When building with NDK r14b, you may encounter an error like this:</p><div class="language-shell-session line-numbers-mode" data-ext="shell-session" data-title="shell-session"><pre class="language-shell-session"><code><span class="token output">BFD: libncurses.so.5: cannot open shared object file: No such file or directory
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The solution is to install the corresponding dependency:<sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libncurses5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="discussion-on-github" tabindex="-1"><a class="header-anchor" href="#discussion-on-github"><span>Discussion on GitHub</span></a></h3>`,34),C={href:"https://github.com/bilibili/ijkplayer",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/bilibili/ijkplayer/issues/3378",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/bilibili/ijkplayer/issues/2752",target:"_blank",rel:"noopener noreferrer"},q=n("h2",{id:"reference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reference"},[n("span",null,"Reference")])],-1),A=n("hr",{class:"footnotes-sep"},null,-1),$={class:"footnotes"},R={class:"footnotes-list"},I={id:"footnote1",class:"footnote-item"},N={href:"https://stackoverflow.com/questions/47938599/unknown-directive-altmacro-error-happens-when-using-android-ndk-standalone-tool",target:"_blank",rel:"noopener noreferrer"},T=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),j={id:"footnote2",class:"footnote-item"},B={href:"https://stackoverflow.com/questions/17005654/error-while-loading-shared-libraries-libncurses-so-5",target:"_blank",rel:"noopener noreferrer"},O=n("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎",-1);function E(K,L){const s=o("ExternalLinkIcon");return l(),d("div",null,[r,p,n("ol",null,[n("li",null,[e("Download NDK: "),n("a",u,[e("Unsupported Downloads · android/ndk Wiki"),a(s)])]),n("li",null,[e("Download Android Studio: "),n("a",h,[e("Android Studio download archives | Android Developers"),a(s)])])]),g,n("p",null,[m,e(" calls "),b,e(" to make toolchain on "),n("a",f,[e("line 202"),a(s)]),e(". "),k,e(" then calls "),v,e(" to install toolchain under "),_,e(".")]),w,n("p",null,[e("This step is quite short in "),x,e(", staring from "),n("a",y,[e("line 300"),a(s)]),e(":")]),F,n("p",null,[e("Here are some discussions on "),n("a",C,[e("GitHub"),a(s)]),e(". I tried some of their methods but it didn’t work.")]),n("ol",null,[n("li",null,[n("a",D,[e("编译出错 · Issue #3378 · bilibili/ijkplayer"),a(s)])]),n("li",null,[n("a",S,[e("You need the NDKr10e or later · Issue #2752 · bilibili/ijkplayer"),a(s)])])]),q,A,n("section",$,[n("ol",R,[n("li",I,[n("p",null,[n("a",N,[e("c - Unknown directive .altmacro error happens when using android-ndk standalone toolchain - Stack Overflow"),a(s)]),e(),T])]),n("li",j,[n("p",null,[n("a",B,[e("linux - error while loading shared libraries: libncurses.so.5: - Stack Overflow"),a(s)]),e(),O])])])])])}const H=t(c,[["render",E],["__file","2022-07-16-build-ijkplayer-with-clang.html.vue"]]),G=JSON.parse('{"path":"/2022/research/idea/2022-07-16-build-ijkplayer-with-clang.html","title":"Build ijkplayer with Clang","lang":"en-US","frontmatter":{"date":"2022-07-16T00:00:00.000Z","isOriginal":true,"category":["Research"],"tag":["Android","Clang","NDK","ijkplayer"],"title":"Build ijkplayer with Clang","description":"How to Build ijkplayer Before Build Download NDK: Unsupported Downloads · android/ndk Wiki Download Android Studio: Android Studio download archives | Android Developers Configu...","head":[["meta",{"property":"og:url","content":"https://blog.liblaf.me/2022/research/idea/2022-07-16-build-ijkplayer-with-clang.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"Build ijkplayer with Clang"}],["meta",{"property":"og:description","content":"How to Build ijkplayer Before Build Download NDK: Unsupported Downloads · android/ndk Wiki Download Android Studio: Android Studio download archives | Android Developers Configu..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-03T09:57:39.000Z"}],["meta",{"property":"article:author","content":"liblaf"}],["meta",{"property":"article:tag","content":"Android"}],["meta",{"property":"article:tag","content":"Clang"}],["meta",{"property":"article:tag","content":"NDK"}],["meta",{"property":"article:tag","content":"ijkplayer"}],["meta",{"property":"article:published_time","content":"2022-07-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-03T09:57:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Build ijkplayer with Clang\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-07-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-03T09:57:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://liblaf.me\\",\\"email\\":\\"i@liblaf.me\\"}]}"]]},"headers":[{"level":2,"title":"How to Build ijkplayer","slug":"how-to-build-ijkplayer","link":"#how-to-build-ijkplayer","children":[{"level":3,"title":"Before Build","slug":"before-build","link":"#before-build","children":[]},{"level":3,"title":"Configure Environment","slug":"configure-environment","link":"#configure-environment","children":[]},{"level":3,"title":"Build","slug":"build","link":"#build","children":[]}]},{"level":2,"title":"Build ffmpeg with Clang","slug":"build-ffmpeg-with-clang","link":"#build-ffmpeg-with-clang","children":[{"level":3,"title":"Make NDK Standalone Toolchain","slug":"make-ndk-standalone-toolchain","link":"#make-ndk-standalone-toolchain","children":[]},{"level":3,"title":"configurate ffmpeg","slug":"configurate-ffmpeg","link":"#configurate-ffmpeg","children":[]},{"level":3,"title":"Suppress Warnings","slug":"suppress-warnings","link":"#suppress-warnings","children":[]}]},{"level":2,"title":"Upgrade Clang to Higher Version","slug":"upgrade-clang-to-higher-version","link":"#upgrade-clang-to-higher-version","children":[]},{"level":2,"title":"Compatibility Test","slug":"compatibility-test","link":"#compatibility-test","children":[{"level":3,"title":"Discussion on GitHub","slug":"discussion-on-github","link":"#discussion-on-github","children":[]}]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"createdTime":1677217008000,"updatedTime":1709459859000,"contributors":[{"name":"liblaf","email":"30631553+liblaf@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":3.75,"words":1124},"filePathRelative":"2022/research/idea/2022-07-16-build-ijkplayer-with-clang.md","localizedDate":"July 16, 2022","excerpt":"<h2>How to Build ijkplayer</h2>\\n<h3>Before Build</h3>\\n<ol>\\n<li>Download NDK: <a href=\\"https://github.com/android/ndk/wiki/Unsupported-Downloads\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Unsupported Downloads · android/ndk Wiki</a></li>\\n<li>Download Android Studio: <a href=\\"https://developer.android.com/studio/archive\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Android Studio download archives | Android Developers</a></li>\\n</ol>","autoDesc":true}');export{H as comp,G as data};
