import{_ as n,o as s,c as a,e as t}from"./app-CoV9NwP4.js";const e={},p=t(`<h2 id="results" tabindex="-1"><a class="header-anchor" href="#results"><span>Results</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Correctness Results     Perf Results
Points  Rating  Errors  Points  Ops     Puzzle
1       1       0       2       4       bitOr
2       2       0       2       3       getByte
3       3       0       2       6       logicalShift
4       4       0       2       40      bitReverse
4       4       0       2       6       bang
1       1       0       2       2       tmax
2       2       0       2       7       fitsBits
2       2       0       2       7       dividePower2
2       2       0       2       2       negate
2       2       0       2       5       isPositive
3       3       0       2       14      isLessOrEqual
4       4       0       2       27      intLog2
2       2       0       2       16      floatIsEqual
4       4       0       2       14      floatFloat2Int
4       4       0       2       11      floatScale2

Score = 70/70 [40/40 Corr + 30/30 Perf] (164 total operators)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="report" tabindex="-1"><a class="header-anchor" href="#report"><span>Report</span></a></h2><h3 id="bitor" tabindex="-1"><a class="header-anchor" href="#bitor"><span><code>bitOr</code></span></a></h3><h4 id="thinking" tabindex="-1"><a class="header-anchor" href="#thinking"><span>Thinking</span></a></h4><p>De Morganâ€™s Law</p><h4 id="solution" tabindex="-1"><a class="header-anchor" href="#solution"><span>Solution</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">bitOr</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="getbyte" tabindex="-1"><a class="header-anchor" href="#getbyte"><span><code>getByte</code></span></a></h3><h4 id="thinking-1" tabindex="-1"><a class="header-anchor" href="#thinking-1"><span>Thinking</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0</span>b11111111
<span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="solution-1" tabindex="-1"><a class="header-anchor" href="#solution-1"><span>Solution</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">getByte</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//  return (x &gt;&gt; (n * 8)) &amp; 0b11111111;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="logicalshift" tabindex="-1"><a class="header-anchor" href="#logicalshift"><span><code>logicalShift</code></span></a></h3><h4 id="thinking-2" tabindex="-1"><a class="header-anchor" href="#thinking-2"><span>Thinking</span></a></h4><p>After logical shift to the right by <code>n</code>, the highest <code>32 - n</code> bits should be <code>0</code>. Therefore, let <code>~(((1 &lt;&lt; 31) &gt;&gt; n) &lt;&lt; 1)</code> (an integer containing <code>32 - n</code> <code>0</code>s and <code>n</code> <code>1</code>s) to be the mask.</p><h4 id="solution-2" tabindex="-1"><a class="header-anchor" href="#solution-2"><span>Solution</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">logicalShift</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="bitreverse" tabindex="-1"><a class="header-anchor" href="#bitreverse"><span><code>bitReverse</code></span></a></h3><h4 id="thinking-3" tabindex="-1"><a class="header-anchor" href="#thinking-3"><span>Thinking</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">// swap odd and even bits</span>
x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x55555555</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">0x55555555</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// swap consecutive pairs</span>
x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x33333333</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">0x33333333</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// swap 4-bit long pairs</span>
x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x0F0F0F0F</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">0x0F0F0F0F</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// swap bytes</span>
x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x00FF00FF</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">0x00FF00FF</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// swap 2-byte long pairs</span>
x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that when a negative number is shifted to the right, the high-order bit is filled with <code>1</code>, so an additional <code>mask16</code> needs to be added to erase the high-order <code>1</code>.</p><h4 id="solution-3" tabindex="-1"><a class="header-anchor" href="#solution-3"><span>Solution</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">bitReverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> mask1<span class="token punctuation">,</span> mask2<span class="token punctuation">,</span> mask4<span class="token punctuation">,</span> mask8<span class="token punctuation">,</span> mask16<span class="token punctuation">;</span>
  mask1 <span class="token operator">=</span> <span class="token number">0x55</span><span class="token punctuation">;</span>  <span class="token comment">// 0b01010101</span>
  mask1 <span class="token operator">|=</span> mask1 <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
  mask1 <span class="token operator">|=</span> mask1 <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
  <span class="token comment">// swap odd and even bits</span>
  x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask1<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> mask1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  mask2 <span class="token operator">=</span> <span class="token number">0x33</span><span class="token punctuation">;</span>  <span class="token comment">// 0b00110011</span>
  mask2 <span class="token operator">|=</span> mask2 <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
  mask2 <span class="token operator">|=</span> mask2 <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
  <span class="token comment">// swap consecutive pairs</span>
  x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask2<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> mask2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  mask4 <span class="token operator">=</span> <span class="token number">0x0f</span><span class="token punctuation">;</span>  <span class="token comment">// 0b00001111</span>
  mask4 <span class="token operator">|=</span> mask4 <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
  mask4 <span class="token operator">|=</span> mask4 <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
  <span class="token comment">// swap 8-bit long pairs</span>
  x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask4<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> mask4<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  mask8 <span class="token operator">=</span> <span class="token number">0x00ff</span><span class="token punctuation">;</span>  <span class="token comment">// 0b0000000011111111</span>
  mask8 <span class="token operator">|=</span> mask8 <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
  <span class="token comment">// swap bytes</span>
  x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask8<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> mask8<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  mask16 <span class="token operator">=</span> <span class="token number">0xff</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0xff</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// swap 2-byte long pairs</span>
  x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask16<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bang" tabindex="-1"><a class="header-anchor" href="#bang"><span><code>bang</code></span></a></h3><h4 id="thinking-4" tabindex="-1"><a class="header-anchor" href="#thinking-4"><span>Thinking</span></a></h4><p>We only need to distinguish <code>0</code> and others. Since <code>0 == -0</code>, or in other words, the sign bit of <code>0</code> does not change due to negation. It can be seen from this that if the sign bits of <code>x</code> and <code>-x</code> are both <code>0</code>, then <code>x</code> must be <code>0</code>. In addition, <code>-x</code> can be obtained by <code>(~x) + 1</code>.</p><h4 id="solution-4" tabindex="-1"><a class="header-anchor" href="#solution-4"><span>Solution</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">bang</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>x <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="tmax" tabindex="-1"><a class="header-anchor" href="#tmax"><span><code>tmax</code></span></a></h3><h4 id="thinking-5" tabindex="-1"><a class="header-anchor" href="#thinking-5"><span>Thinking</span></a></h4><p><code>tmax</code> is one <code>0</code> followed by 31 <code>1</code>s .</p><h4 id="solution-5" tabindex="-1"><a class="header-anchor" href="#solution-5"><span>Solution</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">tmax</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="fitsbits" tabindex="-1"><a class="header-anchor" href="#fitsbits"><span><code>fitsBits</code></span></a></h3><h4 id="thinking-6" tabindex="-1"><a class="header-anchor" href="#thinking-6"><span>Thinking</span></a></h4><p>When <code>x</code> is positive, if all bits in <code>x &gt;&gt; (n - 1)</code> equal <code>0</code>, then <code>n</code> bits can represent <code>x</code>, vice versa. When <code>x</code> is negative, if all bits in <code>~ (x &gt;&gt; (n - 1))</code> equal <code>0</code>, then <code>n</code> bits can represent <code>x</code>.</p><h4 id="solution-6" tabindex="-1"><a class="header-anchor" href="#solution-6"><span>Solution</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">fitsBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// x = x &gt;&gt; (n - 1);</span>
  x <span class="token operator">=</span> x <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">~</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dividepower2" tabindex="-1"><a class="header-anchor" href="#dividepower2"><span><code>dividePower2</code></span></a></h3><h4 id="thinking-7" tabindex="-1"><a class="header-anchor" href="#thinking-7"><span>Thinking</span></a></h4><p>When <code>x</code> is positive, <code>x &gt;&gt; n</code> is the final result. When <code>x</code> is negative, using <code>x + ((1 &lt;&lt; n) - 1)</code> to shift to the right for rounding toward zero.</p><h4 id="solution-7" tabindex="-1"><a class="header-anchor" href="#solution-7"><span>Solution</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">dividePower2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//   if (x &gt;&gt; 31) {</span>
  <span class="token comment">//     // negative</span>
  <span class="token comment">//     x += (1 &lt;&lt; n) - 1;</span>
  <span class="token comment">//   }</span>
  <span class="token comment">//   return x &gt;&gt; n;</span>

  <span class="token comment">//   x += (x &gt;&gt; 31) &amp; ((1 &lt;&lt; n) - 1);</span>
  <span class="token comment">//   return x &gt;&gt; n;</span>

  x <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="negate" tabindex="-1"><a class="header-anchor" href="#negate"><span><code>negate</code></span></a></h3><h4 id="solution-8" tabindex="-1"><a class="header-anchor" href="#solution-8"><span>Solution</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">negate</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">~</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ispositive" tabindex="-1"><a class="header-anchor" href="#ispositive"><span><code>isPositive</code></span></a></h3><h4 id="thinking-8" tabindex="-1"><a class="header-anchor" href="#thinking-8"><span>Thinking</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token operator">=</span> <span class="token punctuation">(</span>sign bit of x is <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">and</span> <span class="token punctuation">(</span>x is not <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="solution-9" tabindex="-1"><a class="header-anchor" href="#solution-9"><span>Solution</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">isPositive</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="islessorequal" tabindex="-1"><a class="header-anchor" href="#islessorequal"><span><code>isLessOrEqual</code></span></a></h3><h4 id="thinking-9" tabindex="-1"><a class="header-anchor" href="#thinking-9"><span>Thinking</span></a></h4><p>when <code>x</code> and <code>y</code> have the same sign, <code>(x &lt;= y) == (y - x &gt;= 0)</code>. When <code>x</code> and <code>y</code> have different signs, <code>y - x</code> may cause overflow. if <code>x</code> is negative, the <code>y</code> must be positive, therefore <code>x &lt;= y</code>.</p><h4 id="solution-10" tabindex="-1"><a class="header-anchor" href="#solution-10"><span>Solution</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">isLessOrEqual</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> x_sign <span class="token operator">=</span> x <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> y_sign <span class="token operator">=</span> y <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> sign_diff <span class="token operator">=</span> x_sign <span class="token operator">^</span> y_sign<span class="token punctuation">;</span>
  <span class="token keyword">int</span> y_minus_x <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> y_less_x <span class="token operator">=</span>
      <span class="token punctuation">(</span>sign_diff <span class="token operator">&amp;</span> <span class="token punctuation">(</span>y_sign <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>x_sign<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>sign_diff<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>y_minus_x <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">!</span>y_less_x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="intlog2" tabindex="-1"><a class="header-anchor" href="#intlog2"><span><code>intLog2</code></span></a></h3><h4 id="thinking-10" tabindex="-1"><a class="header-anchor" href="#thinking-10"><span>Thinking</span></a></h4><p>Use dichotomy. First divide <code>x</code> into 16 by 16, using <code>!!(x &gt;&gt; 16)</code> to see whether there exists <code>1</code> in the first 16 bits. Then recursively, divide <code>x</code> into 8 by 8 to see whether the <code>1</code> reside in the second eight block from the right by <code>!!(x &gt;&gt; 8)</code>. Then, divide into 4, 2, 1.</p><h4 id="solution-11" tabindex="-1"><a class="header-anchor" href="#solution-11"><span>Solution</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">intLog2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
  ans <span class="token operator">=</span> ans <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">+</span> ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ans <span class="token operator">=</span> ans <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">+</span> ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ans <span class="token operator">=</span> ans <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ans <span class="token operator">=</span> ans <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="floatisequal" tabindex="-1"><a class="header-anchor" href="#floatisequal"><span><code>floatIsEqual</code></span></a></h3><h4 id="thinking-11" tabindex="-1"><a class="header-anchor" href="#thinking-11"><span>Thinking</span></a></h4><ol><li>If either argument is <code>NaN</code>, return <code>0</code>.</li><li><code>+0</code> and <code>-0</code> are considered equal.</li></ol><h4 id="solution-12" tabindex="-1"><a class="header-anchor" href="#solution-12"><span>Solution</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">floatIsEqual</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> uf<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> ug<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span> kExpMask <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>       <span class="token comment">// 0b11111111</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span> kFracMask <span class="token operator">=</span> <span class="token number">0x7fffff</span><span class="token punctuation">;</span>  <span class="token comment">// 0b11111111111111111111111</span>
  <span class="token keyword">int</span> f_exp <span class="token operator">=</span> <span class="token punctuation">(</span>uf <span class="token operator">&gt;&gt;</span> <span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> kExpMask<span class="token punctuation">;</span>
  <span class="token keyword">int</span> g_exp <span class="token operator">=</span> <span class="token punctuation">(</span>ug <span class="token operator">&gt;&gt;</span> <span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> kExpMask<span class="token punctuation">;</span>
  <span class="token keyword">int</span> f_frac <span class="token operator">=</span> uf <span class="token operator">&amp;</span> kFracMask<span class="token punctuation">;</span>
  <span class="token keyword">int</span> g_frac <span class="token operator">=</span> ug <span class="token operator">&amp;</span> kFracMask<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f_exp <span class="token operator">==</span> kExpMask<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> f_frac<span class="token punctuation">)</span>  <span class="token comment">// f is NaN</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>g_exp <span class="token operator">==</span> kExpMask<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> g_frac<span class="token punctuation">)</span>  <span class="token comment">// g is NaN</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uf <span class="token operator">&amp;</span> <span class="token number">0x7fffffff</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ug <span class="token operator">&amp;</span> <span class="token number">0x7fffffff</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// (f == 0) &amp;&amp; (g == 0)</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> uf <span class="token operator">==</span> ug<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="floatfloat2int" tabindex="-1"><a class="header-anchor" href="#floatfloat2int"><span><code>floatFloat2Int</code></span></a></h3><h4 id="thinking-12" tabindex="-1"><a class="header-anchor" href="#thinking-12"><span>Thinking</span></a></h4><p>If <code>exp &lt; 0</code>, then <code>f &lt; 1</code>, return <code>0</code>. Else if <code>exp &lt; 31</code>, <code>f</code> is within the range of <code>int</code>. Else, <code>f</code> is out of range.</p><h4 id="solution-13" tabindex="-1"><a class="header-anchor" href="#solution-13"><span>Solution</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">floatFloat2Int</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> uf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span> kExpMask <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>       <span class="token comment">// 0b11111111</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span> kFracMask <span class="token operator">=</span> <span class="token number">0x7fffff</span><span class="token punctuation">;</span>  <span class="token comment">// 0b11111111111111111111111</span>
  <span class="token keyword">int</span> sign <span class="token operator">=</span> uf <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> exp <span class="token operator">=</span> <span class="token punctuation">(</span>uf <span class="token operator">&gt;&gt;</span> <span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> kExpMask<span class="token punctuation">;</span>
  <span class="token keyword">int</span> frac <span class="token operator">=</span> uf <span class="token operator">&amp;</span> kFracMask<span class="token punctuation">;</span>
  exp <span class="token operator">-=</span> <span class="token number">0x7f</span><span class="token punctuation">;</span>
  frac <span class="token operator">|=</span> <span class="token number">0x800000</span><span class="token punctuation">;</span>  <span class="token comment">// 0b100000000000000000000000</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>exp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// close to 0</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>exp <span class="token operator">&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>exp <span class="token operator">&lt;</span> <span class="token number">23</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      frac <span class="token operator">&gt;&gt;=</span> <span class="token number">23</span> <span class="token operator">-</span> exp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      frac <span class="token operator">&lt;&lt;=</span> exp <span class="token operator">-</span> <span class="token number">23</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sign<span class="token punctuation">)</span> frac <span class="token operator">=</span> <span class="token operator">-</span>frac<span class="token punctuation">;</span>
    <span class="token keyword">return</span> frac<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// out of range</span>
    <span class="token keyword">return</span> <span class="token number">0x80000000u</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="floatscale2" tabindex="-1"><a class="header-anchor" href="#floatscale2"><span><code>floatScale2</code></span></a></h3><h4 id="solution-14" tabindex="-1"><a class="header-anchor" href="#solution-14"><span>Solution</span></a></h4><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token function">floatScale2</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> uf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span> kExpMask <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>       <span class="token comment">// 0b11111111</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span> kFracMask <span class="token operator">=</span> <span class="token number">0x7fffff</span><span class="token punctuation">;</span>  <span class="token comment">// 0b11111111111111111111111</span>

  <span class="token keyword">int</span> s <span class="token operator">=</span> uf <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> exp <span class="token operator">=</span> <span class="token punctuation">(</span>uf <span class="token operator">&gt;&gt;</span> <span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> kExpMask<span class="token punctuation">;</span>
  <span class="token keyword">int</span> frac <span class="token operator">=</span> uf <span class="token operator">&amp;</span> kFracMask<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// exp == 000...0</span>
    <span class="token comment">// Denormalized Values</span>
    frac <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>exp <span class="token operator">!=</span> kExpMask<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// (exp != 000...0) &amp;&amp; (exp != 111...1)</span>
    <span class="token comment">// &quot;Normalized&quot; Values</span>
    <span class="token operator">++</span>exp<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// else Special Values</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>s <span class="token operator">&lt;&lt;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>exp <span class="token operator">&lt;&lt;</span> <span class="token number">23</span><span class="token punctuation">)</span> <span class="token operator">|</span> frac<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,75),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(e,[["render",c],["__file","2022-03-20-data-lab.html.vue"]]),k=JSON.parse('{"path":"/2022/course-work/csapp/2022-03-20-data-lab.html","title":"Data Lab: Manipulating Bits","lang":"en-US","frontmatter":{"date":"2022-03-20T00:00:00.000Z","isOriginal":true,"category":["Course Work"],"tag":["Computer Organization and Architecture","Data Lab"],"title":"Data Lab: Manipulating Bits","description":"Results Report bitOr Thinking De Morganâ€™s Law Solution getByte Thinking Solution logicalShift Thinking After logical shift to the right by n, the highest 32 - n bits should be 0...","head":[["meta",{"property":"og:url","content":"https://blog.liblaf.me/2022/course-work/csapp/2022-03-20-data-lab.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"Data Lab: Manipulating Bits"}],["meta",{"property":"og:description","content":"Results Report bitOr Thinking De Morganâ€™s Law Solution getByte Thinking Solution logicalShift Thinking After logical shift to the right by n, the highest 32 - n bits should be 0..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-03T09:57:39.000Z"}],["meta",{"property":"article:author","content":"liblaf"}],["meta",{"property":"article:tag","content":"Computer Organization and Architecture"}],["meta",{"property":"article:tag","content":"Data Lab"}],["meta",{"property":"article:published_time","content":"2022-03-20T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-03T09:57:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Data Lab: Manipulating Bits\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-20T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-03T09:57:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://liblaf.me\\",\\"email\\":\\"i@liblaf.me\\"}]}"]]},"headers":[{"level":2,"title":"Results","slug":"results","link":"#results","children":[]},{"level":2,"title":"Report","slug":"report","link":"#report","children":[{"level":3,"title":"bitOr","slug":"bitor","link":"#bitor","children":[]},{"level":3,"title":"getByte","slug":"getbyte","link":"#getbyte","children":[]},{"level":3,"title":"logicalShift","slug":"logicalshift","link":"#logicalshift","children":[]},{"level":3,"title":"bitReverse","slug":"bitreverse","link":"#bitreverse","children":[]},{"level":3,"title":"bang","slug":"bang","link":"#bang","children":[]},{"level":3,"title":"tmax","slug":"tmax","link":"#tmax","children":[]},{"level":3,"title":"fitsBits","slug":"fitsbits","link":"#fitsbits","children":[]},{"level":3,"title":"dividePower2","slug":"dividepower2","link":"#dividepower2","children":[]},{"level":3,"title":"negate","slug":"negate","link":"#negate","children":[]},{"level":3,"title":"isPositive","slug":"ispositive","link":"#ispositive","children":[]},{"level":3,"title":"isLessOrEqual","slug":"islessorequal","link":"#islessorequal","children":[]},{"level":3,"title":"intLog2","slug":"intlog2","link":"#intlog2","children":[]},{"level":3,"title":"floatIsEqual","slug":"floatisequal","link":"#floatisequal","children":[]},{"level":3,"title":"floatFloat2Int","slug":"floatfloat2int","link":"#floatfloat2int","children":[]},{"level":3,"title":"floatScale2","slug":"floatscale2","link":"#floatscale2","children":[]}]}],"git":{"createdTime":1677217008000,"updatedTime":1709459859000,"contributors":[{"name":"liblaf","email":"30631553+liblaf@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":3.79,"words":1138},"filePathRelative":"2022/course-work/csapp/2022-03-20-data-lab.md","localizedDate":"March 20, 2022","excerpt":"<h2>Results</h2>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>Correctness Results     Perf Results\\nPoints  Rating  Errors  Points  Ops     Puzzle\\n1       1       0       2       4       bitOr\\n2       2       0       2       3       getByte\\n3       3       0       2       6       logicalShift\\n4       4       0       2       40      bitReverse\\n4       4       0       2       6       bang\\n1       1       0       2       2       tmax\\n2       2       0       2       7       fitsBits\\n2       2       0       2       7       dividePower2\\n2       2       0       2       2       negate\\n2       2       0       2       5       isPositive\\n3       3       0       2       14      isLessOrEqual\\n4       4       0       2       27      intLog2\\n2       2       0       2       16      floatIsEqual\\n4       4       0       2       14      floatFloat2Int\\n4       4       0       2       11      floatScale2\\n\\nScore = 70/70 [40/40 Corr + 30/30 Perf] (164 total operators)\\n</code></pre></div>","autoDesc":true}');export{u as comp,k as data};
