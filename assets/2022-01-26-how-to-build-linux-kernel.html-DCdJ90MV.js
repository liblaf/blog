import{_ as s,r as o,o as l,c as r,a as e,b as t,d as a,e as i}from"./app-CoV9NwP4.js";const d={},c=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"center"}},"Environment"),e("th",{style:{"text-align":"center"}},"Version")])],-1),u=e("tr",null,[e("td",{style:{"text-align":"center"}},"Host Processor"),e("td",{style:{"text-align":"center"}},"Intel® Core™ i7-10710U CPU @ 1.10GHz 1.61 GHz")],-1),p=e("tr",null,[e("td",{style:{"text-align":"center"}},"Host OS"),e("td",{style:{"text-align":"center"}},"Windows 11 Pro Education 21H2")],-1),h=e("tr",null,[e("td",{style:{"text-align":"center"}},"VMware® Workstation 16 Pro"),e("td",{style:{"text-align":"center"}},"16.2.2 build-19200509")],-1),g=e("td",{style:{"text-align":"center"}},"Virtual Machine OS",-1),m={style:{"text-align":"center"}},b={href:"https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/focal/ubuntu-20.04.3-desktop-amd64.iso",target:"_blank",rel:"noopener noreferrer"},f=e("h2",{id:"download-the-source-code",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#download-the-source-code"},[e("span",null,"Download the Source Code")])],-1),v={href:"https://www.kernel.org/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-5.13.tar.gz",target:"_blank",rel:"noopener noreferrer"},x=i(`<h2 id="extract-the-source-code" tabindex="-1"><a class="header-anchor" href="#extract-the-source-code"><span>Extract the Source Code</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">--extract</span> <span class="token parameter variable">--gzip</span> <span class="token parameter variable">--file</span> linux-5.13.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="install-required-packages" tabindex="-1"><a class="header-anchor" href="#install-required-packages"><span>Install Required Packages</span></a></h2><p>Install additional packages before building a kernel. To do so, run this command:<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup><sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> build-essential flex bison libelf-dev libssl-dev dwarves zstd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The command we used above installs the following packages:</p><table><thead><tr><th style="text-align:center;"><strong>Package</strong></th><th style="text-align:center;"><strong>Package description</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><code>git</code></td><td style="text-align:center;">Tracks and makes a record of all changes during development in the source code. It also allows reverting the changes.</td></tr><tr><td style="text-align:center;"><code>fakeroot</code></td><td style="text-align:center;">Packaging tool that makes the fake root environment.</td></tr><tr><td style="text-align:center;"><code>build-essential</code></td><td style="text-align:center;">Installs development tools such as C, C++, gcc, and g++.</td></tr><tr><td style="text-align:center;"><code>ncurses-dev</code></td><td style="text-align:center;">Programming library that provides API for the text-based terminals.</td></tr><tr><td style="text-align:center;"><code>xz-utils</code></td><td style="text-align:center;">Provides fast file compression and decompression.</td></tr><tr><td style="text-align:center;"><code>libssl-dev</code></td><td style="text-align:center;">Supports SSL and TSL that encrypt data and make the internet connection secure.</td></tr><tr><td style="text-align:center;"><code>bc</code> (Basic Calculator)</td><td style="text-align:center;">A mathematical scripting language that supports the interactive execution of statements.</td></tr><tr><td style="text-align:center;"><code>flex</code> (Fast Lexical Analyzer Generator)</td><td style="text-align:center;">Generates lexical analyzers that convert characters into tokens.</td></tr><tr><td style="text-align:center;"><code>libelf-dev</code></td><td style="text-align:center;">Issues a shared library for managing ELF files (executable files, core dumps and object code)</td></tr><tr><td style="text-align:center;"><code>bison</code></td><td style="text-align:center;">GNU parser generator that converts grammar description to a C program.</td></tr></tbody></table><h2 id="configure-kernel" tabindex="-1"><a class="header-anchor" href="#configure-kernel"><span>Configure Kernel</span></a></h2><p>The Linux kernel source code comes with the default configuration. However, you can adjust it to your needs. To do so, follow the steps below:</p><p>Navigate to the <code>linux-5.13.0</code>. directory using the <code>cd</code> command:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> linux-5.13.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To make changes to the configuration file, run the <code>make</code> command:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> menuconfig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If no <code>.config</code> file exists, defaults found in <code>/boot/config-$(uname -r)</code> will be used. The command launches several scripts, which then open the configuration menu.</p><p>The configuration menu includes options such as firmware, file system, network, and memory settings. Use the arrows to make a selection or choose <strong>Help</strong> to learn more about the options. When you finish making the changes, select <strong>Save</strong>, and then exit the menu.</p><blockquote><p><strong>Note:</strong> Changing settings for some options can lead to a non-functional kernel. If you are unsure what to change, leave the default settings.</p></blockquote><p>In your kernel configuration file you will find this line:<sup class="footnote-ref"><a href="#footnote3">[3]</a><a class="footnote-anchor" id="footnote-ref3"></a></sup></p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">CONFIG_SYSTEM_TRUSTED_KEYS</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;debian/canonical-certs.pem&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Change it to this:</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">CONFIG_SYSTEM_TRUSTED_KEYS</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Depending on your source structure you might be able to do it via command line. Examples:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>scripts/config <span class="token parameter variable">--disable</span> SYSTEM_TRUSTED_KEYS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>or</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>scripts/config --set-str SYSTEM_TRUSTED_KEYS <span class="token string">&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Another key has been added to the default Canonical kernel configuration since this answer was posted:</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">CONFIG_SYSTEM_REVOCATION_KEYS</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;debian/canonical-revoked-certs.pem&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>So, it also needs to be dealt with for user kernel compiles to complete:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>scripts/config <span class="token parameter variable">--disable</span> SYSTEM_REVOCATION_KEYS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="build-the-kernel" tabindex="-1"><a class="header-anchor" href="#build-the-kernel"><span>Build the Kernel</span></a></h2><p>Start building the kernel by running the following command:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> <span class="token parameter variable">--jobs</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>nproc <span class="token parameter variable">--all</span><span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>LLVM has substitutes for GNU binutils utilities. Kbuild supports <code>LLVM=1</code> to enable them.<sup class="footnote-ref"><a href="#footnote4">[4]</a><a class="footnote-anchor" id="footnote-ref4"></a></sup></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> <span class="token assign-left variable">LLVM</span><span class="token operator">=</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>They can be enabled individually. The full list of the parameters:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">make</span> <span class="token assign-left variable">CC</span><span class="token operator">=</span>clang-12 <span class="token assign-left variable">LD</span><span class="token operator">=</span>ld.lld-12 <span class="token assign-left variable">AR</span><span class="token operator">=</span>llvm-ar-12 <span class="token assign-left variable">NM</span><span class="token operator">=</span>llvm-nm-12 <span class="token assign-left variable">STRIP</span><span class="token operator">=</span>llvm-strip-12 <span class="token punctuation">\\</span>
  <span class="token assign-left variable">OBJCOPY</span><span class="token operator">=</span>llvm-objcopy-12 <span class="token assign-left variable">OBJDUMP</span><span class="token operator">=</span>llvm-objdump-12 <span class="token assign-left variable">READELF</span><span class="token operator">=</span>llvm-readelf-12 <span class="token punctuation">\\</span>
  <span class="token assign-left variable">HOSTCC</span><span class="token operator">=</span>clang-12 <span class="token assign-left variable">HOSTCXX</span><span class="token operator">=</span>clang++-12 <span class="token assign-left variable">HOSTAR</span><span class="token operator">=</span>llvm-ar-12 <span class="token assign-left variable">HOSTLD</span><span class="token operator">=</span>ld.lld-12
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>Note:</strong> The version of kernel and compiler matters!!! If you cannot pass compilation, try another release of kernel or compiler.</p></blockquote><p>The process of building and compiling the Linux kernel takes some time to complete.</p><p>The terminal lists all Linux kernel components: memory management, hardware device drivers, filesystem drivers, network drivers, and process management.</p><p>Install the required modules with this command:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">make</span> modules_install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Finally, install the kernel by typing:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="change-the-default-boot-kernel" tabindex="-1"><a class="header-anchor" href="#change-the-default-boot-kernel"><span>Change the Default Boot Kernel</span></a></h2><p>You may press <code>Esc</code> to enter the boot menu when staring up, but that’s a bit troublesome. Instead, use the following commands to list GRUB’s menu entries:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">awk</span> -F<span class="token punctuation">\\</span>&#39; <span class="token string">&#39;$1==&quot;menuentry &quot; || $1==&quot;submenu &quot; {print i++ &quot; : &quot; $2}; /\\tmenuentry / {print &quot;\\t&quot; i-1&quot;&gt;&quot;j++ &quot; : &quot; $2};&#39;</span> /boot/grub/grub.cfg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>For example, I got the output:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>0 : Ubuntu
1 : Advanced options for Ubuntu
        1&gt;0 : Ubuntu, with Linux 5.13.0-30-generic
        1&gt;1 : Ubuntu, with Linux 5.13.0-30-generic (recovery mode)
        1&gt;2 : Ubuntu, with Linux 5.13.0
        1&gt;3 : Ubuntu, with Linux 5.13.0 (recovery mode)
        1&gt;4 : Ubuntu, with Linux 5.11.0-27-generic
        1&gt;5 : Ubuntu, with Linux 5.11.0-27-generic (recovery mode)
2 : Memory test (memtest86+)
3 : Memory test (memtest86+, serial console 115200)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For me, the desired default kernel to boot from is <code>1&gt;2 : Ubuntu, with Linux 5.13.0</code>. Open the <code>/etc/default/grub</code> file and change the value of <code>GRUB_DEFAULT</code> to <code>&quot;1&gt;2&quot;</code>, like this:<sup class="footnote-ref"><a href="#footnote5">[5]</a><a class="footnote-anchor" id="footnote-ref5"></a></sup></p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">GRUB_DEFAULT</span><span class="token punctuation">=</span><span class="token value attr-value">&quot;1&gt;2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>1</code> in <code>1&gt;2</code> indicates the <strong>second</strong> entry of the main menu.</li><li><code>2</code> in <code>1&gt;2</code> indicates the <strong>third</strong> entry of the submenu.</li><li>There is <strong>no space</strong> before and after the greater-than sign (<code>&gt;</code>) in <code>1&gt;2</code>.</li><li>Use a set of quotation marks to enclose <code>1&gt;2</code>.</li></ul><p>Run <code>update-grub</code> afterwards to update <code>/boot/grub/grub.cfg</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">update-grub</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you stuck on <code>Loading inital ramdisk...</code> after reboot, try adding <code>IUCODE_TOOL_INITRAMFS=no</code> to <code>/etc/default/intel-microcode</code> and then re-running <code>update-initramfs -u</code> to remove the microcode bits from the <code>initramfs</code> image.<sup class="footnote-ref"><a href="#footnote6">[6]</a><a class="footnote-anchor" id="footnote-ref6"></a></sup></p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2><hr class="footnotes-sep">`,55),_={class:"footnotes"},y={class:"footnotes-list"},w={id:"footnote1",class:"footnote-item"},T={href:"https://phoenixnap.com/kb/build-linux-kernel",target:"_blank",rel:"noopener noreferrer"},S=e("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1),L={id:"footnote2",class:"footnote-item"},C={href:"https://stackoverflow.com/questions/61657707/btf-tmp-vmlinux-btf-pahole-pahole-is-not-available",target:"_blank",rel:"noopener noreferrer"},q=e("a",{href:"#footnote-ref2",class:"footnote-backref"},"↩︎",-1),E={id:"footnote3",class:"footnote-item"},U={href:"https://askubuntu.com/questions/1329538/compiling-the-kernel-5-11-11",target:"_blank",rel:"noopener noreferrer"},I=e("a",{href:"#footnote-ref3",class:"footnote-backref"},"↩︎",-1),D={id:"footnote4",class:"footnote-item"},O={href:"https://www.kernel.org/doc/html/v5.13/kbuild/llvm.html",target:"_blank",rel:"noopener noreferrer"},B=e("a",{href:"#footnote-ref4",class:"footnote-backref"},"↩︎",-1),H={id:"footnote5",class:"footnote-item"},K={href:"https://support.huaweicloud.com/intl/en-us/trouble-ecs/ecs_trouble_0327.html",target:"_blank",rel:"noopener noreferrer"},P=e("a",{href:"#footnote-ref5",class:"footnote-backref"},"↩︎",-1),V={id:"footnote6",class:"footnote-item"},M={href:"https://askubuntu.com/questions/1145535/stuck-on-loading-initial-ramdisk-after-upgrading",target:"_blank",rel:"noopener noreferrer"},R=e("a",{href:"#footnote-ref6",class:"footnote-backref"},"↩︎",-1);function A(N,z){const n=o("ExternalLinkIcon");return l(),r("div",null,[e("table",null,[c,e("tbody",null,[u,p,h,e("tr",null,[g,e("td",m,[e("a",b,[t("Ubuntu 20.04.3 (amd64, Desktop LiveDVD) (tsinghua.edu.cn)"),a(n)])])])])]),f,e("p",null,[t("Visit the "),e("a",v,[t("official kernel website"),a(n)]),t(" and download the "),e("a",k,[t("linux-5.13.tar.gz (kernel.org)"),a(n)]),t(". The downloaded file contains a compressed source code.")]),x,e("section",_,[e("ol",y,[e("li",w,[e("p",null,[e("a",T,[t("How To Build Linux Kernel {Step-By-Step} | phoenixNAP KB"),a(n)]),t(),S])]),e("li",L,[e("p",null,[e("a",C,[t("compilation - BTF: .tmp_vmlinux.btf: pahole (pahole) is not available - Stack Overflow"),a(n)]),t(),q])]),e("li",E,[e("p",null,[e("a",U,[t("Compiling the kernel 5.11.11 - Ask Ubuntu"),a(n)]),t(),I])]),e("li",D,[e("p",null,[e("a",O,[t("Building Linux with Clang/LLVM — The Linux Kernel documentation"),a(n)]),t(),B])]),e("li",H,[e("p",null,[e("a",K,[t("How Do I Change the Default Boot Kernel in Ubuntu?_Elastic Cloud Server_Troubleshooting_Linux Issues_HUAWEI CLOUD"),a(n)]),t(),P])]),e("li",V,[e("p",null,[e("a",M,[t("boot - Stuck on “Loading initial ramdisk…” after upgrading - Ask Ubuntu"),a(n)]),t(),R])])])])])}const G=s(d,[["render",A],["__file","2022-01-26-how-to-build-linux-kernel.html.vue"]]),Y=JSON.parse('{"path":"/2022/research/idea/2022-01-26-how-to-build-linux-kernel.html","title":"How to Build Linux Kernel","lang":"en-US","frontmatter":{"date":"2022-01-26T00:00:00.000Z","isOriginal":true,"category":["Research"],"tag":["C/C++","Clang","LLVM","Linux Kernel"],"title":"How to Build Linux Kernel","description":"Download the Source Code Visit the official kernel website and download the linux-5.13.tar.gz (kernel.org). The downloaded file contains a compressed source code. Extract the So...","head":[["meta",{"property":"og:url","content":"https://blog.liblaf.me/2022/research/idea/2022-01-26-how-to-build-linux-kernel.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"How to Build Linux Kernel"}],["meta",{"property":"og:description","content":"Download the Source Code Visit the official kernel website and download the linux-5.13.tar.gz (kernel.org). The downloaded file contains a compressed source code. Extract the So..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-03T09:57:39.000Z"}],["meta",{"property":"article:author","content":"liblaf"}],["meta",{"property":"article:tag","content":"C/C++"}],["meta",{"property":"article:tag","content":"Clang"}],["meta",{"property":"article:tag","content":"LLVM"}],["meta",{"property":"article:tag","content":"Linux Kernel"}],["meta",{"property":"article:published_time","content":"2022-01-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-03T09:57:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"How to Build Linux Kernel\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-03T09:57:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://liblaf.me\\",\\"email\\":\\"i@liblaf.me\\"}]}"]]},"headers":[{"level":2,"title":"Download the Source Code","slug":"download-the-source-code","link":"#download-the-source-code","children":[]},{"level":2,"title":"Extract the Source Code","slug":"extract-the-source-code","link":"#extract-the-source-code","children":[]},{"level":2,"title":"Install Required Packages","slug":"install-required-packages","link":"#install-required-packages","children":[]},{"level":2,"title":"Configure Kernel","slug":"configure-kernel","link":"#configure-kernel","children":[]},{"level":2,"title":"Build the Kernel","slug":"build-the-kernel","link":"#build-the-kernel","children":[]},{"level":2,"title":"Change the Default Boot Kernel","slug":"change-the-default-boot-kernel","link":"#change-the-default-boot-kernel","children":[]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"createdTime":1677217008000,"updatedTime":1709459859000,"contributors":[{"name":"liblaf","email":"30631553+liblaf@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":3.45,"words":1036},"filePathRelative":"2022/research/idea/2022-01-26-how-to-build-linux-kernel.md","localizedDate":"January 26, 2022","excerpt":"<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:center\\">Environment</th>\\n<th style=\\"text-align:center\\">Version</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:center\\">Host Processor</td>\\n<td style=\\"text-align:center\\">Intel® Core™ i7-10710U CPU @ 1.10GHz 1.61 GHz</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Host OS</td>\\n<td style=\\"text-align:center\\">Windows 11 Pro Education 21H2</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">VMware® Workstation 16 Pro</td>\\n<td style=\\"text-align:center\\">16.2.2 build-19200509</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">Virtual Machine OS</td>\\n<td style=\\"text-align:center\\"><a href=\\"https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/focal/ubuntu-20.04.3-desktop-amd64.iso\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Ubuntu 20.04.3 (amd64, Desktop LiveDVD) (tsinghua.edu.cn)</a></td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{G as comp,Y as data};
