import{_ as n,o as s,c as a,e}from"./app-CoV9NwP4.js";const t={},o=e(`<h2 id="timekeeping" tabindex="-1"><a class="header-anchor" href="#timekeeping"><span>Timekeeping</span></a></h2><h6 id="linux-param-h" tabindex="-1"><a class="header-anchor" href="#linux-param-h"><span>&lt;linux/param.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>HZ
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The <code>HZ</code> symbol specifies the number of clock ticks generated per second.</p><h6 id="linux-jiffies-h" tabindex="-1"><a class="header-anchor" href="#linux-jiffies-h"><span>&lt;linux/jiffies.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> jiffies
u64 jiffies_64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>jiffies_64</code> variable is incremented once for each clock tick; thus, it’s incremented <code>HZ</code> times per second. Kernel code most often refers to <code>jiffies</code>, which is the same as <code>jiffies_64</code> on 64-bit platforms and the least significant half of it on 32-bit platforms.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">time_after</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">time_before</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">time_after_eq</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">time_before_eq</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>These Boolean expressions compare jiffies in a safe way, without problems in case of counter overflow and without the need to access <code>jiffies_64</code>.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>u64 <span class="token function">get_jiffies_64</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Retrieves <code>jiffies_64</code> without race conditions.</p><h6 id="linux-time-h" tabindex="-1"><a class="header-anchor" href="#linux-time-h"><span>&lt;linux/time.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">timespec_to_jiffies</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">timespec</span> <span class="token operator">*</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">jiffies_to_timespec</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> jiffies<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">timespec</span> <span class="token operator">*</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">timeval_to_jiffies</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token operator">*</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">jiffies_to_timeval</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> jiffies<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token operator">*</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Converts time representations between jiffies and other representations.</p><h6 id="asm-msr-h" tabindex="-1"><a class="header-anchor" href="#asm-msr-h"><span>&lt;asm/msr.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">rdtsc</span><span class="token punctuation">(</span>low32<span class="token punctuation">,</span>high32<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">rdtscl</span><span class="token punctuation">(</span>low32<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">rdtscll</span><span class="token punctuation">(</span>var64<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>x86-specific macros to read the timestamp counter. They read it as two 32-bit halves, read only the lower half, or read all of it into a <code>long long</code> variable.</p><h6 id="linux-timex-h" tabindex="-1"><a class="header-anchor" href="#linux-timex-h"><span>&lt;linux/timex.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">cycles_t</span> <span class="token function">get_cycles</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Returns the timestamp counter in a platform-independent way. If the CPU offers no timestamp feature, <code>0</code> is returned.</p><h6 id="linux-time-h-1" tabindex="-1"><a class="header-anchor" href="#linux-time-h-1"><span>&lt;linux/time.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">mktime</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> mon<span class="token punctuation">,</span> day<span class="token punctuation">,</span> h<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Returns the number of seconds since the Epoch, based on the six <code>unsigned int</code> arguments.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">do_gettimeofday</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token operator">*</span>tv<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Returns the current time, as seconds and microseconds since the Epoch, with the best resolution the hardware can offer. On most platforms the resolution is one microsecond or better, although some platforms offer only jiffies resolution.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">timespec</span> <span class="token function">current_kernel_time</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Returns the current time with the resolution of one jiffy.</p><h2 id="delays" tabindex="-1"><a class="header-anchor" href="#delays"><span>Delays</span></a></h2><h6 id="linux-wait-h" tabindex="-1"><a class="header-anchor" href="#linux-wait-h"><span>&lt;linux/wait.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">long</span> <span class="token function">wait_event_interruptible_timeout</span><span class="token punctuation">(</span><span class="token class-name">wait_queue_head_t</span> <span class="token operator">*</span>q<span class="token punctuation">,</span> condition<span class="token punctuation">,</span> <span class="token keyword">signed</span> <span class="token keyword">long</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Puts the current process to sleep on the wait queue, installing a timeout value expressed in jiffies. Use <code>schedule_timeout</code> (below) for non-interruptible sleeps.</p><h6 id="linux-sched-h" tabindex="-1"><a class="header-anchor" href="#linux-sched-h"><span>&lt;linux/sched.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">signed</span> <span class="token keyword">long</span> <span class="token function">schedule_timeout</span><span class="token punctuation">(</span><span class="token keyword">signed</span> <span class="token keyword">long</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Calls the scheduler after ensuring that the current process is awakened at timeout expiration. The caller must invoke <code>set_current_state</code> first to put itself in an interruptible or non-interruptible sleep state.</p><h6 id="linux-delay-h" tabindex="-1"><a class="header-anchor" href="#linux-delay-h"><span>&lt;linux/delay.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">ndelay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> nsecs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">udelay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> usecs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">mdelay</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> msecs<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Introduces delays of an integer number of nanoseconds, microseconds, and milliseconds. The delay achieved is at least the requested value, but it can be more. The argument to each function must not exceed a platform-specific limit (usually a few thousands).</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">msleep</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> millisecs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">msleep_interruptible</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> millisecs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">ssleep</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Puts the process to sleep for the given number of milliseconds (or seconds, in the case of <code>ssleep</code>).</p><h2 id="kernel-timers" tabindex="-1"><a class="header-anchor" href="#kernel-timers"><span>Kernel Timers</span></a></h2><h6 id="asm-hardirq-h" tabindex="-1"><a class="header-anchor" href="#asm-hardirq-h"><span>&lt;asm/hardirq.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">in_interrupt</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">in_atomic</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Returns a Boolean value telling whether the calling code is executing in interrupt context or atomic context. Interrupt context is outside of a process context, either during hardware or software interrupt processing. Atomic context is when you can’t schedule either an interrupt context or a process’s context with a spinlock held.</p><h6 id="linux-timer-h" tabindex="-1"><a class="header-anchor" href="#linux-timer-h"><span>&lt;linux/timer.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">init_timer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">timer_list</span> <span class="token operator">*</span> timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">timer_list</span> <span class="token function">TIMER_INITIALIZER</span><span class="token punctuation">(</span>_function<span class="token punctuation">,</span> _expires<span class="token punctuation">,</span> _data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>This function and the static declaration of the timer structure are the two ways to initialize a <code>timer_list</code> data structure.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">add_timer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">timer_list</span> <span class="token operator">*</span> timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Registers the timer structure to run on the current CPU.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">mod_timer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">timer_list</span> <span class="token operator">*</span>timer<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> expires<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Changes the expiration time of an already scheduled timer structure. It can also act as an alternative to <code>add_timer</code>.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">timer_pending</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">timer_list</span> <span class="token operator">*</span> timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Macro that returns a Boolean value stating whether the timer structure is already registered to run.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">del_timer</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">timer_list</span> <span class="token operator">*</span> timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">del_timer_sync</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">timer_list</span> <span class="token operator">*</span> timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Removes a timer from the list of active timers. The latter function ensures that the timer is not currently running on another CPU.</p><h2 id="tasklets" tabindex="-1"><a class="header-anchor" href="#tasklets"><span>Tasklets</span></a></h2><h6 id="linux-interrupt-h" tabindex="-1"><a class="header-anchor" href="#linux-interrupt-h"><span>&lt;linux/interrupt.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">DECLARE_TASKLET</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> func<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">DECLARE_TASKLET_DISABLED</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> func<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">tasklet_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tasklet_struct</span> <span class="token operator">*</span>t<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The first two macros declare a tasklet structure, while the <code>tasklet_init</code> function initializes a tasklet structure that has been obtained by allocation or other means. The second <code>DECLARE</code> macro marks the tasklet as disabled.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">tasklet_disable</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tasklet_struct</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">tasklet_disable_nosync</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tasklet_struct</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">tasklet_enable</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tasklet_struct</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Disables and reenables a tasklet. Each <code>disable</code> must be matched with an <code>enable</code> (you can disable the tasklet even if it’s already disabled). The function <code>tasklet_disable</code> waits for the tasklet to terminate if it is running on another CPU. The <code>nosync</code> version doesn’t take this extra step.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">tasklet_schedule</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tasklet_struct</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">tasklet_hi_schedule</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tasklet_struct</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Schedules a tasklet to run, either as a “normal” tasklet or a high-priority one. When soft interrupts are executed, high-priority tasklets are dealt with first, while normal tasklets run last.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">tasklet_kill</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">tasklet_struct</span> <span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Removes the tasklet from the list of active ones, if it’s scheduled to run. Like <code>tasklet_disable</code>, the function may block on SMP systems waiting for the tasklet to terminate if it’s currently running on another CPU.</p><h2 id="workqueues" tabindex="-1"><a class="header-anchor" href="#workqueues"><span>Workqueues</span></a></h2><h6 id="linux-workqueue-h" tabindex="-1"><a class="header-anchor" href="#linux-workqueue-h"><span>&lt;linux/workqueue.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">workqueue_struct</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">work_struct</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The structures representing a workqueue and a work entry, respectively.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">workqueue_struct</span> <span class="token operator">*</span><span class="token function">create_workqueue</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">workqueue_struct</span> <span class="token operator">*</span><span class="token function">create_singlethread_workqueue</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">destroy_workqueue</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workqueue_struct</span> <span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for creating and destroying workqueues. A call to <code>create_workqueue</code> creates a queue with a worker thread on each processor in the system; instead, <code>create_singlethread_workqueue</code> creates a workqueue with a single worker process.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">DECLARE_WORK</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>function<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">INIT_WORK</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">work_struct</span> <span class="token operator">*</span>work<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>function<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">PREPARE_WORK</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">work_struct</span> <span class="token operator">*</span>work<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>function<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Macros that declare and initialize workqueue entries.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">queue_work</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workqueue_struct</span> <span class="token operator">*</span>queue<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">work_struct</span> <span class="token operator">*</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">queue_delayed_work</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workqueue_struct</span> <span class="token operator">*</span>queue<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">work_struct</span> <span class="token operator">*</span>work<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions that queue work for execution from a workqueue.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">cancel_delayed_work</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">work_struct</span> <span class="token operator">*</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">flush_workqueue</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">workqueue_struct</span> <span class="token operator">*</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Use <code>cancel_delayed_work</code> to remove an entry from a workqueue; <code>flush_workqueue</code> ensures that no workqueue entries are running anywhere in the system.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">schedule_work</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">work_struct</span> <span class="token operator">*</span>work<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">schedule_delayed_work</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">work_struct</span> <span class="token operator">*</span>work<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">flush_scheduled_work</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for working with the shared workqueue.</p>`,78),c=[o];function p(i,l){return s(),a("div",null,c)}const u=n(t,[["render",p],["__file","2022-05-13-linux-device-drivers-time-delays-and-deferred-work.html.vue"]]),d=JSON.parse('{"path":"/2022/research/notes/linux-device-drivers/2022-05-13-linux-device-drivers-time-delays-and-deferred-work.html","title":"Linux Device Drivers | Time, Delays, and Deferred Work","lang":"en-US","frontmatter":{"date":"2022-05-13T00:00:00.000Z","isOriginal":false,"category":["Research"],"tag":["C/C++","Linux","Linux Device Drivers","Linux Kernel"],"title":"Linux Device Drivers | Time, Delays, and Deferred Work","description":"Timekeeping <linux/param.h> The HZ symbol specifies the number of clock ticks generated per second. <linux/jiffies.h> The jiffies_64 variable is incremented once for each clock ...","head":[["meta",{"property":"og:url","content":"https://blog.liblaf.me/2022/research/notes/linux-device-drivers/2022-05-13-linux-device-drivers-time-delays-and-deferred-work.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"Linux Device Drivers | Time, Delays, and Deferred Work"}],["meta",{"property":"og:description","content":"Timekeeping <linux/param.h> The HZ symbol specifies the number of clock ticks generated per second. <linux/jiffies.h> The jiffies_64 variable is incremented once for each clock ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-03T09:57:39.000Z"}],["meta",{"property":"article:author","content":"liblaf"}],["meta",{"property":"article:tag","content":"C/C++"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:tag","content":"Linux Device Drivers"}],["meta",{"property":"article:tag","content":"Linux Kernel"}],["meta",{"property":"article:published_time","content":"2022-05-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-03T09:57:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux Device Drivers | Time, Delays, and Deferred Work\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-03T09:57:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://liblaf.me\\",\\"email\\":\\"i@liblaf.me\\"}]}"]]},"headers":[{"level":2,"title":"Timekeeping","slug":"timekeeping","link":"#timekeeping","children":[]},{"level":2,"title":"Delays","slug":"delays","link":"#delays","children":[]},{"level":2,"title":"Kernel Timers","slug":"kernel-timers","link":"#kernel-timers","children":[]},{"level":2,"title":"Tasklets","slug":"tasklets","link":"#tasklets","children":[]},{"level":2,"title":"Workqueues","slug":"workqueues","link":"#workqueues","children":[]}],"git":{"createdTime":1677217008000,"updatedTime":1709459859000,"contributors":[{"name":"liblaf","email":"30631553+liblaf@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":3.68,"words":1104},"filePathRelative":"2022/research/notes/linux-device-drivers/2022-05-13-linux-device-drivers-time-delays-and-deferred-work.md","localizedDate":"May 13, 2022","excerpt":"<h2>Timekeeping</h2>\\n<h6>&lt;linux/param.h&gt;</h6>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code>HZ\\n</code></pre></div><p>The <code>HZ</code> symbol specifies the number of clock ticks generated per second.</p>\\n<h6>&lt;linux/jiffies.h&gt;</h6>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token keyword\\">volatile</span> <span class=\\"token keyword\\">unsigned</span> <span class=\\"token keyword\\">long</span> jiffies\\nu64 jiffies_64\\n</code></pre></div>","autoDesc":true}');export{u as comp,d as data};
