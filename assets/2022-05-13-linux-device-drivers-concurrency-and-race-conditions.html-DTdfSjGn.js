import{_ as n,o as s,c as a,e}from"./app-CoV9NwP4.js";const t={},o=e(`<h6 id="asm-semaphore-h-not-found" tabindex="-1"><a class="header-anchor" href="#asm-semaphore-h-not-found"><span>&lt;asm/semaphore.h&gt; (not found)</span></a></h6><p>The include file that defines semaphores and the operations on them.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">DECLARE_MUTEX</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">DECLARE_MUTEX_LOCKED</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Two macros for declaring and initializing a semaphore used in mutual exclusion mode.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">init_MUTEX</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">init_MUTEX_LOCKED</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>These two functions can be used to initialize a semaphore at runtime.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">down_interruptible</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">down_trylock</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lock and unlock a semaphore. <code>down</code> puts the calling process into an uninterruptible sleep if need be; <code>down_interruptible</code>, instead, can be interrupted by a signal. <code>down_trylock</code> does not sleep; instead, it returns immediately if the semaphore is unavailable. Code that locks a semaphore must eventually unlock it with <code>up</code>.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span><span class="token punctuation">;</span>
<span class="token function">init_rwsem</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The reader/writer version of semaphores and the function that initializes it.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">down_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">down_read_trylock</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">up_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for obtaining and releasing read access to a reader/writer semaphore.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">down_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">down_write_trylock</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">up_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">downgrade_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for managing write access to a reader/writer semaphore.</p><h6 id="linux-completion-h" tabindex="-1"><a class="header-anchor" href="#linux-completion-h"><span>&lt;linux/completion.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">DECLARE_COMPLETION</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">init_completion</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">completion</span> <span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">INIT_COMPLETION</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">completion</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The include file describing the Linux completion mechanism, and the normal methods for initializing completions. <code>INIT_COMPLETION</code> should be used only to reinitialize a completion that has been previously used.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">wait_for_completion</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">completion</span> <span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Wait for a completion event to be signaled.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">complete</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">completion</span> <span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">complete_all</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">completion</span> <span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Signal a completion event. <code>complete</code> wakes, at most, one waiting thread, while <code>complete_all</code> wakes all waiters.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">complete_and_exit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">completion</span> <span class="token operator">*</span>c<span class="token punctuation">,</span> <span class="token keyword">long</span> retval<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Signals a completion event by calling <code>complete</code> and calls <code>exit</code> for the current thread.</p><h6 id="linux-spinlock-h" tabindex="-1"><a class="header-anchor" href="#linux-spinlock-h"><span>&lt;linux/spinlock.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">spinlock_t</span> lock <span class="token operator">=</span> SPIN_LOCK_UNLOCKED<span class="token punctuation">;</span>
<span class="token function">spin_lock_init</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The include file defining the spinlock interface and the two ways of initializing locks.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">spin_lock</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">spin_lock_irqsave</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">spin_lock_irq</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">spin_lock_bh</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The various ways of locking a spinlock and, possibly, disabling interrupts.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">spin_trylock</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">spin_trylock_bh</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Non-spinning versions of the above functions; these return 0 in case of failure to obtain the lock, nonzero otherwise.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">spin_unlock</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">spin_unlock_irqrestore</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">spin_unlock_irq</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">spin_unlock_bh</span><span class="token punctuation">(</span><span class="token class-name">spinlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The corresponding ways of releasing a spinlock.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">rwlock_t</span> lock <span class="token operator">=</span> RW_LOCK_UNLOCKED<span class="token punctuation">;</span>
<span class="token function">rwlock_init</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The two ways of initializing reader/writer locks.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">read_lock</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">read_lock_irqsave</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">read_lock_irq</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">read_lock_bh</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for obtaining read access to a reader/writer lock.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">read_unlock</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">read_unlock_irqrestore</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">read_unlock_irq</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">read_unlock_bh</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for releasing read access to a reader/writer spinlock.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">write_lock</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">write_lock_irqsave</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">write_lock_irq</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">write_lock_bh</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for obtaining write access to a reader/writer lock.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">write_unlock</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">write_unlock_irqrestore</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">write_unlock_irq</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">write_unlock_bh</span><span class="token punctuation">(</span><span class="token class-name">rwlock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for releasing write access to a reader/writer spinlock.</p><h6 id="linux-rwsem-h" tabindex="-1"><a class="header-anchor" href="#linux-rwsem-h"><span>&lt;linux/rwsem.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span><span class="token punctuation">;</span>
<span class="token function">init_rwsem</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The reader/writer version of semaphores and the function that initializes it.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">down_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">down_read_trylock</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">up_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for obtaining and releasing read access to a reader/writer semaphore.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">down_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">down_write_trylock</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">up_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">downgrade_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">rw_semaphore</span> <span class="token operator">*</span>sem<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for managing write access to a reader/writer semaphore.</p>`,49),p=[o];function c(l,i){return s(),a("div",null,p)}const u=n(t,[["render",c],["__file","2022-05-13-linux-device-drivers-concurrency-and-race-conditions.html.vue"]]),d=JSON.parse('{"path":"/2022/research/notes/linux-device-drivers/2022-05-13-linux-device-drivers-concurrency-and-race-conditions.html","title":"Linux Device Drivers | Concurrency and Race Conditions","lang":"en-US","frontmatter":{"date":"2022-05-13T00:00:00.000Z","isOriginal":false,"category":["Research"],"tag":["C/C++","Linux","Linux Device Drivers","Linux Kernel"],"title":"Linux Device Drivers | Concurrency and Race Conditions","description":"<asm/semaphore.h> (not found) The include file that defines semaphores and the operations on them. Two macros for declaring and initializing a semaphore used in mutual exclusion...","head":[["meta",{"property":"og:url","content":"https://blog.liblaf.me/2022/research/notes/linux-device-drivers/2022-05-13-linux-device-drivers-concurrency-and-race-conditions.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"Linux Device Drivers | Concurrency and Race Conditions"}],["meta",{"property":"og:description","content":"<asm/semaphore.h> (not found) The include file that defines semaphores and the operations on them. Two macros for declaring and initializing a semaphore used in mutual exclusion..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-03T09:57:39.000Z"}],["meta",{"property":"article:author","content":"liblaf"}],["meta",{"property":"article:tag","content":"C/C++"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:tag","content":"Linux Device Drivers"}],["meta",{"property":"article:tag","content":"Linux Kernel"}],["meta",{"property":"article:published_time","content":"2022-05-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-03T09:57:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux Device Drivers | Concurrency and Race Conditions\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-03T09:57:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://liblaf.me\\",\\"email\\":\\"i@liblaf.me\\"}]}"]]},"headers":[],"git":{"createdTime":1677217008000,"updatedTime":1709459859000,"contributors":[{"name":"liblaf","email":"30631553+liblaf@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":2.13,"words":640},"filePathRelative":"2022/research/notes/linux-device-drivers/2022-05-13-linux-device-drivers-concurrency-and-race-conditions.md","localizedDate":"May 13, 2022","excerpt":"<h6>&lt;asm/semaphore.h&gt; (not found)</h6>\\n<p>The include file that defines semaphores and the operations on them.</p>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token function\\">DECLARE_MUTEX</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token function\\">DECLARE_MUTEX_LOCKED</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{u as comp,d as data};
