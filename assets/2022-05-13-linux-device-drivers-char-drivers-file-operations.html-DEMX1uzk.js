import{_ as s,o as a,c as n,e}from"./app-CoV9NwP4.js";const t={},o=e(`<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/fs.h&gt;</span></span>
<span class="token keyword">struct</span> <span class="token class-name">file_operations</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="owner" tabindex="-1"><a class="header-anchor" href="#owner"><span>owner</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">module</span> <span class="token operator">*</span>owner
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The first <code>file_operations</code> field is not an operation at all; it is a pointer to the module that “owns” the structure. This field is used to prevent the module from being unloaded while its operations are in use. Almost all the time, it is simply initialized to <code>THIS_MODULE</code>, a macro defined in <code>&lt;linux/module.h&gt;</code>.</p><h2 id="llseek" tabindex="-1"><a class="header-anchor" href="#llseek"><span>llseek</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">loff_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>llseek<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">loff_t</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The <code>llseek</code> method is used to change the current read/write position in a file, and the new position is returned as a (positive) return value. The <code>loff_t</code> parameter is a “long offset” and is at least 64 bits wide even on 32-bit platforms. Errors are signaled by a negative return value. If this function pointer is <code>NULL</code>, seek calls will modify the position counter in the <code>file</code> structure (described in the section “The file Structure”) in potentially unpredictable ways.</p><h2 id="read" tabindex="-1"><a class="header-anchor" href="#read"><span>read</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>read<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Used to retrieve data from the device. A null pointer in this position causes the read system call to fail with <code>-EINVAL</code> (“Invalid argument”). A nonnegative return value represents the number of bytes successfully read (the return value is a “signed size” type, usually the native integer type for the target platform).</p><h2 id="aio-read" tabindex="-1"><a class="header-anchor" href="#aio-read"><span>aio_read</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>aio_read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kiocb</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">,</span> <span class="token class-name">loff_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Initiates an asynchronous read — a read operation that might not complete before the function returns. If this method is <code>NULL</code>, all operations will be processed (synchronously) by read instead.</p><h2 id="write" tabindex="-1"><a class="header-anchor" href="#write"><span>write</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>write<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Sends data to the device. If <code>NULL</code>, <code>-EINVAL</code> is returned to the program calling the write system call. The return value, if nonnegative, represents the number of bytes successfully written.</p><h2 id="aio-write" tabindex="-1"><a class="header-anchor" href="#aio-write"><span>aio_write</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>aio_write<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kiocb</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Initiates an asynchronous write operation on the device.</p><h2 id="readdir" tabindex="-1"><a class="header-anchor" href="#readdir"><span>readdir</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>readdir<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">filldir_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This field should be <code>NULL</code> for device files; it is used for reading directories and is useful only for filesystems.</p><h2 id="poll" tabindex="-1"><a class="header-anchor" href="#poll"><span>poll</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>poll<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">poll_table_struct</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The <code>poll</code> method is the back end of three system calls: <code>poll</code>, <code>epoll</code>, and <code>select</code>, all of which are used to query whether a read or write to one or more file descriptors would block. The poll method should return a bit mask indicating whether nonblocking reads or writes are possible, and, possibly, provide the kernel with information that can be used to put the calling process to sleep until I/O becomes possible. If a driver leaves its poll method <code>NULL</code>, the device is assumed to be both readable and writable without blocking.</p><h2 id="ioctl" tabindex="-1"><a class="header-anchor" href="#ioctl"><span>ioctl</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>ioctl<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The <code>ioctl</code> system call offers a way to issue device-specific commands (such as formatting a track of a floppy disk, which is neither reading nor writing). Additionally, a few <code>ioctl</code> commands are recognized by the kernel without referring to the <code>fops</code> table. If the device doesn’t provide an <code>ioctl</code> method, the system call returns an error for any request that isn’t predefined (<code>-ENOTTY</code>, “No such <code>ioctl</code> for device”).</p><h2 id="mmap" tabindex="-1"><a class="header-anchor" href="#mmap"><span>mmap</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>mmap<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">vm_area_struct</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>mmap</code> is used to request a mapping of device memory to a process’s address space. If this method is <code>NULL</code>, the <code>mmap</code> system call returns <code>-ENODEV</code>.</p><h2 id="open" tabindex="-1"><a class="header-anchor" href="#open"><span>open</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>open<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Though this is always the first operation performed on the device file, the driver is not required to declare a corresponding method. If this entry is <code>NULL</code>, opening the device always succeeds, but your driver isn’t notified.</p><h2 id="flush" tabindex="-1"><a class="header-anchor" href="#flush"><span>flush</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>flush<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The <code>flush</code> operation is invoked when a process closes its copy of a file descriptor for a device; it should execute (and wait for) any outstanding operations on the device. This must not be confused with the <code>fsync</code> operation requested by user programs. Currently, <code>flush</code> is used in very few drivers; the SCSI tape driver uses it, for example, to ensure that all data written makes it to the tape before the device is closed. If <code>flush</code> is <code>NULL</code>, the kernel simply ignores the user application request.</p><h2 id="release" tabindex="-1"><a class="header-anchor" href="#release"><span>release</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>release<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This operation is invoked when the file structure is being released. Like open, release can be <code>NULL</code>.<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><h2 id="fsync" tabindex="-1"><a class="header-anchor" href="#fsync"><span>fsync</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fsync<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">dentry</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This method is the back end of the <code>fsync</code> system call, which a user calls to flush any pending data. If this pointer is <code>NULL</code>, the system call returns <code>-EINVAL</code>.</p><h2 id="aio-fsync" tabindex="-1"><a class="header-anchor" href="#aio-fsync"><span>aio_fsync</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>aio_fsync<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kiocb</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This is the asynchronous version of the <code>fsync</code> method.</p><h2 id="fasync" tabindex="-1"><a class="header-anchor" href="#fasync"><span>fasync</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>fasync<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This operation is used to notify the device of a change in its <code>FASYNC</code> flag. Asynchronous notification is an advanced topic and is described in Chapter 6. The field can be <code>NULL</code> if the driver doesn’t support asynchronous notification.</p><h2 id="lock" tabindex="-1"><a class="header-anchor" href="#lock"><span>lock</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>lock<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file_lock</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The <code>lock</code> method is used to implement file locking; locking is an indispensable feature for regular files but is almost never implemented by device drivers.</p><h2 id="readv" tabindex="-1"><a class="header-anchor" href="#readv"><span>readv</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>readv<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">iovec</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ssize_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>writev<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">iovec</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>These methods implement scatter/gather read and write operations. Applications occasionally need to do a single read or write operation involving multiple memory areas; these system calls allow them to do so without forcing extra copy operations on the data. If these function pointers are left <code>NULL</code>, the <code>read</code> and <code>write</code> methods are called (perhaps more than once) instead.</p><h2 id="sendfile" tabindex="-1"><a class="header-anchor" href="#sendfile"><span>sendfile</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>sendfile<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">,</span> <span class="token class-name">read_actor_t</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This method implements the read side of the <code>sendfile</code> system call, which moves the data from one file descriptor to another with a minimum of copying. It is used, for example, by a web server that needs to send the contents of a file out a network connection. Device drivers usually leave <code>sendfile</code> <code>NULL</code>.</p><h2 id="sendpage" tabindex="-1"><a class="header-anchor" href="#sendpage"><span>sendpage</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">ssize_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>sendpage<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>sendpage</code> is the other half of <code>sendfile</code>; it is called by the kernel to send data, one page at a time, to the corresponding file. Device drivers do not usually implement <code>sendpage</code>.</p><h2 id="get-unmapped-area" tabindex="-1"><a class="header-anchor" href="#get-unmapped-area"><span>get_unmapped_area</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token punctuation">(</span><span class="token operator">*</span>get_unmapped_area<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The purpose of this method is to find a suitable location in the process’s address space to map in a memory segment on the underlying device. This task is normally performed by the memory management code; this method exists to allow drivers to enforce any alignment requirements a particular device may have. Most drivers can leave this method <code>NULL</code>.</p><h2 id="chech-flags" tabindex="-1"><a class="header-anchor" href="#chech-flags"><span>chech_flags</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>check_flags<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This method allows a module to check the flags passed to an <code>fcntl(F_SETFL...)</code> call.</p><h2 id="dir-notify" tabindex="-1"><a class="header-anchor" href="#dir-notify"><span>dir_notify</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>dir_notify<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This method is invoked when an application uses <code>fcntl</code> to request directory change notifications. It is useful only to filesystems; drivers need not implement <code>dir_notify</code>.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>Note that <code>release</code> isn’t invoked every time a process calls <code>close</code>. Whenever a <code>file</code> structure is shared (for example, after a <code>fork</code> or a <code>dup</code>), <code>release</code> won’t be invoked until all copies are closed. If you need to flush pending data when any copy is closed, you should implement the <code>flush</code> method. <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>`,72),c=[o];function p(l,i){return a(),n("div",null,c)}const d=s(t,[["render",p],["__file","2022-05-13-linux-device-drivers-char-drivers-file-operations.html.vue"]]),u=JSON.parse('{"path":"/2022/research/notes/linux-device-drivers/2022-05-13-linux-device-drivers-char-drivers-file-operations.html","title":"Linux Device Drivers | Char Drivers | File Operations","lang":"en-US","frontmatter":{"date":"2022-05-13T00:00:00.000Z","isOriginal":false,"category":["Research"],"tag":["C/C++","Char Drivers","Linux","Linux Device Drivers","Linux Kernel"],"title":"Linux Device Drivers | Char Drivers | File Operations","description":"owner The first file_operations field is not an operation at all; it is a pointer to the module that “owns” the structure. This field is used to prevent the module from being un...","head":[["meta",{"property":"og:url","content":"https://blog.liblaf.me/2022/research/notes/linux-device-drivers/2022-05-13-linux-device-drivers-char-drivers-file-operations.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"Linux Device Drivers | Char Drivers | File Operations"}],["meta",{"property":"og:description","content":"owner The first file_operations field is not an operation at all; it is a pointer to the module that “owns” the structure. This field is used to prevent the module from being un..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-03T09:57:39.000Z"}],["meta",{"property":"article:author","content":"liblaf"}],["meta",{"property":"article:tag","content":"C/C++"}],["meta",{"property":"article:tag","content":"Char Drivers"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:tag","content":"Linux Device Drivers"}],["meta",{"property":"article:tag","content":"Linux Kernel"}],["meta",{"property":"article:published_time","content":"2022-05-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-03T09:57:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux Device Drivers | Char Drivers | File Operations\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-03T09:57:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://liblaf.me\\",\\"email\\":\\"i@liblaf.me\\"}]}"]]},"headers":[{"level":2,"title":"owner","slug":"owner","link":"#owner","children":[]},{"level":2,"title":"llseek","slug":"llseek","link":"#llseek","children":[]},{"level":2,"title":"read","slug":"read","link":"#read","children":[]},{"level":2,"title":"aio_read","slug":"aio-read","link":"#aio-read","children":[]},{"level":2,"title":"write","slug":"write","link":"#write","children":[]},{"level":2,"title":"aio_write","slug":"aio-write","link":"#aio-write","children":[]},{"level":2,"title":"readdir","slug":"readdir","link":"#readdir","children":[]},{"level":2,"title":"poll","slug":"poll","link":"#poll","children":[]},{"level":2,"title":"ioctl","slug":"ioctl","link":"#ioctl","children":[]},{"level":2,"title":"mmap","slug":"mmap","link":"#mmap","children":[]},{"level":2,"title":"open","slug":"open","link":"#open","children":[]},{"level":2,"title":"flush","slug":"flush","link":"#flush","children":[]},{"level":2,"title":"release","slug":"release","link":"#release","children":[]},{"level":2,"title":"fsync","slug":"fsync","link":"#fsync","children":[]},{"level":2,"title":"aio_fsync","slug":"aio-fsync","link":"#aio-fsync","children":[]},{"level":2,"title":"fasync","slug":"fasync","link":"#fasync","children":[]},{"level":2,"title":"lock","slug":"lock","link":"#lock","children":[]},{"level":2,"title":"readv","slug":"readv","link":"#readv","children":[]},{"level":2,"title":"sendfile","slug":"sendfile","link":"#sendfile","children":[]},{"level":2,"title":"sendpage","slug":"sendpage","link":"#sendpage","children":[]},{"level":2,"title":"get_unmapped_area","slug":"get-unmapped-area","link":"#get-unmapped-area","children":[]},{"level":2,"title":"chech_flags","slug":"chech-flags","link":"#chech-flags","children":[]},{"level":2,"title":"dir_notify","slug":"dir-notify","link":"#dir-notify","children":[]}],"git":{"createdTime":1677217008000,"updatedTime":1709459859000,"contributors":[{"name":"liblaf","email":"30631553+liblaf@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":4.22,"words":1267},"filePathRelative":"2022/research/notes/linux-device-drivers/2022-05-13-linux-device-drivers-char-drivers-file-operations.md","localizedDate":"May 13, 2022","excerpt":"<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;linux/fs.h&gt;</span></span>\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">file_operations</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,u as data};
