import{_ as n,o as a,c as s,e}from"./app-CoV9NwP4.js";const t={},o=e(`<h6 id="linux-slab-h" tabindex="-1"><a class="header-anchor" href="#linux-slab-h"><span>&lt;linux/slab.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">kmalloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">kfree</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The most frequently used interface to memory allocation.</p><h6 id="linux-mm-h" tabindex="-1"><a class="header-anchor" href="#linux-mm-h"><span>&lt;linux/mm.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>GFP_USER
GFP_KERNEL
GFP_NOFS
GFP_NOIO
GFP_ATOMIC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Flags that control how memory allocations are performed, from the least restrictive to the most. The <code>GFP_USER</code> and <code>GFP_KERNEL</code> priorities allow the current process to be put to sleep to satisfy the request. <code>GFP_NOFS</code> and <code>GFP_NOIO</code> disable filesystem operations and all I/O operations, respectively, while <code>GFP_ATOMIC</code> allocations cannot sleep at all.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>__GFP_DMA
__GFP_HIGHMEM
__GFP_COLD
__GFP_NOWARN
__GFP_HIGH
__GFP_REPEAT
__GFP_NOFAIL
__GFP_NORETRY
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>These flags modify the kernel’s behavior when allocating memory.</p><h6 id="linux-malloc-h" tabindex="-1"><a class="header-anchor" href="#linux-malloc-h"><span>&lt;linux/malloc.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">kmem_cache_t</span> <span class="token operator">*</span><span class="token function">kmem_cache_create</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">size_t</span> offset<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> flags<span class="token punctuation">,</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">destructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">kmem_cache_destroy</span><span class="token punctuation">(</span><span class="token class-name">kmem_cache_t</span> <span class="token operator">*</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Create and destroy a slab cache. The cache can be used to allocate several objects of the same size.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>SLAB_NO_REAP
SLAB_HWCACHE_ALIGN
SLAB_CACHE_DMA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Flags that can be specified while creating a cache.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>SLAB_CTOR_ATOMIC
SLAB_CTOR_CONSTRUCTOR
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Flags that the allocator can pass to the constructor and the destructor functions.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">kmem_cache_alloc</span><span class="token punctuation">(</span><span class="token class-name">kmem_cache_t</span> <span class="token operator">*</span>cache<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">kmem_cache_free</span><span class="token punctuation">(</span><span class="token class-name">kmem_cache_t</span> <span class="token operator">*</span>cache<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Allocate and release a single object from the cache.</p><h6 id="files" tabindex="-1"><a class="header-anchor" href="#files"><span>Files</span></a></h6><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>/proc/slabinfo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A virtual file containing statistics on slab cache usage.</p><h6 id="linux-mempool-h" tabindex="-1"><a class="header-anchor" href="#linux-mempool-h"><span>&lt;linux/mempool.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">mempool_t</span> <span class="token operator">*</span><span class="token function">mempool_create</span><span class="token punctuation">(</span><span class="token keyword">int</span> min_nr<span class="token punctuation">,</span> <span class="token class-name">mempool_alloc_t</span> <span class="token operator">*</span>alloc_fn<span class="token punctuation">,</span> <span class="token class-name">mempool_free_t</span> <span class="token operator">*</span>free_fn<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">mempool_destroy</span><span class="token punctuation">(</span><span class="token class-name">mempool_t</span> <span class="token operator">*</span>pool<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for the creation of memory pools, which try to avoid memory allocation failures by keeping an “emergency list” of allocated items.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">mempool_alloc</span><span class="token punctuation">(</span><span class="token class-name">mempool_t</span> <span class="token operator">*</span>pool<span class="token punctuation">,</span> <span class="token keyword">int</span> gfp_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">mempool_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>element<span class="token punctuation">,</span> <span class="token class-name">mempool_t</span> <span class="token operator">*</span>pool<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for allocating items from (and returning them to) memory pools.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">get_zeroed_page</span><span class="token punctuation">(</span><span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">__get_free_page</span><span class="token punctuation">(</span><span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">__get_free_pages</span><span class="token punctuation">(</span><span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The page-oriented allocation functions. <code>get_zeroed_page</code> returns a single, zero-filled page. All the other versions of the call do not initialize the contents of the returned page(s).</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">get_order</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Returns the allocation order associated to size in the current platform, according to <code>PAGE_SIZE</code>. The argument must be a power of two, and the return value is at least <code>0</code>.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">free_page</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">free_pages</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> addr<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions that release page-oriented allocations.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span><span class="token function">alloc_pages_node</span><span class="token punctuation">(</span><span class="token keyword">int</span> nid<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span><span class="token function">alloc_pages</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span><span class="token function">alloc_page</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All variants of the lowest-level page allocator in the Linux kernel.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">__free_page</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">__free_pages</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">free_hot_page</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">free_cold_page</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Various ways of freeing pages allocated with one of the forms of <code>alloc_page</code>.</p><h6 id="linux-vmalloc-h" tabindex="-1"><a class="header-anchor" href="#linux-vmalloc-h"><span>&lt;linux/vmalloc.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">vmalloc</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">vfree</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="asm-io-h" tabindex="-1"><a class="header-anchor" href="#asm-io-h"><span>&lt;asm/io.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">ioremap</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">iounmap</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions that allocate or free a contiguous virtual address space. <code>ioremap</code> accesses physical memory through virtual addresses, while <code>vmalloc</code> allocates free pages. Regions mapped with <code>ioremap</code> are freed with <code>iounmap</code>, while pages obtained from <code>vmalloc</code> are released with <code>vfree</code>.</p><h6 id="linux-percpu-h" tabindex="-1"><a class="header-anchor" href="#linux-percpu-h"><span>&lt;linux/percpu.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">DEFINE_PER_CPU</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">DECLARE_PER_CPU</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Macros that define and declare per-CPU variables.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">per_cpu</span><span class="token punctuation">(</span>variable<span class="token punctuation">,</span> <span class="token keyword">int</span> cpu_id<span class="token punctuation">)</span>
<span class="token function">get_cpu_var</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span>
<span class="token function">put_cpu_var</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Macros that provide access to statically declared per-CPU variables.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">alloc_percpu</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">__alloc_percpu</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">size_t</span> align<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">free_percpu</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>variable<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions that perform runtime allocation and freeing of per-CPU variables.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">get_cpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">put_cpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">per_cpu_ptr</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>variable<span class="token punctuation">,</span> <span class="token keyword">int</span> cpu_id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>get_cpu</code> obtains a reference to the current processor (therefore, preventing preemption and movement to another processor) and returns the ID number of the processor; <code>put_cpu</code> returns that reference. To access a dynamically allocated per-CPU variable, use <code>per_cpu_ptr</code> with the ID of the CPU whose version should be accessed. Manipulations of the current CPU’s version of a dynamic, per-CPU variable should probably be surrounded by calls to <code>get_cpu</code> and <code>put_cpu</code>.</p><h6 id="linux-bootmem-h" tabindex="-1"><a class="header-anchor" href="#linux-bootmem-h"><span>&lt;linux/bootmem.h&gt;</span></a></h6><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">alloc_bootmem</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">alloc_bootmem_low</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">alloc_bootmem_pages</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">alloc_bootmem_low_pages</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">free_bootmem</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> addr<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions (which can be used only by drivers directly linked into the kernel) that perform allocation and freeing of memory at system bootstrap time.</p>`,52),p=[o];function c(l,i){return a(),s("div",null,p)}const d=n(t,[["render",c],["__file","2022-05-13-linux-device-drivers-allocating-memory.html.vue"]]),u=JSON.parse('{"path":"/2022/research/notes/linux-device-drivers/2022-05-13-linux-device-drivers-allocating-memory.html","title":"Linux Device Drivers | Allocating Memory","lang":"en-US","frontmatter":{"date":"2022-05-13T00:00:00.000Z","isOriginal":false,"category":["Research"],"tag":["C/C++","Linux","Linux Device Drivers","Linux Kernel"],"title":"Linux Device Drivers | Allocating Memory","description":"<linux/slab.h> The most frequently used interface to memory allocation. <linux/mm.h> Flags that control how memory allocations are performed, from the least restrictive to the m...","head":[["meta",{"property":"og:url","content":"https://blog.liblaf.me/2022/research/notes/linux-device-drivers/2022-05-13-linux-device-drivers-allocating-memory.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"Linux Device Drivers | Allocating Memory"}],["meta",{"property":"og:description","content":"<linux/slab.h> The most frequently used interface to memory allocation. <linux/mm.h> Flags that control how memory allocations are performed, from the least restrictive to the m..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-03T09:57:39.000Z"}],["meta",{"property":"article:author","content":"liblaf"}],["meta",{"property":"article:tag","content":"C/C++"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:tag","content":"Linux Device Drivers"}],["meta",{"property":"article:tag","content":"Linux Kernel"}],["meta",{"property":"article:published_time","content":"2022-05-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-03T09:57:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux Device Drivers | Allocating Memory\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-03T09:57:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://liblaf.me\\",\\"email\\":\\"i@liblaf.me\\"}]}"]]},"headers":[],"git":{"createdTime":1677217008000,"updatedTime":1709459859000,"contributors":[{"name":"liblaf","email":"30631553+liblaf@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":2.41,"words":724},"filePathRelative":"2022/research/notes/linux-device-drivers/2022-05-13-linux-device-drivers-allocating-memory.md","localizedDate":"May 13, 2022","excerpt":"<h6>&lt;linux/slab.h&gt;</h6>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span><span class=\\"token function\\">kmalloc</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">size_t</span> size<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> flags<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">kfree</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span> <span class=\\"token operator\\">*</span>obj<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,u as data};
