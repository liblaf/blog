import{_ as p,r as o,o as e,c,a as s,b as n,d as l,e as a}from"./app-CoV9NwP4.js";const i={},u=a('<p>Size: 512 x 512 x 512</p><h2 id="naive" tabindex="-1"><a class="header-anchor" href="#naive"><span>Naive</span></a></h2><h3 id="no-opt-performance" tabindex="-1"><a class="header-anchor" href="#no-opt-performance"><span>No OPT Performance</span></a></h3><table><thead><tr><th>Threads</th><th>Computation Time (s)</th><th>Performance (Gflop/s)</th><th>Speedup / Single Thread</th></tr></thead><tbody><tr><td>1</td><td>267.075484</td><td>0.653310</td><td>1.</td></tr><tr><td>2</td><td>135.902281</td><td>1.283886</td><td>1.96520182</td></tr><tr><td>4</td><td>70.080111</td><td>2.489766</td><td>3.81100243</td></tr><tr><td>8</td><td>36.813651</td><td>4.739629</td><td>7.25479328</td></tr><tr><td>16</td><td>25.793147</td><td>6.764706</td><td>10.35451164</td></tr><tr><td>28</td><td>17.400062</td><td>10.027726</td><td>15.34910839</td></tr></tbody></table><h3 id="opt-performance" tabindex="-1"><a class="header-anchor" href="#opt-performance"><span>OPT Performance</span></a></h3><table><thead><tr><th>Threads</th><th>Computation Time (s)</th><th>Performance (Gflop/s)</th><th>Speedup / Single Thread</th><th>Speedup / Naive Single Thread</th></tr></thead><tbody><tr><td>1</td><td>33.793919</td><td>5.163149</td><td>1.</td><td>7.90306133</td></tr><tr><td>2</td><td>20.366889</td><td>8.566996</td><td>1.65925795</td><td>13.11321731</td></tr><tr><td>4</td><td>11.615848</td><td>15.021120</td><td>2.90929431</td><td>22.99233136</td></tr><tr><td>8</td><td>10.494952</td><td>16.625426</td><td>3.22001670</td><td>25.44798947</td></tr><tr><td>16</td><td>8.618103</td><td>20.246109</td><td>3.92127150</td><td>30.99004913</td></tr><tr><td>28</td><td>7.622385</td><td>22.890871</td><td>4.43350967</td><td>35.03829882</td></tr></tbody></table><h2 id="omp" tabindex="-1"><a class="header-anchor" href="#omp"><span>OMP</span></a></h2><p>使用 Time Skewing + Intrinsic 手动向量化进行优化. Time Skewing 通过在空间维度上进行分块, 在时间维度上进行斜向划分, 使得 <code>t + 1</code> 时刻的计算能够利用 <code>t</code> 时刻缓存在 cache 中的计算结果, 因而提升性能. 注意, 边界上的块会随 <code>t</code> 的增大而逐渐减小. 因此块的大小并不均衡. 好消息是, Time Skewing 并不并行块, 而是在每个块内部进行并行计算, 并不会导致负载的严重不均衡.</p><p>使用 Intel Intrinsic 手动向量化的优化效果并不明显, 与自动向量化相比几乎没有提升, 但聊胜于无.</p><p>此外, 由于计算顺序的不同, 结果可能会与串行得到的结果产生微小偏差, 在可接受范围之内, 算法本身没有错误.</p>',10),k={href:"http://people.csail.mit.edu/skamil/projects/stencilprobe/",target:"_blank",rel:"noopener noreferrer"},r=s("a",{href:"#Performance"},"Performance",-1),d=a(`<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INTRINSIC</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;immintrin.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;omp.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;common.h&quot;</span></span>

<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>version_name <span class="token operator">=</span> <span class="token string">&quot;OMP&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">create_dist_grid</span><span class="token punctuation">(</span>dist_grid_info_t <span class="token operator">*</span>grid_info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Naive implementation uses Process 0 to do all computations</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>grid_info<span class="token operator">-&gt;</span>p_id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    grid_info<span class="token operator">-&gt;</span>local_size_x <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>global_size_x<span class="token punctuation">;</span>
    grid_info<span class="token operator">-&gt;</span>local_size_y <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>global_size_y<span class="token punctuation">;</span>
    grid_info<span class="token operator">-&gt;</span>local_size_z <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>global_size_z<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    grid_info<span class="token operator">-&gt;</span>local_size_x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    grid_info<span class="token operator">-&gt;</span>local_size_y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    grid_info<span class="token operator">-&gt;</span>local_size_z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  grid_info<span class="token operator">-&gt;</span>offset_x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  grid_info<span class="token operator">-&gt;</span>offset_y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  grid_info<span class="token operator">-&gt;</span>offset_z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  grid_info<span class="token operator">-&gt;</span>halo_size_x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  grid_info<span class="token operator">-&gt;</span>halo_size_y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  grid_info<span class="token operator">-&gt;</span>halo_size_z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">destroy_dist_grid</span><span class="token punctuation">(</span>dist_grid_info_t <span class="token operator">*</span>grid_info<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">Min</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> b <span class="token operator">:</span> a<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">INTRINSIC</span></span>
<span class="token comment">// calculate 4 elements as a vector</span>
<span class="token keyword">void</span> <span class="token function">Kernel7</span><span class="token punctuation">(</span>cptr_t a0<span class="token punctuation">,</span> ptr_t a1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> z<span class="token punctuation">,</span>
             <span class="token keyword">const</span> <span class="token keyword">int</span> ldx<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> ldy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> __m256d alpha_zzz <span class="token operator">=</span> <span class="token function">_mm256_set1_pd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>ALPHA_ZZZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> __m256d alpha_nzz <span class="token operator">=</span> <span class="token function">_mm256_set1_pd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>ALPHA_NZZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> __m256d alpha_pzz <span class="token operator">=</span> <span class="token function">_mm256_set1_pd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>ALPHA_PZZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> __m256d alpha_znz <span class="token operator">=</span> <span class="token function">_mm256_set1_pd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>ALPHA_ZNZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> __m256d alpha_zpz <span class="token operator">=</span> <span class="token function">_mm256_set1_pd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>ALPHA_ZPZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> __m256d alpha_zzn <span class="token operator">=</span> <span class="token function">_mm256_set1_pd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>ALPHA_ZZN<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> __m256d alpha_zzp <span class="token operator">=</span> <span class="token function">_mm256_set1_pd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>ALPHA_ZZP<span class="token punctuation">)</span><span class="token punctuation">;</span>
  __m256d zzz <span class="token operator">=</span> <span class="token function">_mm256_loadu_pd</span><span class="token punctuation">(</span>a0 <span class="token operator">+</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __m256d nzz <span class="token operator">=</span> <span class="token function">_mm256_loadu_pd</span><span class="token punctuation">(</span>a0 <span class="token operator">+</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __m256d pzz <span class="token operator">=</span> <span class="token function">_mm256_loadu_pd</span><span class="token punctuation">(</span>a0 <span class="token operator">+</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __m256d znz <span class="token operator">=</span> <span class="token function">_mm256_loadu_pd</span><span class="token punctuation">(</span>a0 <span class="token operator">+</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __m256d zpz <span class="token operator">=</span> <span class="token function">_mm256_loadu_pd</span><span class="token punctuation">(</span>a0 <span class="token operator">+</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __m256d zzn <span class="token operator">=</span> <span class="token function">_mm256_loadu_pd</span><span class="token punctuation">(</span>a0 <span class="token operator">+</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __m256d zzp <span class="token operator">=</span> <span class="token function">_mm256_loadu_pd</span><span class="token punctuation">(</span>a0 <span class="token operator">+</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __m256d res <span class="token operator">=</span> <span class="token function">_mm256_mul_pd</span><span class="token punctuation">(</span>alpha_zzz<span class="token punctuation">,</span> zzz<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res <span class="token operator">=</span> <span class="token function">_mm256_fmadd_pd</span><span class="token punctuation">(</span>alpha_nzz<span class="token punctuation">,</span> nzz<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res <span class="token operator">=</span> <span class="token function">_mm256_fmadd_pd</span><span class="token punctuation">(</span>alpha_pzz<span class="token punctuation">,</span> pzz<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res <span class="token operator">=</span> <span class="token function">_mm256_fmadd_pd</span><span class="token punctuation">(</span>alpha_znz<span class="token punctuation">,</span> znz<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res <span class="token operator">=</span> <span class="token function">_mm256_fmadd_pd</span><span class="token punctuation">(</span>alpha_zpz<span class="token punctuation">,</span> zpz<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res <span class="token operator">=</span> <span class="token function">_mm256_fmadd_pd</span><span class="token punctuation">(</span>alpha_zzn<span class="token punctuation">,</span> zzn<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res <span class="token operator">=</span> <span class="token function">_mm256_fmadd_pd</span><span class="token punctuation">(</span>alpha_zzp<span class="token punctuation">,</span> zzp<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">_mm256_storeu_pd</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

ptr_t <span class="token function">stencil_7</span><span class="token punctuation">(</span>ptr_t grid<span class="token punctuation">,</span> ptr_t aux<span class="token punctuation">,</span> <span class="token keyword">const</span> dist_grid_info_t <span class="token operator">*</span>grid_info<span class="token punctuation">,</span>
                <span class="token keyword">int</span> nt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">omp_set_num_threads</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  ptr_t buffer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>grid<span class="token punctuation">,</span> aux<span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> x_start <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>halo_size_x<span class="token punctuation">,</span>
      x_end <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>local_size_x <span class="token operator">+</span> grid_info<span class="token operator">-&gt;</span>halo_size_x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> y_start <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>halo_size_y<span class="token punctuation">,</span>
      y_end <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>local_size_y <span class="token operator">+</span> grid_info<span class="token operator">-&gt;</span>halo_size_y<span class="token punctuation">;</span>
  <span class="token keyword">int</span> z_start <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>halo_size_z<span class="token punctuation">,</span>
      z_end <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>local_size_z <span class="token operator">+</span> grid_info<span class="token operator">-&gt;</span>halo_size_z<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ldx <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>local_size_x <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> grid_info<span class="token operator">-&gt;</span>halo_size_x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ldy <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>local_size_y <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> grid_info<span class="token operator">-&gt;</span>halo_size_y<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ldz <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>local_size_z <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> grid_info<span class="token operator">-&gt;</span>halo_size_z<span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token keyword">int</span> tx <span class="token operator">=</span> x_end <span class="token operator">-</span> x_start<span class="token punctuation">;</span>  <span class="token comment">// block size along x-axis</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span> ty <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>               <span class="token comment">// block size along y-axis</span>
  <span class="token keyword">const</span> <span class="token keyword">int</span> tz <span class="token operator">=</span> <span class="token number">112</span><span class="token punctuation">;</span>              <span class="token comment">// block size along z-axis</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> zz <span class="token operator">=</span> z_start<span class="token punctuation">;</span> zz <span class="token operator">&lt;</span> z_end<span class="token punctuation">;</span> zz <span class="token operator">+=</span> tz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// shrink size</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> neg_z_slope <span class="token operator">=</span> <span class="token punctuation">(</span>zz <span class="token operator">==</span> z_start<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> pos_z_slope <span class="token operator">=</span> <span class="token punctuation">(</span>zz <span class="token operator">+</span> tz <span class="token operator">&lt;</span> z_end<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> yy <span class="token operator">=</span> y_start<span class="token punctuation">;</span> yy <span class="token operator">&lt;</span> y_end<span class="token punctuation">;</span> yy <span class="token operator">+=</span> ty<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token keyword">int</span> neg_y_slope <span class="token operator">=</span> <span class="token punctuation">(</span>yy <span class="token operator">==</span> y_start<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> <span class="token keyword">int</span> pos_y_slope <span class="token operator">=</span> <span class="token punctuation">(</span>yy <span class="token operator">+</span> ty <span class="token operator">&lt;</span> y_end<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> xx <span class="token operator">=</span> x_start<span class="token punctuation">;</span> xx <span class="token operator">&lt;</span> x_end<span class="token punctuation">;</span> xx <span class="token operator">+=</span> tx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token keyword">int</span> neg_x_slope <span class="token operator">=</span> <span class="token punctuation">(</span>xx <span class="token operator">==</span> x_start<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token keyword">int</span> pos_x_slope <span class="token operator">=</span> <span class="token punctuation">(</span>xx <span class="token operator">+</span> tx <span class="token operator">&lt;</span> x_end<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> nt<span class="token punctuation">;</span> <span class="token operator">++</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> <span class="token keyword">int</span> block_min_x <span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span>x_start<span class="token punctuation">,</span> xx <span class="token operator">-</span> t <span class="token operator">*</span> neg_x_slope<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> <span class="token keyword">int</span> block_min_y <span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span>y_start<span class="token punctuation">,</span> yy <span class="token operator">-</span> t <span class="token operator">*</span> neg_y_slope<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> <span class="token keyword">int</span> block_min_z <span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span>z_start<span class="token punctuation">,</span> zz <span class="token operator">-</span> t <span class="token operator">*</span> neg_z_slope<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> <span class="token keyword">int</span> block_max_x <span class="token operator">=</span>
              <span class="token function">Min</span><span class="token punctuation">(</span>x_end<span class="token punctuation">,</span> <span class="token function">Max</span><span class="token punctuation">(</span>x_start<span class="token punctuation">,</span> xx <span class="token operator">+</span> tx <span class="token operator">+</span> t <span class="token operator">*</span> pos_x_slope<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> <span class="token keyword">int</span> block_max_y <span class="token operator">=</span>
              <span class="token function">Min</span><span class="token punctuation">(</span>y_end<span class="token punctuation">,</span> <span class="token function">Max</span><span class="token punctuation">(</span>y_start<span class="token punctuation">,</span> yy <span class="token operator">+</span> ty <span class="token operator">+</span> t <span class="token operator">*</span> pos_y_slope<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> <span class="token keyword">int</span> block_max_z <span class="token operator">=</span>
              <span class="token function">Min</span><span class="token punctuation">(</span>z_end<span class="token punctuation">,</span> <span class="token function">Max</span><span class="token punctuation">(</span>z_start<span class="token punctuation">,</span> zz <span class="token operator">+</span> tz <span class="token operator">+</span> t <span class="token operator">*</span> pos_z_slope<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          cptr_t a0 <span class="token operator">=</span> buffer<span class="token punctuation">[</span>t <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          ptr_t a1 <span class="token operator">=</span> buffer<span class="token punctuation">[</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp parallel <span class="token keyword">for</span></span></span>
          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> z <span class="token operator">=</span> block_min_z<span class="token punctuation">;</span> z <span class="token operator">&lt;</span> block_max_z<span class="token punctuation">;</span> z<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> block_min_y<span class="token punctuation">;</span> y <span class="token operator">&lt;</span> block_max_y<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">INTRINSIC</span></span>
              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> block_min_x<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> block_max_x <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span> x <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">)</span>
                <span class="token function">Kernel7</span><span class="token punctuation">(</span>a0<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> block_max_x <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> block_max_x<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                a1<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span>
                    ALPHA_ZZZ <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span>
                    ALPHA_NZZ <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span>
                    ALPHA_PZZ <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span>
                    ALPHA_ZNZ <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span>
                    ALPHA_ZPZ <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span>
                    ALPHA_ZZN <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span>
                    ALPHA_ZZP <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">omp simd</span></span>
              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> block_min_x<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> block_max_x<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                a1<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span>
                    ALPHA_ZZZ <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span>
                    ALPHA_NZZ <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span>
                    ALPHA_PZZ <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span>
                    ALPHA_ZNZ <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span>
                    ALPHA_ZPZ <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span>
                    ALPHA_ZZN <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span>
                    ALPHA_ZZP <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> buffer<span class="token punctuation">[</span>nt <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="omp-performance" tabindex="-1"><a class="header-anchor" href="#omp-performance"><span>OMP Performance</span></a></h3><table><thead><tr><th>Threads</th><th>Computation Time (s)</th><th>Performance (Gflop/s)</th><th>Speedup / Single Thread</th><th>Speedup / Naive Single Thread</th></tr></thead><tbody><tr><td>1</td><td>23.760512</td><td>7.3434040</td><td>1.</td><td>11.24030552</td></tr><tr><td>2</td><td>12.095517</td><td>14.425432</td><td>1.9644067</td><td>22.08053145</td></tr><tr><td>4</td><td>6.763701</td><td>25.796978</td><td>3.5129455</td><td>39.48658064</td></tr><tr><td>8</td><td>3.647941</td><td>47.830557</td><td>6.513404</td><td>73.21265096</td></tr><tr><td>16</td><td>2.625376</td><td>66.460208</td><td>9.05032707</td><td>101.72844132</td></tr><tr><td>28</td><td>2.359089</td><td>73.962038</td><td>10.07190099</td><td>113.21124428</td></tr></tbody></table><h2 id="mpi" tabindex="-1"><a class="header-anchor" href="#mpi"><span>MPI</span></a></h2><p>考虑对数据进行分块, 并尽量减小通信. 不难发现, 每个块都需要与其相邻的块交换边界上的数据, 因此通信量的大小与分块后内部多出的表面积成正比. 显然, 如果只沿一个方向分块, 无疑是增加面积最大的分块方法, 因此考虑沿 x, y, z 轴进行 3D Blocking, 在进程数为 2, 4, 8, 16, 28 时进行手动分块, 以减少通信.</p><p>在测试时, 我们发现非阻塞通信的提升并不显著, 且编程相对复杂, 容易产生死锁等问题, 因此最终选用 <code>Sendrecv()</code> 进行通信.</p><p>此外, 还使用了 Intel Intrinsic 手动向量化进行优化.</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INTRINSIC</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;immintrin.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;mpi.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;common.h&quot;</span></span>

<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>version_name <span class="token operator">=</span> <span class="token string">&quot;MPI&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> num_block_x<span class="token punctuation">,</span> num_block_y<span class="token punctuation">,</span> num_block_z<span class="token punctuation">;</span>
  <span class="token keyword">int</span> id_x<span class="token punctuation">,</span> id_y<span class="token punctuation">,</span> id_z<span class="token punctuation">;</span>
<span class="token punctuation">}</span> GridId<span class="token punctuation">;</span>

<span class="token keyword">enum</span> <span class="token class-name">Direction</span> <span class="token punctuation">{</span> kXPred<span class="token punctuation">,</span> kXSucc<span class="token punctuation">,</span> kYPred<span class="token punctuation">,</span> kYSucc<span class="token punctuation">,</span> kZPred<span class="token punctuation">,</span> kZSucc <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">Min</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> a<span class="token punctuation">)</span> <span class="token operator">?</span> b <span class="token operator">:</span> a<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">Ceiling</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">Blocking</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> global_size<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> num_block<span class="token punctuation">,</span>
              <span class="token keyword">int</span> <span class="token operator">*</span>local_size<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> block_size <span class="token operator">=</span> <span class="token function">Ceiling</span><span class="token punctuation">(</span>global_size<span class="token punctuation">,</span> num_block<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">*</span>offset <span class="token operator">=</span> block_size <span class="token operator">*</span> id<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>offset<span class="token punctuation">)</span> <span class="token operator">&lt;</span> global_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>local_size <span class="token operator">=</span> <span class="token function">Min</span><span class="token punctuation">(</span>block_size<span class="token punctuation">,</span> global_size <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">*</span>offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token operator">*</span>local_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">create_dist_grid</span><span class="token punctuation">(</span>dist_grid_info_t <span class="token operator">*</span>grid_info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  GridId <span class="token operator">*</span>grid_id <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>GridId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  grid_info<span class="token operator">-&gt;</span>additional_info <span class="token operator">=</span> grid_id<span class="token punctuation">;</span>
  grid_id<span class="token operator">-&gt;</span>num_block_x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  grid_id<span class="token operator">-&gt;</span>num_block_y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  grid_id<span class="token operator">-&gt;</span>num_block_z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>grid_info<span class="token operator">-&gt;</span>p_num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      grid_id<span class="token operator">-&gt;</span>num_block_x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      grid_id<span class="token operator">-&gt;</span>num_block_y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
      grid_id<span class="token operator">-&gt;</span>num_block_z <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      grid_id<span class="token operator">-&gt;</span>num_block_x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
      grid_id<span class="token operator">-&gt;</span>num_block_y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
      grid_id<span class="token operator">-&gt;</span>num_block_z <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token number">16</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      grid_id<span class="token operator">-&gt;</span>num_block_x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
      grid_id<span class="token operator">-&gt;</span>num_block_y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
      grid_id<span class="token operator">-&gt;</span>num_block_z <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">case</span> <span class="token number">28</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      grid_id<span class="token operator">-&gt;</span>num_block_x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
      grid_id<span class="token operator">-&gt;</span>num_block_y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
      grid_id<span class="token operator">-&gt;</span>num_block_z <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      grid_id<span class="token operator">-&gt;</span>num_block_x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      grid_id<span class="token operator">-&gt;</span>num_block_y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      grid_id<span class="token operator">-&gt;</span>num_block_z <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>p_num<span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  grid_id<span class="token operator">-&gt;</span>id_x <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>p_id <span class="token operator">%</span> grid_id<span class="token operator">-&gt;</span>num_block_x<span class="token punctuation">;</span>
  grid_id<span class="token operator">-&gt;</span>id_y <span class="token operator">=</span>
      <span class="token punctuation">(</span>grid_info<span class="token operator">-&gt;</span>p_id <span class="token operator">/</span> grid_id<span class="token operator">-&gt;</span>num_block_x<span class="token punctuation">)</span> <span class="token operator">%</span> grid_id<span class="token operator">-&gt;</span>num_block_y<span class="token punctuation">;</span>
  grid_id<span class="token operator">-&gt;</span>id_z <span class="token operator">=</span>
      grid_info<span class="token operator">-&gt;</span>p_id <span class="token operator">/</span> <span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>num_block_x <span class="token operator">*</span> grid_id<span class="token operator">-&gt;</span>num_block_y<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">Blocking</span><span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_x<span class="token punctuation">,</span> grid_info<span class="token operator">-&gt;</span>global_size_x<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>num_block_x<span class="token punctuation">,</span>
           <span class="token operator">&amp;</span><span class="token punctuation">(</span>grid_info<span class="token operator">-&gt;</span>local_size_x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>grid_info<span class="token operator">-&gt;</span>offset_x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">Blocking</span><span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_y<span class="token punctuation">,</span> grid_info<span class="token operator">-&gt;</span>global_size_y<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>num_block_y<span class="token punctuation">,</span>
           <span class="token operator">&amp;</span><span class="token punctuation">(</span>grid_info<span class="token operator">-&gt;</span>local_size_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>grid_info<span class="token operator">-&gt;</span>offset_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">Blocking</span><span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_z<span class="token punctuation">,</span> grid_info<span class="token operator">-&gt;</span>global_size_z<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>num_block_z<span class="token punctuation">,</span>
           <span class="token operator">&amp;</span><span class="token punctuation">(</span>grid_info<span class="token operator">-&gt;</span>local_size_z<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>grid_info<span class="token operator">-&gt;</span>offset_z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  grid_info<span class="token operator">-&gt;</span>halo_size_x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  grid_info<span class="token operator">-&gt;</span>halo_size_y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  grid_info<span class="token operator">-&gt;</span>halo_size_z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">destroy_dist_grid</span><span class="token punctuation">(</span>dist_grid_info_t <span class="token operator">*</span>grid_info<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">free</span><span class="token punctuation">(</span>grid_info<span class="token operator">-&gt;</span>additional_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">INTRINSIC</span></span>
<span class="token keyword">void</span> <span class="token function">Kernel7</span><span class="token punctuation">(</span>cptr_t a0<span class="token punctuation">,</span> ptr_t a1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> z<span class="token punctuation">,</span>
             <span class="token keyword">const</span> <span class="token keyword">int</span> ldx<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> ldy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> __m256d alpha_zzz <span class="token operator">=</span> <span class="token function">_mm256_set1_pd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>ALPHA_ZZZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> __m256d alpha_nzz <span class="token operator">=</span> <span class="token function">_mm256_set1_pd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>ALPHA_NZZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> __m256d alpha_pzz <span class="token operator">=</span> <span class="token function">_mm256_set1_pd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>ALPHA_PZZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> __m256d alpha_znz <span class="token operator">=</span> <span class="token function">_mm256_set1_pd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>ALPHA_ZNZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> __m256d alpha_zpz <span class="token operator">=</span> <span class="token function">_mm256_set1_pd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>ALPHA_ZPZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> __m256d alpha_zzn <span class="token operator">=</span> <span class="token function">_mm256_set1_pd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>ALPHA_ZZN<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> __m256d alpha_zzp <span class="token operator">=</span> <span class="token function">_mm256_set1_pd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>ALPHA_ZZP<span class="token punctuation">)</span><span class="token punctuation">;</span>
  __m256d zzz <span class="token operator">=</span> <span class="token function">_mm256_loadu_pd</span><span class="token punctuation">(</span>a0 <span class="token operator">+</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __m256d nzz <span class="token operator">=</span> <span class="token function">_mm256_loadu_pd</span><span class="token punctuation">(</span>a0 <span class="token operator">+</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __m256d pzz <span class="token operator">=</span> <span class="token function">_mm256_loadu_pd</span><span class="token punctuation">(</span>a0 <span class="token operator">+</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __m256d znz <span class="token operator">=</span> <span class="token function">_mm256_loadu_pd</span><span class="token punctuation">(</span>a0 <span class="token operator">+</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __m256d zpz <span class="token operator">=</span> <span class="token function">_mm256_loadu_pd</span><span class="token punctuation">(</span>a0 <span class="token operator">+</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __m256d zzn <span class="token operator">=</span> <span class="token function">_mm256_loadu_pd</span><span class="token punctuation">(</span>a0 <span class="token operator">+</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __m256d zzp <span class="token operator">=</span> <span class="token function">_mm256_loadu_pd</span><span class="token punctuation">(</span>a0 <span class="token operator">+</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  __m256d res <span class="token operator">=</span> <span class="token function">_mm256_mul_pd</span><span class="token punctuation">(</span>alpha_zzz<span class="token punctuation">,</span> zzz<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res <span class="token operator">=</span> <span class="token function">_mm256_fmadd_pd</span><span class="token punctuation">(</span>alpha_nzz<span class="token punctuation">,</span> nzz<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res <span class="token operator">=</span> <span class="token function">_mm256_fmadd_pd</span><span class="token punctuation">(</span>alpha_pzz<span class="token punctuation">,</span> pzz<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res <span class="token operator">=</span> <span class="token function">_mm256_fmadd_pd</span><span class="token punctuation">(</span>alpha_znz<span class="token punctuation">,</span> znz<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res <span class="token operator">=</span> <span class="token function">_mm256_fmadd_pd</span><span class="token punctuation">(</span>alpha_zpz<span class="token punctuation">,</span> zpz<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res <span class="token operator">=</span> <span class="token function">_mm256_fmadd_pd</span><span class="token punctuation">(</span>alpha_zzn<span class="token punctuation">,</span> zzn<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res <span class="token operator">=</span> <span class="token function">_mm256_fmadd_pd</span><span class="token punctuation">(</span>alpha_zzp<span class="token punctuation">,</span> zzp<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">_mm256_storeu_pd</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

ptr_t <span class="token function">stencil_7</span><span class="token punctuation">(</span>ptr_t grid<span class="token punctuation">,</span> ptr_t aux<span class="token punctuation">,</span> <span class="token keyword">const</span> dist_grid_info_t <span class="token operator">*</span>grid_info<span class="token punctuation">,</span>
                <span class="token keyword">int</span> nt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ptr_t buffer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>grid<span class="token punctuation">,</span> aux<span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> x_start <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>halo_size_x<span class="token punctuation">,</span>
      x_end <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>local_size_x <span class="token operator">+</span> grid_info<span class="token operator">-&gt;</span>halo_size_x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> y_start <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>halo_size_y<span class="token punctuation">,</span>
      y_end <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>local_size_y <span class="token operator">+</span> grid_info<span class="token operator">-&gt;</span>halo_size_y<span class="token punctuation">;</span>
  <span class="token keyword">int</span> z_start <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>halo_size_z<span class="token punctuation">,</span>
      z_end <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>local_size_z <span class="token operator">+</span> grid_info<span class="token operator">-&gt;</span>halo_size_z<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ldx <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>local_size_x <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> grid_info<span class="token operator">-&gt;</span>halo_size_x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ldy <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>local_size_y <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> grid_info<span class="token operator">-&gt;</span>halo_size_y<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ldz <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>local_size_z <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> grid_info<span class="token operator">-&gt;</span>halo_size_z<span class="token punctuation">;</span>

  MPI_Datatype XY_PLANE<span class="token punctuation">,</span> XZ_PLANE<span class="token punctuation">,</span> YZ_PLANE<span class="token punctuation">;</span>
  <span class="token function">MPI_Type_vector</span><span class="token punctuation">(</span><span class="token comment">/*count=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*blocklength=*/</span>ldx <span class="token operator">*</span> ldy<span class="token punctuation">,</span> <span class="token comment">/*stride=*/</span><span class="token number">0</span><span class="token punctuation">,</span>
                  <span class="token comment">/*oldtype=*/</span>MPI_DOUBLE<span class="token punctuation">,</span> <span class="token comment">/*newtype=*/</span><span class="token operator">&amp;</span>XY_PLANE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">MPI_Type_vector</span><span class="token punctuation">(</span><span class="token comment">/*count=*/</span>ldz<span class="token punctuation">,</span> <span class="token comment">/*blocklength=*/</span>ldx<span class="token punctuation">,</span> <span class="token comment">/*stride=*/</span>ldx <span class="token operator">*</span> ldy<span class="token punctuation">,</span>
                  <span class="token comment">/*oldtype=*/</span>MPI_DOUBLE<span class="token punctuation">,</span> <span class="token comment">/*newtype=*/</span><span class="token operator">&amp;</span>XZ_PLANE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">MPI_Type_vector</span><span class="token punctuation">(</span><span class="token comment">/*count=*/</span>ldy <span class="token operator">*</span> ldz<span class="token punctuation">,</span> <span class="token comment">/*blocklength=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*stride=*/</span>ldx<span class="token punctuation">,</span>
                  <span class="token comment">/*oldtype=*/</span>MPI_DOUBLE<span class="token punctuation">,</span> <span class="token comment">/*newtype=*/</span><span class="token operator">&amp;</span>YZ_PLANE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">MPI_Type_commit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>XY_PLANE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">MPI_Type_commit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>XZ_PLANE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">MPI_Type_commit</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>YZ_PLANE<span class="token punctuation">)</span><span class="token punctuation">;</span>

  GridId <span class="token operator">*</span>grid_id <span class="token operator">=</span> grid_info<span class="token operator">-&gt;</span>additional_info<span class="token punctuation">;</span>
  <span class="token keyword">int</span> pid<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> block_size<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> offset<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pid<span class="token punctuation">[</span>kXPred<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>id_y<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>id_z<span class="token punctuation">,</span>
                        grid_id<span class="token operator">-&gt;</span>num_block_x<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>num_block_y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Blocking</span><span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> grid_info<span class="token operator">-&gt;</span>global_size_x<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>num_block_x<span class="token punctuation">,</span>
             <span class="token operator">&amp;</span>block_size<span class="token punctuation">[</span>kXPred<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_x <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> grid_id<span class="token operator">-&gt;</span>num_block_x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pid<span class="token punctuation">[</span>kXSucc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>id_y<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>id_z<span class="token punctuation">,</span>
                        grid_id<span class="token operator">-&gt;</span>num_block_x<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>num_block_y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Blocking</span><span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> grid_info<span class="token operator">-&gt;</span>global_size_x<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>num_block_x<span class="token punctuation">,</span>
             <span class="token operator">&amp;</span>block_size<span class="token punctuation">[</span>kXSucc<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_y <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pid<span class="token punctuation">[</span>kYPred<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_x<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>id_y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>id_z<span class="token punctuation">,</span>
                        grid_id<span class="token operator">-&gt;</span>num_block_x<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>num_block_y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Blocking</span><span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> grid_info<span class="token operator">-&gt;</span>global_size_y<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>num_block_y<span class="token punctuation">,</span>
             <span class="token operator">&amp;</span>block_size<span class="token punctuation">[</span>kYPred<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_y <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> grid_id<span class="token operator">-&gt;</span>num_block_y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pid<span class="token punctuation">[</span>kYSucc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_x<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>id_y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>id_z<span class="token punctuation">,</span>
                        grid_id<span class="token operator">-&gt;</span>num_block_x<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>num_block_y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Blocking</span><span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> grid_info<span class="token operator">-&gt;</span>global_size_y<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>num_block_y<span class="token punctuation">,</span>
             <span class="token operator">&amp;</span>block_size<span class="token punctuation">[</span>kYSucc<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_z <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pid<span class="token punctuation">[</span>kZPred<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_x<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>id_y<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>id_z <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
                        grid_id<span class="token operator">-&gt;</span>num_block_x<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>num_block_y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Blocking</span><span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_z <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> grid_info<span class="token operator">-&gt;</span>global_size_z<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>num_block_z<span class="token punctuation">,</span>
             <span class="token operator">&amp;</span>block_size<span class="token punctuation">[</span>kZPred<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_z <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> grid_id<span class="token operator">-&gt;</span>num_block_z<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    pid<span class="token punctuation">[</span>kZSucc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">INDEX</span><span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_x<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>id_y<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>id_z <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
                        grid_id<span class="token operator">-&gt;</span>num_block_x<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>num_block_y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Blocking</span><span class="token punctuation">(</span>grid_id<span class="token operator">-&gt;</span>id_z <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> grid_info<span class="token operator">-&gt;</span>global_size_z<span class="token punctuation">,</span> grid_id<span class="token operator">-&gt;</span>num_block_z<span class="token punctuation">,</span>
             <span class="token operator">&amp;</span>block_size<span class="token punctuation">[</span>kZSucc<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> nt<span class="token punctuation">;</span> <span class="token operator">++</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ptr_t a0 <span class="token operator">=</span> buffer<span class="token punctuation">[</span>t <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    ptr_t a1 <span class="token operator">=</span> buffer<span class="token punctuation">[</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>block_size<span class="token punctuation">[</span>kXPred<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token operator">&amp;</span>a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x_start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*sendtype=*/</span>YZ_PLANE<span class="token punctuation">,</span>
                   <span class="token comment">/*dest=*/</span>pid<span class="token punctuation">[</span>kXPred<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">/*sendtag=*/</span>kXPred<span class="token punctuation">,</span>
                   <span class="token comment">/*recvbuf=*/</span><span class="token operator">&amp;</span>a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x_start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*recvtype=*/</span>YZ_PLANE<span class="token punctuation">,</span>
                   <span class="token comment">/*source=*/</span>pid<span class="token punctuation">[</span>kXPred<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">/*recvtag=*/</span>kXSucc<span class="token punctuation">,</span>
                   <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span>MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>block_size<span class="token punctuation">[</span>kXSucc<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token operator">&amp;</span>a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x_end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*sendtype=*/</span>YZ_PLANE<span class="token punctuation">,</span>
                   <span class="token comment">/*dest=*/</span>pid<span class="token punctuation">[</span>kXSucc<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">/*sendtag=*/</span>kXSucc<span class="token punctuation">,</span>
                   <span class="token comment">/*recvbuf=*/</span><span class="token operator">&amp;</span>a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x_end<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*recvtype=*/</span>YZ_PLANE<span class="token punctuation">,</span>
                   <span class="token comment">/*source=*/</span>pid<span class="token punctuation">[</span>kXSucc<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">/*recvtag=*/</span>kXPred<span class="token punctuation">,</span>
                   <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span>MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>block_size<span class="token punctuation">[</span>kYPred<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token operator">&amp;</span>a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> y_start<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*sendtype=*/</span>XZ_PLANE<span class="token punctuation">,</span>
                   <span class="token comment">/*dest=*/</span>pid<span class="token punctuation">[</span>kYPred<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">/*sendtag=*/</span>kYPred<span class="token punctuation">,</span>
                   <span class="token comment">/*recvbuf=*/</span><span class="token operator">&amp;</span>a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> y_start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*recvtype=*/</span>XZ_PLANE<span class="token punctuation">,</span>
                   <span class="token comment">/*source=*/</span>pid<span class="token punctuation">[</span>kYPred<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">/*recvtag=*/</span>kYSucc<span class="token punctuation">,</span>
                   <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span>MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>block_size<span class="token punctuation">[</span>kYSucc<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token operator">&amp;</span>a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> y_end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*sendtype=*/</span>XZ_PLANE<span class="token punctuation">,</span>
                   <span class="token comment">/*dest=*/</span>pid<span class="token punctuation">[</span>kYSucc<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">/*sendtag=*/</span>kYSucc<span class="token punctuation">,</span>
                   <span class="token comment">/*recvbuf=*/</span><span class="token operator">&amp;</span>a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> y_end<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*recvtype=*/</span>XZ_PLANE<span class="token punctuation">,</span>
                   <span class="token comment">/*source=*/</span>pid<span class="token punctuation">[</span>kYSucc<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">/*recvtag=*/</span>kYPred<span class="token punctuation">,</span>
                   <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span>MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>block_size<span class="token punctuation">[</span>kZPred<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token operator">&amp;</span>a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> z_start<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*sendtype=*/</span>XY_PLANE<span class="token punctuation">,</span>
                   <span class="token comment">/*dest=*/</span>pid<span class="token punctuation">[</span>kZPred<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">/*sendtag=*/</span>kZPred<span class="token punctuation">,</span>
                   <span class="token comment">/*recvbuf=*/</span><span class="token operator">&amp;</span>a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> z_start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*recvtype=*/</span>XY_PLANE<span class="token punctuation">,</span>
                   <span class="token comment">/*source=*/</span>pid<span class="token punctuation">[</span>kZPred<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">/*recvtag=*/</span>kZSucc<span class="token punctuation">,</span>
                   <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span>MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>block_size<span class="token punctuation">[</span>kZSucc<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">MPI_Sendrecv</span><span class="token punctuation">(</span><span class="token comment">/*sendbuf=*/</span><span class="token operator">&amp;</span>a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> z_end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                   <span class="token comment">/*sendcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*sendtype=*/</span>XY_PLANE<span class="token punctuation">,</span>
                   <span class="token comment">/*dest=*/</span>pid<span class="token punctuation">[</span>kZSucc<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">/*sendtag=*/</span>kZSucc<span class="token punctuation">,</span>
                   <span class="token comment">/*recvbuf=*/</span><span class="token operator">&amp;</span>a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> z_end<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                   <span class="token comment">/*recvcount=*/</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">/*recvtype=*/</span>XY_PLANE<span class="token punctuation">,</span>
                   <span class="token comment">/*source=*/</span>pid<span class="token punctuation">[</span>kZSucc<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">/*recvtag=*/</span>kZPred<span class="token punctuation">,</span>
                   <span class="token comment">/*comm=*/</span>MPI_COMM_WORLD<span class="token punctuation">,</span> <span class="token comment">/*status=*/</span>MPI_STATUS_IGNORE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> z <span class="token operator">=</span> z_start<span class="token punctuation">;</span> z <span class="token operator">&lt;</span> z_end<span class="token punctuation">;</span> <span class="token operator">++</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> y_start<span class="token punctuation">;</span> y <span class="token operator">&lt;</span> y_end<span class="token punctuation">;</span> <span class="token operator">++</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">INTRINSIC</span></span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> x_start<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> x_end <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span> x <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">)</span>
          <span class="token function">Kernel7</span><span class="token punctuation">(</span>a0<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> x_end <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> x_end<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> x_start<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> x_end<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
          a1<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span>
              ALPHA_ZZZ <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span>
              ALPHA_NZZ <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span>
              ALPHA_PZZ <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span>
              ALPHA_ZNZ <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span>
              ALPHA_ZPZ <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> z<span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span>
              ALPHA_ZZN <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span>
              ALPHA_ZZP <span class="token operator">*</span> a0<span class="token punctuation">[</span><span class="token function">INDEX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ldx<span class="token punctuation">,</span> ldy<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> buffer<span class="token punctuation">[</span>nt <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mpi-performance" tabindex="-1"><a class="header-anchor" href="#mpi-performance"><span>MPI Performance</span></a></h3><table><thead><tr><th>Threads</th><th>Computation Time (s)</th><th>Performance (Gflop/s)</th><th>Speedup / Single Thread</th><th>Speedup / Naive Single Thread</th></tr></thead><tbody><tr><td>1</td><td>31.195547</td><td>5.593204</td><td>1.</td><td>8.561332290</td></tr><tr><td>2</td><td>16.056561</td><td>10.866776</td><td>1.94285351</td><td>16.63341446</td></tr><tr><td>4</td><td>8.557309</td><td>20.389943</td><td>3.64548531</td><td>31.21021108</td></tr><tr><td>8</td><td>4.688768</td><td>37.212980</td><td>6.65324919</td><td>56.96067717</td></tr><tr><td>16</td><td>3.599826</td><td>48.469855</td><td>8.66584788</td><td>74.19120326</td></tr><tr><td>28</td><td>3.494326</td><td>49.933255</td><td>8.92748682</td><td>76.43118122</td></tr></tbody></table><h2 id="performance" tabindex="-1"><a class="header-anchor" href="#performance"><span>Performance</span></a></h2><h3 id="naive-1" tabindex="-1"><a class="header-anchor" href="#naive-1"><span>Naive</span></a></h3><h4 id="no-opt" tabindex="-1"><a class="header-anchor" href="#no-opt"><span>No OPT</span></a></h4><table><thead><tr><th>Size</th><th>Computation Time (s)</th><th>Performance (Gflop/s)</th></tr></thead><tbody><tr><td>256 x 256 x 256</td><td>1.310379</td><td>16.644326</td></tr><tr><td>512 x 512 x 512</td><td>10.179150</td><td>17.141220</td></tr><tr><td>768 x 768 x 768</td><td>33.206675</td><td>17.733793</td></tr></tbody></table><h4 id="opt" tabindex="-1"><a class="header-anchor" href="#opt"><span>OPT</span></a></h4><table><thead><tr><th>Size</th><th>Computation Time (s)</th><th>Performance (Gflop/s)</th><th>Speedup / Naive</th></tr></thead><tbody><tr><td>256 x 256 x 256</td><td>1.042685</td><td>20.917516</td><td>1.25673554</td></tr><tr><td>512 x 512 x 512</td><td>6.357943</td><td>27.443318</td><td>1.60101311</td></tr><tr><td>768 x 768 x 768</td><td>21.682391</td><td>27.159379</td><td>1.53150423</td></tr></tbody></table><h3 id="omp-1" tabindex="-1"><a class="header-anchor" href="#omp-1"><span>OMP</span></a></h3><h4 id="_2d-cache-blocking" tabindex="-1"><a class="header-anchor" href="#_2d-cache-blocking"><span>2D Cache Blocking</span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> tx <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> ty <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>Size</th><th>Computation Time (s)</th><th>Performance (Gflop/s)</th><th>Speedup / Naive</th><th>Speedup / Naive OPT</th></tr></thead><tbody><tr><td>256 x 256 x 256</td><td>0.656014</td><td>33.246826</td><td>1.99748707</td><td>1.58942515</td></tr><tr><td>512 x 512 x 512</td><td>4.403168</td><td>39.626707</td><td>2.31177868</td><td>1.44394738</td></tr><tr><td>768 x 768 x 768</td><td>15.625801</td><td>37.686406</td><td>2.12511819</td><td>1.38760190</td></tr></tbody></table><h4 id="cache-oblivious" tabindex="-1"><a class="header-anchor" href="#cache-oblivious"><span>Cache Oblivious</span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> kCutoff <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> ds <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>Size</th><th>Computation Time (s)</th><th>Performance (Gflop/s)</th><th>Speedup / Naive</th><th>Speedup / Naive OPT</th></tr></thead><tbody><tr><td>256 x 256 x 256</td><td>0.290660</td><td>75.037455</td><td>4.50829039</td><td>3.58730238</td></tr><tr><td>512 x 512 x 512</td><td>5.862571</td><td>29.762205</td><td>1.73629444</td><td>1.08449733</td></tr><tr><td>768 x 768 x 768</td><td>17.230060</td><td>34.177494</td><td>1.92725234</td><td>1.25840484</td></tr></tbody></table><h4 id="time-skewing" tabindex="-1"><a class="header-anchor" href="#time-skewing"><span>Time Skewing</span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span> tx <span class="token operator">=</span> x_end <span class="token operator">-</span> x_start<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> ty <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> tz <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>Size</th><th>Computation Time (s)</th><th>Performance (Gflop/s)</th><th>Speedup / Naive</th><th>Speedup / Naive OPT</th></tr></thead><tbody><tr><td>256 x 256 x 256</td><td>0.244840</td><td>89.080177</td><td>5.35198463</td><td>4.25864032</td></tr><tr><td>512 x 512 x 512</td><td>3.916044</td><td>44.555941</td><td>2.59934480</td><td>1.62356246</td></tr><tr><td>768 x 768 x 768</td><td>11.524923</td><td>51.096243</td><td>2.88129240</td><td>1.88134799</td></tr></tbody></table><h4 id="circular-queue" tabindex="-1"><a class="header-anchor" href="#circular-queue"><span>Circular Queue</span></a></h4><table><thead><tr><th>Size</th><th>Computation Time (s)</th><th>Performance (Gflop/s)</th><th>Speedup / Naive</th><th>Speedup / Naive OPT</th></tr></thead><tbody><tr><td>256 x 256 x 256</td><td>1.461332</td><td>14.925003</td><td>0.89670216</td><td>0.71351699</td></tr><tr><td>512 x 512 x 512</td><td>12.507371</td><td>13.950418</td><td>0.81385211</td><td>0.50833569</td></tr><tr><td>768 x 768 x 768</td><td>40.458871</td><td>14.555035</td><td>0.82075138</td><td>0.53591192</td></tr></tbody></table><h4 id="auto-simd" tabindex="-1"><a class="header-anchor" href="#auto-simd"><span>Auto SIMD</span></a></h4><table><thead><tr><th>Size</th><th>Computation Time (s)</th><th>Performance (Gflop/s)</th><th>Speedup / Naive</th><th>Speedup / Naive OPT</th></tr></thead><tbody><tr><td>256 x 256 x 256</td><td>0.728613</td><td>29.934117</td><td>1.79845774</td><td>1.43105505</td></tr><tr><td>512 x 512 x 512</td><td>5.759591</td><td>30.294345</td><td>1.76733891</td><td>1.10388784</td></tr><tr><td>768 x 768 x 768</td><td>16.067388</td><td>36.650655</td><td>2.06671269</td><td>1.34946587</td></tr></tbody></table><h4 id="intrinsic" tabindex="-1"><a class="header-anchor" href="#intrinsic"><span>Intrinsic</span></a></h4><table><thead><tr><th>Size</th><th>Computation Time (s)</th><th>Performance (Gflop/s)</th><th>Speedup / Naive</th><th>Speedup / Naive OPT</th></tr></thead><tbody><tr><td>256 x 256 x 256</td><td>0.715376</td><td>30.487998</td><td>1.83173521</td><td>1.45753435</td></tr><tr><td>512 x 512 x 512</td><td>5.494364</td><td>31.756734</td><td>1.85265308</td><td>1.15717546</td></tr><tr><td>768 x 768 x 768</td><td>16.741729</td><td>35.174399</td><td>1.98346733</td><td>1.29511058</td></tr></tbody></table><h4 id="time-skewing-intrinsic" tabindex="-1"><a class="header-anchor" href="#time-skewing-intrinsic"><span>Time Skewing + Intrinsic</span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span> tx <span class="token operator">=</span> x_end <span class="token operator">-</span> x_start<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> ty <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> tz <span class="token operator">=</span> <span class="token number">112</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>Size</th><th>Computation Time (s)</th><th>Performance (Gflop/s)</th><th>Speedup / Naive</th><th>Speedup / Naive OPT</th></tr></thead><tbody><tr><td>256 x 256 x 256</td><td>0.252214</td><td>86.475845</td><td>5.19551498</td><td>4.13413548</td></tr><tr><td>512 x 512 x 512</td><td>2.525018</td><td>69.101709</td><td>4.03131802</td><td>2.51797939</td></tr><tr><td>768 x 768 x 768</td><td>8.686356</td><td>67.793709</td><td>3.82285442</td><td>2.49614356</td></tr></tbody></table><h3 id="mpi-1" tabindex="-1"><a class="header-anchor" href="#mpi-1"><span>MPI</span></a></h3><h4 id="blocking-communication" tabindex="-1"><a class="header-anchor" href="#blocking-communication"><span>Blocking Communication</span></a></h4><table><thead><tr><th>Size</th><th>Computation Time (s)</th><th>Performance (Gflop/s)</th><th>Speedup / Naive</th><th>Speedup / Naive OPT</th></tr></thead><tbody><tr><td>256 x 256 x 256</td><td>0.501527</td><td>43.487911</td><td>2.61277693</td><td>2.07901889</td></tr><tr><td>512 x 512 x 512</td><td>4.659057</td><td>37.450291</td><td>2.18480896</td><td>1.36464151</td></tr><tr><td>768 x 768 x 768</td><td>15.672776</td><td>37.573451</td><td>2.11874871</td><td>1.38344294</td></tr></tbody></table><h4 id="non-blocking-communication" tabindex="-1"><a class="header-anchor" href="#non-blocking-communication"><span>Non-Blocking Communication</span></a></h4><table><thead><tr><th>Size</th><th>Computation Time (s)</th><th>Performance (Gflop/s)</th><th>Speedup / Naive</th><th>Speedup / Naive OPT</th></tr></thead><tbody><tr><td>256 x 256 x 256</td><td>0.490962</td><td>44.423804</td><td>2.66900588</td><td>2.12376097</td></tr><tr><td>512 x 512 x 512</td><td>4.637739</td><td>37.622439</td><td>2.19485188</td><td>1.37091437</td></tr><tr><td>768 x 768 x 768</td><td>16.453953</td><td>35.789594</td><td>2.01815788</td><td>1.31776187</td></tr></tbody></table><h4 id="_3d-blocking" tabindex="-1"><a class="header-anchor" href="#_3d-blocking"><span>3D Blocking</span></a></h4><table><thead><tr><th>Size</th><th>Computation Time (s)</th><th>Performance (Gflop/s)</th><th>Speedup / Naive</th><th>Speedup / Naive OPT</th></tr></thead><tbody><tr><td>256 x 256 x 256</td><td>0.377116</td><td>57.834689</td><td>3.47473902</td><td>2.76489278</td></tr><tr><td>512 x 512 x 512</td><td>3.540040</td><td>49.288444</td><td>2.87543384</td><td>1.79600892</td></tr><tr><td>768 x 768 x 768</td><td>14.868124</td><td>39.606897</td><td>2.23341374</td><td>1.45831379</td></tr></tbody></table><h4 id="_3d-blocking-intrinsic" tabindex="-1"><a class="header-anchor" href="#_3d-blocking-intrinsic"><span>3D Blocking + Intrinsic</span></a></h4><table><thead><tr><th>Size</th><th>Computation Time (s)</th><th>Performance (Gflop/s)</th><th>Speedup / Naive</th><th>Speedup / Naive OPT</th></tr></thead><tbody><tr><td>256 x 256 x 256</td><td>0.400361</td><td>54.476819</td><td>3.27299640</td><td>2.60436368</td></tr><tr><td>512 x 512 x 512</td><td>3.460323</td><td>50.423912</td><td>2.94167580</td><td>1.83738395</td></tr><tr><td>768 x 768 x 768</td><td>14.525021</td><td>40.542475</td><td>2.28617053</td><td>1.49276149</td></tr></tbody></table>`,44);function m(v,_){const t=o("ExternalLinkIcon");return e(),c("div",null,[u,s("p",null,[n("其余的算法, 如 2D Cache Blocking, Cache Oblivious, Circular Queue 等算法也参考 "),s("a",k,[n("StencilProbe"),l(t)]),n(" 进行了实现和测试, 均不如 Time Skewing 高效, 测试结果见 "),r,n(".")]),d])}const y=p(i,[["render",m],["__file","2022-05-17-pa2-模板计算.html.vue"]]),h=JSON.parse('{"path":"/2022/course-work/hpc/2022-05-17-pa2-%E6%A8%A1%E6%9D%BF%E8%AE%A1%E7%AE%97.html","title":"PA2: 模板计算","lang":"en-US","frontmatter":{"date":"2022-05-17T00:00:00.000Z","isOriginal":true,"category":["Course Work"],"tag":["Introduction to High Performance Computing","MPI","OMP"],"title":"PA2: 模板计算","description":"Size: 512 x 512 x 512 Naive No OPT Performance OPT Performance OMP 使用 Time Skewing + Intrinsic 手动向量化进行优化. Time Skewing 通过在空间维度上进行分块, 在时间维度上进行斜向划分, 使得 t + 1 时刻的计算能够利用 t 时刻缓存在 cac...","head":[["meta",{"property":"og:url","content":"https://blog.liblaf.me/2022/course-work/hpc/2022-05-17-pa2-%E6%A8%A1%E6%9D%BF%E8%AE%A1%E7%AE%97.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"PA2: 模板计算"}],["meta",{"property":"og:description","content":"Size: 512 x 512 x 512 Naive No OPT Performance OPT Performance OMP 使用 Time Skewing + Intrinsic 手动向量化进行优化. Time Skewing 通过在空间维度上进行分块, 在时间维度上进行斜向划分, 使得 t + 1 时刻的计算能够利用 t 时刻缓存在 cac..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-03T09:57:39.000Z"}],["meta",{"property":"article:author","content":"liblaf"}],["meta",{"property":"article:tag","content":"Introduction to High Performance Computing"}],["meta",{"property":"article:tag","content":"MPI"}],["meta",{"property":"article:tag","content":"OMP"}],["meta",{"property":"article:published_time","content":"2022-05-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-03T09:57:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PA2: 模板计算\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-03T09:57:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://liblaf.me\\",\\"email\\":\\"i@liblaf.me\\"}]}"]]},"headers":[{"level":2,"title":"Naive","slug":"naive","link":"#naive","children":[{"level":3,"title":"No OPT Performance","slug":"no-opt-performance","link":"#no-opt-performance","children":[]},{"level":3,"title":"OPT Performance","slug":"opt-performance","link":"#opt-performance","children":[]}]},{"level":2,"title":"OMP","slug":"omp","link":"#omp","children":[{"level":3,"title":"OMP Performance","slug":"omp-performance","link":"#omp-performance","children":[]}]},{"level":2,"title":"MPI","slug":"mpi","link":"#mpi","children":[{"level":3,"title":"MPI Performance","slug":"mpi-performance","link":"#mpi-performance","children":[]}]},{"level":2,"title":"Performance","slug":"performance","link":"#performance","children":[{"level":3,"title":"Naive","slug":"naive-1","link":"#naive-1","children":[]},{"level":3,"title":"OMP","slug":"omp-1","link":"#omp-1","children":[]},{"level":3,"title":"MPI","slug":"mpi-1","link":"#mpi-1","children":[]}]}],"git":{"createdTime":1677217008000,"updatedTime":1709459859000,"contributors":[{"name":"liblaf","email":"30631553+liblaf@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":10.82,"words":3246},"filePathRelative":"2022/course-work/hpc/2022-05-17-pa2-模板计算.md","localizedDate":"May 17, 2022","excerpt":"<p>Size: 512 x 512 x 512</p>\\n<h2>Naive</h2>\\n<h3>No OPT Performance</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>Threads</th>\\n<th>Computation Time (s)</th>\\n<th>Performance (Gflop/s)</th>\\n<th>Speedup / Single Thread</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>1</td>\\n<td>267.075484</td>\\n<td>0.653310</td>\\n<td>1.</td>\\n</tr>\\n<tr>\\n<td>2</td>\\n<td>135.902281</td>\\n<td>1.283886</td>\\n<td>1.96520182</td>\\n</tr>\\n<tr>\\n<td>4</td>\\n<td>70.080111</td>\\n<td>2.489766</td>\\n<td>3.81100243</td>\\n</tr>\\n<tr>\\n<td>8</td>\\n<td>36.813651</td>\\n<td>4.739629</td>\\n<td>7.25479328</td>\\n</tr>\\n<tr>\\n<td>16</td>\\n<td>25.793147</td>\\n<td>6.764706</td>\\n<td>10.35451164</td>\\n</tr>\\n<tr>\\n<td>28</td>\\n<td>17.400062</td>\\n<td>10.027726</td>\\n<td>15.34910839</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{y as comp,h as data};
