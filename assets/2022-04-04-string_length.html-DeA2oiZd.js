import{_ as n,o as s,c as a,e}from"./app-CoV9NwP4.js";const t={},i=e(`<h2 id="assembly" tabindex="-1"><a class="header-anchor" href="#assembly"><span>Assembly</span></a></h2><div class="language-assembly line-numbers-mode" data-ext="assembly" data-title="assembly"><pre class="language-assembly"><code>0000000000401876 &lt;string_length&gt;:
b0:
  401876:	80 3f 00             	cmpb   $0x0,(%rdi)
  401879:	74 12                	je     40188d &lt;string_length+0x17&gt;
  40187b:	48 89 fa             	mov    %rdi,%rdx
b1:
  40187e:	48 83 c2 01          	add    $0x1,%rdx
  401882:	89 d0                	mov    %edx,%eax
  401884:	29 f8                	sub    %edi,%eax
  401886:	80 3a 00             	cmpb   $0x0,(%rdx)
  401889:	75 f3                	jne    40187e &lt;string_length+0x8&gt;
  40188b:	f3 c3                	repz retq
b2:
  40188d:	b8 00 00 00 00       	mov    $0x0,%eax
  401892:	c3                   	retq
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="翻译为-c" tabindex="-1"><a class="header-anchor" href="#翻译为-c"><span>翻译为 C</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">string_length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token function">string_length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
b0<span class="token operator">:</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>rdi <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> b2<span class="token punctuation">;</span>
  rdx <span class="token operator">=</span> rdi<span class="token punctuation">;</span>
b1<span class="token operator">:</span>
  <span class="token operator">++</span>rdx<span class="token punctuation">;</span>
  rax <span class="token operator">=</span> rdx<span class="token punctuation">;</span>   <span class="token comment">// 32-bit</span>
  rax <span class="token operator">-=</span> rdi<span class="token punctuation">;</span>  <span class="token comment">// 32-bit</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>rdx <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">goto</span> b1<span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
b2<span class="token operator">:</span>
  rax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 32-bit</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="optimize" tabindex="-1"><a class="header-anchor" href="#optimize"><span>Optimize</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">string_length</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> rdi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span><span class="token operator">*</span> rdx <span class="token operator">=</span> rdi<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>rdx<span class="token punctuation">)</span> <span class="token operator">++</span>rdi<span class="token punctuation">;</span>
  <span class="token keyword">return</span> rdx <span class="token operator">-</span> rdi<span class="token punctuation">;</span>  <span class="token comment">// rax</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),l=[i];function o(p,r){return s(),a("div",null,l)}const d=n(t,[["render",o],["__file","2022-04-04-string_length.html.vue"]]),u=JSON.parse('{"path":"/2022/course-work/csapp/bomb-lab/2022-04-04-string_length.html","title":"Bomb Lab: string length","lang":"en-US","frontmatter":{"date":"2022-04-04T00:00:00.000Z","isOriginal":true,"category":["Course Work"],"tag":["Bomb Lab","Computer Organization and Architecture"],"title":"Bomb Lab: string length","description":"Assembly 翻译为 C Optimize","head":[["meta",{"property":"og:url","content":"https://blog.liblaf.me/2022/course-work/csapp/bomb-lab/2022-04-04-string_length.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"Bomb Lab: string length"}],["meta",{"property":"og:description","content":"Assembly 翻译为 C Optimize"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-03T09:57:39.000Z"}],["meta",{"property":"article:author","content":"liblaf"}],["meta",{"property":"article:tag","content":"Bomb Lab"}],["meta",{"property":"article:tag","content":"Computer Organization and Architecture"}],["meta",{"property":"article:published_time","content":"2022-04-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-03T09:57:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bomb Lab: string length\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-03T09:57:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://liblaf.me\\",\\"email\\":\\"i@liblaf.me\\"}]}"]]},"headers":[{"level":2,"title":"Assembly","slug":"assembly","link":"#assembly","children":[]},{"level":2,"title":"翻译为 C","slug":"翻译为-c","link":"#翻译为-c","children":[]},{"level":2,"title":"Optimize","slug":"optimize","link":"#optimize","children":[]}],"git":{"createdTime":1677217008000,"updatedTime":1709459859000,"contributors":[{"name":"liblaf","email":"30631553+liblaf@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":0.51,"words":153},"filePathRelative":"2022/course-work/csapp/bomb-lab/2022-04-04-string_length.md","localizedDate":"April 4, 2022","excerpt":"<h2>Assembly</h2>\\n<div class=\\"language-assembly\\" data-ext=\\"assembly\\" data-title=\\"assembly\\"><pre class=\\"language-assembly\\"><code>0000000000401876 &lt;string_length&gt;:\\nb0:\\n  401876:\\t80 3f 00             \\tcmpb   $0x0,(%rdi)\\n  401879:\\t74 12                \\tje     40188d &lt;string_length+0x17&gt;\\n  40187b:\\t48 89 fa             \\tmov    %rdi,%rdx\\nb1:\\n  40187e:\\t48 83 c2 01          \\tadd    $0x1,%rdx\\n  401882:\\t89 d0                \\tmov    %edx,%eax\\n  401884:\\t29 f8                \\tsub    %edi,%eax\\n  401886:\\t80 3a 00             \\tcmpb   $0x0,(%rdx)\\n  401889:\\t75 f3                \\tjne    40187e &lt;string_length+0x8&gt;\\n  40188b:\\tf3 c3                \\trepz retq\\nb2:\\n  40188d:\\tb8 00 00 00 00       \\tmov    $0x0,%eax\\n  401892:\\tc3                   \\tretq\\n</code></pre></div>","autoDesc":true}');export{d as comp,u as data};
