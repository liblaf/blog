import{_ as a,o as n,c as s,e}from"./app-CoV9NwP4.js";const t={},i=e(`<h2 id="assembly" tabindex="-1"><a class="header-anchor" href="#assembly"><span>Assembly</span></a></h2><div class="language-assembly line-numbers-mode" data-ext="assembly" data-title="assembly"><pre class="language-assembly"><code>0000000000401440 &lt;phase_1&gt;:
b0:
  401440:	48 83 ec 08          	sub    $0x8,%rsp
  401444:	48 8d 35 05 1d 00 00 	lea    0x1d05(%rip),%rsi        # 403150 &lt;_IO_stdin_used+0x150&gt;
  40144b:	e8 43 04 00 00       	callq  401893 &lt;strings_not_equal&gt;
  401450:	85 c0                	test   %eax,%eax
  401452:	74 05                	je     401459 &lt;phase_1+0x19&gt;
  401454:	e8 03 07 00 00       	callq  401b5c &lt;explode_bomb&gt;
b1:
  401459:	48 83 c4 08          	add    $0x8,%rsp
  40145d:	c3                   	retq
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="翻译为-c" tabindex="-1"><a class="header-anchor" href="#翻译为-c"><span>翻译为 C</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">phase_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
b0<span class="token operator">:</span>
  rsp <span class="token operator">-=</span> <span class="token number">8</span><span class="token punctuation">;</span>
  rsi <span class="token operator">=</span> rip <span class="token operator">+</span> <span class="token number">0x1d05</span><span class="token punctuation">;</span>
  rax <span class="token operator">=</span> <span class="token function">strings_not_equal</span><span class="token punctuation">(</span>rdi<span class="token punctuation">,</span> rsi<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rax <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// 32-bit</span>
    <span class="token keyword">goto</span> b1<span class="token punctuation">;</span>
  <span class="token function">explode_bomb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
b1<span class="token operator">:</span>
  rsp <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="optimize" tabindex="-1"><a class="header-anchor" href="#optimize"><span>Optimize</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">phase_1</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> rdi<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span><span class="token operator">*</span> rsi <span class="token operator">=</span> <span class="token number">0x403150</span><span class="token punctuation">;</span> <span class="token comment">// 403150 &lt;_IO_stdin_used+0x150&gt;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strings_not_equal</span><span class="token punctuation">(</span>rdi<span class="token punctuation">,</span> rsi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">explode_bomb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hack" tabindex="-1"><a class="header-anchor" href="#hack"><span>Hack</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>(gdb) x/s 0x403150
0x403150:       &quot;I am not part of the problem. I am a Republican.&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="solution" tabindex="-1"><a class="header-anchor" href="#solution"><span>Solution</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>I am not part of the problem. I am a Republican.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10),l=[i];function o(p,c){return n(),s("div",null,l)}const d=a(t,[["render",o],["__file","2022-04-04-phase_1.html.vue"]]),u=JSON.parse('{"path":"/2022/course-work/csapp/bomb-lab/2022-04-04-phase_1.html","title":"Bomb Lab: Phase 1","lang":"en-US","frontmatter":{"date":"2022-04-04T00:00:00.000Z","isOriginal":true,"category":["Course Work"],"tag":["Bomb Lab","Computer Organization and Architecture"],"title":"Bomb Lab: Phase 1","description":"Assembly 翻译为 C Optimize Hack Solution","head":[["meta",{"property":"og:url","content":"https://blog.liblaf.me/2022/course-work/csapp/bomb-lab/2022-04-04-phase_1.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"Bomb Lab: Phase 1"}],["meta",{"property":"og:description","content":"Assembly 翻译为 C Optimize Hack Solution"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-03T09:57:39.000Z"}],["meta",{"property":"article:author","content":"liblaf"}],["meta",{"property":"article:tag","content":"Bomb Lab"}],["meta",{"property":"article:tag","content":"Computer Organization and Architecture"}],["meta",{"property":"article:published_time","content":"2022-04-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-03T09:57:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Bomb Lab: Phase 1\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-03T09:57:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://liblaf.me\\",\\"email\\":\\"i@liblaf.me\\"}]}"]]},"headers":[{"level":2,"title":"Assembly","slug":"assembly","link":"#assembly","children":[]},{"level":2,"title":"翻译为 C","slug":"翻译为-c","link":"#翻译为-c","children":[]},{"level":2,"title":"Optimize","slug":"optimize","link":"#optimize","children":[]},{"level":2,"title":"Hack","slug":"hack","link":"#hack","children":[]},{"level":2,"title":"Solution","slug":"solution","link":"#solution","children":[]}],"git":{"createdTime":1677217008000,"updatedTime":1709459859000,"contributors":[{"name":"liblaf","email":"30631553+liblaf@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":0.54,"words":163},"filePathRelative":"2022/course-work/csapp/bomb-lab/2022-04-04-phase_1.md","localizedDate":"April 4, 2022","excerpt":"<h2>Assembly</h2>\\n<div class=\\"language-assembly\\" data-ext=\\"assembly\\" data-title=\\"assembly\\"><pre class=\\"language-assembly\\"><code>0000000000401440 &lt;phase_1&gt;:\\nb0:\\n  401440:\\t48 83 ec 08          \\tsub    $0x8,%rsp\\n  401444:\\t48 8d 35 05 1d 00 00 \\tlea    0x1d05(%rip),%rsi        # 403150 &lt;_IO_stdin_used+0x150&gt;\\n  40144b:\\te8 43 04 00 00       \\tcallq  401893 &lt;strings_not_equal&gt;\\n  401450:\\t85 c0                \\ttest   %eax,%eax\\n  401452:\\t74 05                \\tje     401459 &lt;phase_1+0x19&gt;\\n  401454:\\te8 03 07 00 00       \\tcallq  401b5c &lt;explode_bomb&gt;\\nb1:\\n  401459:\\t48 83 c4 08          \\tadd    $0x8,%rsp\\n  40145d:\\tc3                   \\tretq\\n</code></pre></div>","autoDesc":true}');export{d as comp,u as data};
