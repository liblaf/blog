import{_ as n,o as s,c as a,e}from"./app-CoV9NwP4.js";const t={},c=e(`<h2 id="linux-types-h" tabindex="-1"><a class="header-anchor" href="#linux-types-h"><span>&lt;linux/types.h&gt;</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">dev_t</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>dev_t</code> is the type used to represent device numbers within the kernel.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">MAJOR</span><span class="token punctuation">(</span><span class="token class-name">dev_t</span> dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">MINOR</span><span class="token punctuation">(</span><span class="token class-name">dev_t</span> dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Macros that extract the major and minor numbers from a device number.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">dev_t</span> <span class="token function">MKDEV</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> major<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> minor<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Macro that builds a <code>dev_t</code> data item from the major and minor numbers.</p><h2 id="linux-fs-h" tabindex="-1"><a class="header-anchor" href="#linux-fs-h"><span>&lt;linux/fs.h&gt;</span></a></h2><p>The “filesystem” header is the header required for writing device drivers. Many important functions and data structures are declared in here.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">register_chrdev_region</span><span class="token punctuation">(</span><span class="token class-name">dev_t</span> first<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">alloc_chrdev_region</span><span class="token punctuation">(</span><span class="token class-name">dev_t</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> firstminor<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">unregister_chrdev_region</span><span class="token punctuation">(</span><span class="token class-name">dev_t</span> first<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions that allow a driver to allocate and free ranges of device numbers. <code>register_chrdev_region</code> should be used when the desired major number is known in advance; for dynamic allocation, use <code>alloc_chrdev_region</code> instead.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">register_chrdev</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> major<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> <span class="token operator">*</span>fops<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The old (pre-2.6) char device registration routine. It is emulated in the 2.6 kernel but should not be used for new code. If the major number is not 0, it is used unchanged; otherwise a dynamic number is assigned for this device.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">unregister_chrdev</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> major<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Function that undoes a registration made with <code>register_chrdev</code>. Both <code>major</code> and the <code>name</code> string must contain the same values that were used to register the driver.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">file_operations</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">file</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">inode</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Three important data structures used by most device drivers. The <code>file_operations</code> structure holds a char driver’s methods; <code>struct file</code> represents an open file, and <code>struct inode</code> represents a file on disk.</p><h2 id="linux-cdev-h" tabindex="-1"><a class="header-anchor" href="#linux-cdev-h"><span>&lt;linux/cdev.h&gt;</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">cdev</span> <span class="token operator">*</span><span class="token function">cdev_alloc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">cdev_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cdev</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> <span class="token operator">*</span>fops<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">cdev_add</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cdev</span> <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token class-name">dev_t</span> num<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">cdev_del</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">cdev</span> <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Functions for the management of <code>cdev</code> structures, which represent char devices within the kernel.</p><h2 id="linux-kernel-h" tabindex="-1"><a class="header-anchor" href="#linux-kernel-h"><span>&lt;linux/kernel.h&gt;</span></a></h2><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token function">container_of</span><span class="token punctuation">(</span>pointer<span class="token punctuation">,</span> type<span class="token punctuation">,</span> field<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A convenience macro that may be used to obtain a pointer to a structure from a pointer to some other structure contained within it.</p><h2 id="asm-uaccess-h" tabindex="-1"><a class="header-anchor" href="#asm-uaccess-h"><span>&lt;asm/uaccess.h&gt;</span></a></h2><p>This include file declares functions used by kernel code to move data to and from user space.</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">copy_from_user</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>to<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token function">copy_to_user</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>to<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Copy data between user space and kernel space.</p>`,27),o=[c];function p(i,r){return s(),a("div",null,o)}const d=n(t,[["render",p],["__file","2022-05-13-linux-device-drivers-char-drivers.html.vue"]]),u=JSON.parse('{"path":"/2022/research/notes/linux-device-drivers/2022-05-13-linux-device-drivers-char-drivers.html","title":"Linux Device Drivers | Char Drivers","lang":"en-US","frontmatter":{"date":"2022-05-13T00:00:00.000Z","isOriginal":false,"category":["Research"],"tag":["C/C++","Linux","Linux Device Drivers","Linux Kernel"],"title":"Linux Device Drivers | Char Drivers","description":"<linux/types.h> dev_t is the type used to represent device numbers within the kernel. Macros that extract the major and minor numbers from a device number. Macro that builds a d...","head":[["meta",{"property":"og:url","content":"https://blog.liblaf.me/2022/research/notes/linux-device-drivers/2022-05-13-linux-device-drivers-char-drivers.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"Linux Device Drivers | Char Drivers"}],["meta",{"property":"og:description","content":"<linux/types.h> dev_t is the type used to represent device numbers within the kernel. Macros that extract the major and minor numbers from a device number. Macro that builds a d..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-03T09:57:39.000Z"}],["meta",{"property":"article:author","content":"liblaf"}],["meta",{"property":"article:tag","content":"C/C++"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:tag","content":"Linux Device Drivers"}],["meta",{"property":"article:tag","content":"Linux Kernel"}],["meta",{"property":"article:published_time","content":"2022-05-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-03T09:57:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux Device Drivers | Char Drivers\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-13T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-03T09:57:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://liblaf.me\\",\\"email\\":\\"i@liblaf.me\\"}]}"]]},"headers":[{"level":2,"title":"<linux/types.h>","slug":"linux-types-h","link":"#linux-types-h","children":[]},{"level":2,"title":"<linux/fs.h>","slug":"linux-fs-h","link":"#linux-fs-h","children":[]},{"level":2,"title":"<linux/cdev.h>","slug":"linux-cdev-h","link":"#linux-cdev-h","children":[]},{"level":2,"title":"<linux/kernel.h>","slug":"linux-kernel-h","link":"#linux-kernel-h","children":[]},{"level":2,"title":"<asm/uaccess.h>","slug":"asm-uaccess-h","link":"#asm-uaccess-h","children":[]}],"git":{"createdTime":1677217008000,"updatedTime":1709459859000,"contributors":[{"name":"liblaf","email":"30631553+liblaf@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":1.37,"words":411},"filePathRelative":"2022/research/notes/linux-device-drivers/2022-05-13-linux-device-drivers-char-drivers.md","localizedDate":"May 13, 2022","excerpt":"<h2>&lt;linux/types.h&gt;</h2>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token class-name\\">dev_t</span>\\n</code></pre></div><p><code>dev_t</code> is the type used to represent device numbers within the kernel.</p>\\n<div class=\\"language-c\\" data-ext=\\"c\\" data-title=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token keyword\\">int</span> <span class=\\"token function\\">MAJOR</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">dev_t</span> dev<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">MINOR</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">dev_t</span> dev<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,u as data};
