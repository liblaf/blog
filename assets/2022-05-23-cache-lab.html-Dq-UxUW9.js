import{_ as n,o as s,c as a,e as t}from"./app-CoV9NwP4.js";const e={},p=t(`<h2 id="part-a-writing-a-cache-simulator" tabindex="-1"><a class="header-anchor" href="#part-a-writing-a-cache-simulator"><span>Part A: Writing a Cache Simulator</span></a></h2><blockquote><p><code>argparse</code> 部分使用了更强大的 <code>argp</code>, 而没有使用 <code>getopt</code> (因为一开始没看到作业建议用 <code>getopt</code>)</p></blockquote><p>忽略 Instruction Load, Data Load 和 Data Store 都可看作访问一次 cache, 而 Data Modify 由 Data Load 和 Data Store 组成可看作访问两次 cache.</p><p><code>Cache</code> 中包含一个 <code>clock_t now;</code> 作为时钟, 每次访问 cache 都会使它 <code>++</code>. 对于每一个 <code>CacheLine</code>, 使用 <code>timestamp</code> 记录其最近一次被访问到的时间戳.</p><p>对于一个访问, 首先计算 <code>set_index</code> 和 <code>tag</code>, 即数据应当存放在哪个 <code>CacheSet</code> 中, 相应的 <code>tag</code> 是多少.</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>SetIndex set_index <span class="token operator">=</span>
    <span class="token punctuation">(</span>address <span class="token operator">&gt;&gt;</span> cache<span class="token operator">-&gt;</span>num_block_bits<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>cache<span class="token operator">-&gt;</span>num_sets <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Tag tag <span class="token operator">=</span> <span class="token punctuation">(</span>address <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>cache<span class="token operator">-&gt;</span>num_block_bits <span class="token operator">+</span> cache<span class="token operator">-&gt;</span>num_set_index_bits<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后搜索所需数据是否已在 cache 中</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cache<span class="token operator">-&gt;</span>num_lines_per_set<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cache_lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>valid <span class="token operator">&amp;&amp;</span> cache_lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tag <span class="token operator">==</span> tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// hit</span>
    cache_lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>timestamp <span class="token operator">=</span> cache<span class="token operator">-&gt;</span>now<span class="token punctuation">;</span>
    <span class="token operator">++</span><span class="token punctuation">(</span>cache<span class="token operator">-&gt;</span>hits<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token operator">-&gt;</span>verbose<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;hit &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果找到, 则 hit, 否则 miss</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// no hit, miss</span>
<span class="token operator">++</span><span class="token punctuation">(</span>cache<span class="token operator">-&gt;</span>misses<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token operator">-&gt;</span>verbose<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;miss &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 miss, 首先寻找空 <code>CacheLine</code>, 尝试将数据存入空 <code>CacheLine</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// search for empty line</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cache<span class="token operator">-&gt;</span>num_lines_per_set<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cache_lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>valid <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// find an empty line</span>
    cache_lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>valid <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    cache_lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag<span class="token punctuation">;</span>
    cache_lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>timestamp <span class="token operator">=</span> cache<span class="token operator">-&gt;</span>now<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果找到一空的 <code>CacheLine</code>, 则填入该 <code>CacheLine</code>. 否则, 所有 <code>CacheLine</code> 都存有数据, 则需要清出一行 <code>CacheLine</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// no empty line, eviction needed</span>
<span class="token operator">++</span><span class="token punctuation">(</span>cache<span class="token operator">-&gt;</span>evictions<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token operator">-&gt;</span>verbose<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;eviction &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 LRU (least-recently used) replacement policy 寻找最老的数据</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// search for least recently used line</span>
SetIndex least_recently_used_id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cache<span class="token operator">-&gt;</span>num_lines_per_set<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cache_lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>timestamp <span class="token operator">&lt;</span>
      cache_lines<span class="token punctuation">[</span>least_recently_used_id<span class="token punctuation">]</span><span class="token punctuation">.</span>timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    least_recently_used_id <span class="token operator">=</span> i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
cache_lines<span class="token punctuation">[</span>least_recently_used_id<span class="token punctuation">]</span><span class="token punctuation">.</span>valid <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
cache_lines<span class="token punctuation">[</span>least_recently_used_id<span class="token punctuation">]</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag<span class="token punctuation">;</span>
cache_lines<span class="token punctuation">[</span>least_recently_used_id<span class="token punctuation">]</span><span class="token punctuation">.</span>timestamp <span class="token operator">=</span> cache<span class="token operator">-&gt;</span>now<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="evaluation" tabindex="-1"><a class="header-anchor" href="#evaluation"><span>Evaluation</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>                        Your simulator     Reference simulator
Points (s,E,b)    Hits  Misses  Evicts    Hits  Misses  Evicts
     3 (1,1,1)       9       8       6       9       8       6  traces/yi2.trace
     3 (4,2,4)       4       5       2       4       5       2  traces/yi.trace
     3 (2,1,4)       2       3       1       2       3       1  traces/dave.trace
     3 (2,1,3)     167      71      67     167      71      67  traces/trans.trace
     3 (2,2,3)     201      37      29     201      37      29  traces/trans.trace
     3 (2,4,3)     212      26      10     212      26      10  traces/trans.trace
     3 (5,1,5)     231       7       0     231       7       0  traces/trans.trace
     6 (5,1,5)  265189   21775   21743  265189   21775   21743  traces/long.trace
    27

TEST_CSIM_RESULTS=27
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="part-b-optimizing-matrix-transpose" tabindex="-1"><a class="header-anchor" href="#part-b-optimizing-matrix-transpose"><span>Part B: Optimizing Matrix Transpose</span></a></h2><p>Cache 参数为</p><table><thead><tr><th>number of set index bits</th><th>number of sets</th><th>number of lines per set</th><th>number of block bits</th><th>block size</th></tr></thead><tbody><tr><td>5</td><td>32</td><td>1</td><td>5</td><td>32</td></tr></tbody></table><p>这意味着每个 <code>CacheBlock</code> 能够存储 8 个 <code>int</code>.</p><p>首先测试默认的 <code>trans()</code>.</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>                        Points   Max pts      Misses
Trans perf 32x32           0.0         8        1183
Trans perf 64x64           0.0         8        4723
Trans perf 61x67           0.0        10        4423
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们只需针对这三种大小的矩阵进行优化即可.</p><h3 id="transpose32x32" tabindex="-1"><a class="header-anchor" href="#transpose32x32"><span>Transpose32x32</span></a></h3><p>考虑 cache blocking, 因为每个 <code>CacheBlock</code> 只能存储 8 个 <code>int</code>, 所以选取 <code>BLOCK_SIZE</code> 为 8, 使用 <code>r0...7</code> 作为临时变量记录一个 <code>CacheBlock</code>.</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> transpose_32x32_desc<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Transpose submission 32x32&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">Transpose32x32</span><span class="token punctuation">(</span><span class="token keyword">int</span> M<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> A<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> B<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BLOCK_SIZE</span> <span class="token expression"><span class="token number">8</span></span></span>
  <span class="token keyword">int</span> current_start_x<span class="token punctuation">,</span> current_start_y<span class="token punctuation">;</span>
  <span class="token keyword">int</span> x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> r0<span class="token punctuation">,</span> r1<span class="token punctuation">,</span> r2<span class="token punctuation">,</span> r3<span class="token punctuation">,</span> r4<span class="token punctuation">,</span> r5<span class="token punctuation">,</span> r6<span class="token punctuation">,</span> r7<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>current_start_x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> current_start_x <span class="token operator">&lt;</span> N<span class="token punctuation">;</span>
       current_start_x <span class="token operator">+=</span> BLOCK_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>current_start_y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> current_start_y <span class="token operator">&lt;</span> M<span class="token punctuation">;</span>
         current_start_y <span class="token operator">+=</span> BLOCK_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> current_start_x<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> current_start_x <span class="token operator">+</span> BLOCK_SIZE<span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        r0 <span class="token operator">=</span> A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>current_start_y<span class="token punctuation">]</span><span class="token punctuation">;</span>
        r1 <span class="token operator">=</span> A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>current_start_y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        r2 <span class="token operator">=</span> A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>current_start_y <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        r3 <span class="token operator">=</span> A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>current_start_y <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        r4 <span class="token operator">=</span> A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>current_start_y <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        r5 <span class="token operator">=</span> A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>current_start_y <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        r6 <span class="token operator">=</span> A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>current_start_y <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        r7 <span class="token operator">=</span> A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>current_start_y <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        B<span class="token punctuation">[</span>current_start_y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> r0<span class="token punctuation">;</span>
        B<span class="token punctuation">[</span>current_start_y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> r1<span class="token punctuation">;</span>
        B<span class="token punctuation">[</span>current_start_y <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> r2<span class="token punctuation">;</span>
        B<span class="token punctuation">[</span>current_start_y <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> r3<span class="token punctuation">;</span>
        B<span class="token punctuation">[</span>current_start_y <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> r4<span class="token punctuation">;</span>
        B<span class="token punctuation">[</span>current_start_y <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> r5<span class="token punctuation">;</span>
        B<span class="token punctuation">[</span>current_start_y <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> r6<span class="token punctuation">;</span>
        B<span class="token punctuation">[</span>current_start_y <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> r7<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="performance" tabindex="-1"><a class="header-anchor" href="#performance"><span>Performance</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>func 0 (Transpose submission): hits:1766, misses:287, evictions:255
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="transpose64x64" tabindex="-1"><a class="header-anchor" href="#transpose64x64"><span>Transpose64x64</span></a></h3><p>如果仍使用简单的分块方法, 得到的结果很不理想</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>func 0 (Transpose submission): hits:3586, misses:4611, evictions:4579
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是因为 <code>A[x][y]</code> 与 <code>A[x + 4][y]</code>, 将会对应到同一 <code>CacheSet</code>, 发生冲突, 导致 miss 增加.</p><p>注意到 Cache 其实有 32 行, 能够存储 4 个 8x8 的矩阵, 这些空行应当被充分利用. 所以, 考虑将 <code>A</code> 中的 8x8 矩阵划分为上下两个 4x8 矩阵, 并且利用 <code>B</code> 中的空余位置记录 Cache. 因此, <code>B</code> 中用来存储这两个 4x8 矩阵的空间在 Cache 中只需要不与 <code>A</code> 中的 8x8 矩阵冲突, 不与 <code>B</code> 中的 8x8 矩阵冲突, 当然也不能互相冲突即可.</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// unused 4x8 block in B for the upper 4x8 block from a 8x8 block in A</span>
<span class="token keyword">int</span> tmp_up_x <span class="token operator">=</span> current_x<span class="token punctuation">;</span>
<span class="token keyword">int</span> tmp_up_y <span class="token operator">=</span> current_y<span class="token punctuation">;</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
  tmp_up_y <span class="token operator">+=</span> BLOCK_SIZE<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp_up_y <span class="token operator">&gt;=</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tmp_up_x <span class="token operator">+=</span> BLOCK_SIZE<span class="token punctuation">;</span>
    tmp_up_y <span class="token operator">-=</span> N<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp_up_y <span class="token operator">==</span> current_x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// unused 4x8 block in B for the lower 4x8 block from a 8x8 block in A</span>
<span class="token keyword">int</span> tmp_down_x <span class="token operator">=</span> tmp_up_x<span class="token punctuation">;</span>
<span class="token keyword">int</span> tmp_down_y <span class="token operator">=</span> tmp_up_y<span class="token punctuation">;</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
  tmp_down_y <span class="token operator">+=</span> BLOCK_SIZE<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp_down_y <span class="token operator">&gt;=</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    tmp_down_x <span class="token operator">+=</span> BLOCK_SIZE<span class="token punctuation">;</span>
    tmp_down_y <span class="token operator">-=</span> N<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp_down_y <span class="token operator">==</span> current_x<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有空余的空间, 就直接进行转置</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>tmp_up_x <span class="token operator">&gt;=</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> BLOCK_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> BLOCK_SIZE<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      B<span class="token punctuation">[</span>current_x <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">[</span>current_y <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>current_y <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">[</span>current_x <span class="token operator">+</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="performance-1" tabindex="-1"><a class="header-anchor" href="#performance-1"><span>Performance</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>func 0 (Transpose submission): hits:14968, misses:1165, evictions:1133
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="transpose61x67" tabindex="-1"><a class="header-anchor" href="#transpose61x67"><span>Transpose61x67</span></a></h3><p>选取一个合适的 <code>BLOCK_SIZE</code> 即可, 这里取为 16.</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">char</span> transpose_61x67_desc<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Transpose submission 61x67&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">Transpose61x67</span><span class="token punctuation">(</span><span class="token keyword">int</span> M<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> A<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> B<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">BLOCK_SIZE</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BLOCK_SIZE</span> <span class="token expression"><span class="token number">16</span></span></span>
  <span class="token keyword">int</span> block_start_x<span class="token punctuation">,</span> block_start_y<span class="token punctuation">;</span>
  <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>block_start_x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> block_start_x <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> block_start_x <span class="token operator">+=</span> BLOCK_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>block_start_y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> block_start_y <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> block_start_y <span class="token operator">+=</span> BLOCK_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> block_start_y<span class="token punctuation">;</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> N<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> block_start_y <span class="token operator">+</span> BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token operator">++</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> block_start_x<span class="token punctuation">;</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> M<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> block_start_x <span class="token operator">+</span> BLOCK_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token operator">++</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          B<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="performance-2" tabindex="-1"><a class="header-anchor" href="#performance-2"><span>Performance</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>func 0 (Transpose submission): hits:6363, misses:1816, evictions:1784
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="pulling-it-all-together" tabindex="-1"><a class="header-anchor" href="#pulling-it-all-together"><span>Pulling it all Together</span></a></h2><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Part A: Testing cache simulator
Running ./test-csim
                        Your simulator     Reference simulator
Points (s,E,b)    Hits  Misses  Evicts    Hits  Misses  Evicts
     3 (1,1,1)       9       8       6       9       8       6  traces/yi2.trace
     3 (4,2,4)       4       5       2       4       5       2  traces/yi.trace
     3 (2,1,4)       2       3       1       2       3       1  traces/dave.trace
     3 (2,1,3)     167      71      67     167      71      67  traces/trans.trace
     3 (2,2,3)     201      37      29     201      37      29  traces/trans.trace
     3 (2,4,3)     212      26      10     212      26      10  traces/trans.trace
     3 (5,1,5)     231       7       0     231       7       0  traces/trans.trace
     6 (5,1,5)  265189   21775   21743  265189   21775   21743  traces/long.trace
    27


Part B: Testing transpose function
Running ./test-trans -M 32 -N 32
Running ./test-trans -M 64 -N 64
Running ./test-trans -M 61 -N 67

Cache Lab summary:
                        Points   Max pts      Misses
Csim correctness          27.0        27
Trans perf 32x32           8.0         8         287
Trans perf 64x64           8.0         8        1165
Trans perf 61x67          10.0        10        1816
          Total points    53.0        53
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,48),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","2022-05-23-cache-lab.html.vue"]]),d=JSON.parse('{"path":"/2022/course-work/csapp/2022-05-23-cache-lab.html","title":"Cache Lab: Understanding Cache Memories","lang":"en-US","frontmatter":{"date":"2022-05-23T00:00:00.000Z","isOriginal":true,"category":["Course Work"],"tag":["Cache Lab","Computer Organization and Architecture"],"title":"Cache Lab: Understanding Cache Memories","description":"Part A: Writing a Cache Simulator argparse 部分使用了更强大的 argp, 而没有使用 getopt (因为一开始没看到作业建议用 getopt) 忽略 Instruction Load, Data Load 和 Data Store 都可看作访问一次 cache, 而 Data Modify 由 Data L...","head":[["meta",{"property":"og:url","content":"https://blog.liblaf.me/2022/course-work/csapp/2022-05-23-cache-lab.html"}],["meta",{"property":"og:site_name","content":"Blog"}],["meta",{"property":"og:title","content":"Cache Lab: Understanding Cache Memories"}],["meta",{"property":"og:description","content":"Part A: Writing a Cache Simulator argparse 部分使用了更强大的 argp, 而没有使用 getopt (因为一开始没看到作业建议用 getopt) 忽略 Instruction Load, Data Load 和 Data Store 都可看作访问一次 cache, 而 Data Modify 由 Data L..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-03T09:57:39.000Z"}],["meta",{"property":"article:author","content":"liblaf"}],["meta",{"property":"article:tag","content":"Cache Lab"}],["meta",{"property":"article:tag","content":"Computer Organization and Architecture"}],["meta",{"property":"article:published_time","content":"2022-05-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-03T09:57:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cache Lab: Understanding Cache Memories\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-23T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-03T09:57:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liblaf\\",\\"url\\":\\"https://liblaf.me\\",\\"email\\":\\"i@liblaf.me\\"}]}"]]},"headers":[{"level":2,"title":"Part A: Writing a Cache Simulator","slug":"part-a-writing-a-cache-simulator","link":"#part-a-writing-a-cache-simulator","children":[{"level":3,"title":"Evaluation","slug":"evaluation","link":"#evaluation","children":[]}]},{"level":2,"title":"Part B: Optimizing Matrix Transpose","slug":"part-b-optimizing-matrix-transpose","link":"#part-b-optimizing-matrix-transpose","children":[{"level":3,"title":"Transpose32x32","slug":"transpose32x32","link":"#transpose32x32","children":[]},{"level":3,"title":"Transpose64x64","slug":"transpose64x64","link":"#transpose64x64","children":[]},{"level":3,"title":"Transpose61x67","slug":"transpose61x67","link":"#transpose61x67","children":[]}]},{"level":2,"title":"Pulling it all Together","slug":"pulling-it-all-together","link":"#pulling-it-all-together","children":[]}],"git":{"createdTime":1677217008000,"updatedTime":1709459859000,"contributors":[{"name":"liblaf","email":"30631553+liblaf@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":4.62,"words":1385},"filePathRelative":"2022/course-work/csapp/2022-05-23-cache-lab.md","localizedDate":"May 23, 2022","excerpt":"<h2>Part A: Writing a Cache Simulator</h2>\\n<blockquote>\\n<p><code>argparse</code> 部分使用了更强大的 <code>argp</code>, 而没有使用 <code>getopt</code> (因为一开始没看到作业建议用 <code>getopt</code>)</p>\\n</blockquote>\\n<p>忽略 Instruction Load, Data Load 和 Data Store 都可看作访问一次 cache, 而 Data Modify 由 Data Load 和 Data Store 组成可看作访问两次 cache.</p>","autoDesc":true}');export{r as comp,d as data};
